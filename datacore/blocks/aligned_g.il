// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N8,System.Int32)
// bool aligned<byte>(N8 n, int count)
// AggressiveInlining
bool aligned<byte>(N8 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N8,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N8,System.Int32)
// bool aligned<sbyte>(N8 n, int count)
// AggressiveInlining
bool aligned<sbyte>(N8 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N8,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N8,System.Int32)
// bool aligned<ushort>(N8 n, int count)
// AggressiveInlining
bool aligned<ushort>(N8 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N8,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N8,System.Int32)
// bool aligned<short>(N8 n, int count)
// AggressiveInlining
bool aligned<short>(N8 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N8,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N8,System.Int32)
// bool aligned<uint>(N8 n, int count)
// AggressiveInlining
bool aligned<uint>(N8 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N8,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N8,System.Int32)
// bool aligned<int>(N8 n, int count)
// AggressiveInlining
bool aligned<int>(N8 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N8,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N8,System.Int32)
// bool aligned<ulong>(N8 n, int count)
// AggressiveInlining
bool aligned<ulong>(N8 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N8,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N8,System.Int32)
// bool aligned<long>(N8 n, int count)
// AggressiveInlining
bool aligned<long>(N8 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N8,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N8,System.Int32)
// bool aligned<float>(N8 n, int count)
// AggressiveInlining
bool aligned<float>(N8 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N8,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N8,System.Int32)
// bool aligned<double>(N8 n, int count)
// AggressiveInlining
bool aligned<double>(N8 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N8,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N16,System.Int32)
// bool aligned<byte>(N16 n, int count)
// AggressiveInlining
bool aligned<byte>(N16 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N16,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N16,System.Int32)
// bool aligned<sbyte>(N16 n, int count)
// AggressiveInlining
bool aligned<sbyte>(N16 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N16,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N16,System.Int32)
// bool aligned<ushort>(N16 n, int count)
// AggressiveInlining
bool aligned<ushort>(N16 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N16,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N16,System.Int32)
// bool aligned<short>(N16 n, int count)
// AggressiveInlining
bool aligned<short>(N16 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N16,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N16,System.Int32)
// bool aligned<uint>(N16 n, int count)
// AggressiveInlining
bool aligned<uint>(N16 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N16,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N16,System.Int32)
// bool aligned<int>(N16 n, int count)
// AggressiveInlining
bool aligned<int>(N16 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N16,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N16,System.Int32)
// bool aligned<ulong>(N16 n, int count)
// AggressiveInlining
bool aligned<ulong>(N16 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N16,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N16,System.Int32)
// bool aligned<long>(N16 n, int count)
// AggressiveInlining
bool aligned<long>(N16 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N16,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N16,System.Int32)
// bool aligned<float>(N16 n, int count)
// AggressiveInlining
bool aligned<float>(N16 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N16,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N16,System.Int32)
// bool aligned<double>(N16 n, int count)
// AggressiveInlining
bool aligned<double>(N16 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N16,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N32,System.Int32)
// bool aligned<byte>(N32 n, int count)
// AggressiveInlining
bool aligned<byte>(N32 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N32,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N32,System.Int32)
// bool aligned<sbyte>(N32 n, int count)
// AggressiveInlining
bool aligned<sbyte>(N32 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N32,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N32,System.Int32)
// bool aligned<ushort>(N32 n, int count)
// AggressiveInlining
bool aligned<ushort>(N32 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N32,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N32,System.Int32)
// bool aligned<short>(N32 n, int count)
// AggressiveInlining
bool aligned<short>(N32 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N32,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N32,System.Int32)
// bool aligned<uint>(N32 n, int count)
// AggressiveInlining
bool aligned<uint>(N32 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N32,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N32,System.Int32)
// bool aligned<int>(N32 n, int count)
// AggressiveInlining
bool aligned<int>(N32 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N32,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N32,System.Int32)
// bool aligned<ulong>(N32 n, int count)
// AggressiveInlining
bool aligned<ulong>(N32 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N32,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N32,System.Int32)
// bool aligned<long>(N32 n, int count)
// AggressiveInlining
bool aligned<long>(N32 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N32,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N32,System.Int32)
// bool aligned<float>(N32 n, int count)
// AggressiveInlining
bool aligned<float>(N32 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N32,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N32,System.Int32)
// bool aligned<double>(N32 n, int count)
// AggressiveInlining
bool aligned<double>(N32 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N32,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N64,System.Int32)
// bool aligned<byte>(N64 n, int count)
// AggressiveInlining
bool aligned<byte>(N64 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N64,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N64,System.Int32)
// bool aligned<sbyte>(N64 n, int count)
// AggressiveInlining
bool aligned<sbyte>(N64 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N64,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N64,System.Int32)
// bool aligned<ushort>(N64 n, int count)
// AggressiveInlining
bool aligned<ushort>(N64 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N64,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N64,System.Int32)
// bool aligned<short>(N64 n, int count)
// AggressiveInlining
bool aligned<short>(N64 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N64,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N64,System.Int32)
// bool aligned<uint>(N64 n, int count)
// AggressiveInlining
bool aligned<uint>(N64 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N64,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N64,System.Int32)
// bool aligned<int>(N64 n, int count)
// AggressiveInlining
bool aligned<int>(N64 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N64,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N64,System.Int32)
// bool aligned<ulong>(N64 n, int count)
// AggressiveInlining
bool aligned<ulong>(N64 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N64,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N64,System.Int32)
// bool aligned<long>(N64 n, int count)
// AggressiveInlining
bool aligned<long>(N64 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N64,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N64,System.Int32)
// bool aligned<float>(N64 n, int count)
// AggressiveInlining
bool aligned<float>(N64 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N64,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N64,System.Int32)
// bool aligned<double>(N64 n, int count)
// AggressiveInlining
bool aligned<double>(N64 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N64,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N128,System.Int32)
// bool aligned<byte>(N128 n, int count)
// AggressiveInlining
bool aligned<byte>(N128 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N128,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N128,System.Int32)
// bool aligned<sbyte>(N128 n, int count)
// AggressiveInlining
bool aligned<sbyte>(N128 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N128,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N128,System.Int32)
// bool aligned<ushort>(N128 n, int count)
// AggressiveInlining
bool aligned<ushort>(N128 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N128,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N128,System.Int32)
// bool aligned<short>(N128 n, int count)
// AggressiveInlining
bool aligned<short>(N128 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N128,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N128,System.Int32)
// bool aligned<uint>(N128 n, int count)
// AggressiveInlining
bool aligned<uint>(N128 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N128,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N128,System.Int32)
// bool aligned<int>(N128 n, int count)
// AggressiveInlining
bool aligned<int>(N128 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N128,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N128,System.Int32)
// bool aligned<ulong>(N128 n, int count)
// AggressiveInlining
bool aligned<ulong>(N128 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N128,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N128,System.Int32)
// bool aligned<long>(N128 n, int count)
// AggressiveInlining
bool aligned<long>(N128 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N128,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N128,System.Int32)
// bool aligned<float>(N128 n, int count)
// AggressiveInlining
bool aligned<float>(N128 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N128,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N128,System.Int32)
// bool aligned<double>(N128 n, int count)
// AggressiveInlining
bool aligned<double>(N128 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N128,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N256,System.Int32)
// bool aligned<byte>(N256 n, int count)
// AggressiveInlining
bool aligned<byte>(N256 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N256,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N256,System.Int32)
// bool aligned<sbyte>(N256 n, int count)
// AggressiveInlining
bool aligned<sbyte>(N256 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N256,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N256,System.Int32)
// bool aligned<ushort>(N256 n, int count)
// AggressiveInlining
bool aligned<ushort>(N256 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N256,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N256,System.Int32)
// bool aligned<short>(N256 n, int count)
// AggressiveInlining
bool aligned<short>(N256 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N256,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N256,System.Int32)
// bool aligned<uint>(N256 n, int count)
// AggressiveInlining
bool aligned<uint>(N256 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N256,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N256,System.Int32)
// bool aligned<int>(N256 n, int count)
// AggressiveInlining
bool aligned<int>(N256 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N256,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N256,System.Int32)
// bool aligned<ulong>(N256 n, int count)
// AggressiveInlining
bool aligned<ulong>(N256 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N256,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N256,System.Int32)
// bool aligned<long>(N256 n, int count)
// AggressiveInlining
bool aligned<long>(N256 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N256,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N256,System.Int32)
// bool aligned<float>(N256 n, int count)
// AggressiveInlining
bool aligned<float>(N256 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N256,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N256,System.Int32)
// bool aligned<double>(N256 n, int count)
// AggressiveInlining
bool aligned<double>(N256 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N256,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N512,System.Int32)
// bool aligned<byte>(N512 n, int count)
// AggressiveInlining
bool aligned<byte>(N512 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N512,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N512,System.Int32)
// bool aligned<sbyte>(N512 n, int count)
// AggressiveInlining
bool aligned<sbyte>(N512 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N512,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N512,System.Int32)
// bool aligned<ushort>(N512 n, int count)
// AggressiveInlining
bool aligned<ushort>(N512 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N512,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N512,System.Int32)
// bool aligned<short>(N512 n, int count)
// AggressiveInlining
bool aligned<short>(N512 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N512,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N512,System.Int32)
// bool aligned<uint>(N512 n, int count)
// AggressiveInlining
bool aligned<uint>(N512 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N512,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N512,System.Int32)
// bool aligned<int>(N512 n, int count)
// AggressiveInlining
bool aligned<int>(N512 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N512,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N512,System.Int32)
// bool aligned<ulong>(N512 n, int count)
// AggressiveInlining
bool aligned<ulong>(N512 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N512,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N512,System.Int32)
// bool aligned<long>(N512 n, int count)
// AggressiveInlining
bool aligned<long>(N512 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N512,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N512,System.Int32)
// bool aligned<float>(N512 n, int count)
// AggressiveInlining
bool aligned<float>(N512 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N512,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Boolean Z0.DataBlocks::aligned<T>(Z0.N512,System.Int32)
// bool aligned<double>(N512 n, int count)
// AggressiveInlining
bool aligned<double>(N512 n, int count)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldloca.s V_0
    IL_0004: initobj T
    IL_000A: ldloc.0
    IL_000B: call System.Int32 Z0.DataBlocks::blocklen<T>(Z0.N512,T)
    IL_0010: rem
    IL_0011: ldc.i4.0
    IL_0012: ceq
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
