// System.UInt16 Z0.BitPack::packmsb8<T>(System.Runtime.Intrinsics.Vector128`1<T>)
// ushort packmsb8<byte>(Vector128<byte> src)
// AggressiveInlining
ushort packmsb8<byte>(Vector128<byte> src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.ginx::vtakemask<T>(System.Runtime.Intrinsics.Vector128`1<T>)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt16 Z0.BitPack::packmsb8<T>(System.Runtime.Intrinsics.Vector128`1<T>)
// ushort packmsb8<sbyte>(Vector128<sbyte> src)
// AggressiveInlining
ushort packmsb8<sbyte>(Vector128<sbyte> src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.ginx::vtakemask<T>(System.Runtime.Intrinsics.Vector128`1<T>)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt16 Z0.BitPack::packmsb8<T>(System.Runtime.Intrinsics.Vector128`1<T>)
// ushort packmsb8<ushort>(Vector128<ushort> src)
// AggressiveInlining
ushort packmsb8<ushort>(Vector128<ushort> src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.ginx::vtakemask<T>(System.Runtime.Intrinsics.Vector128`1<T>)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt16 Z0.BitPack::packmsb8<T>(System.Runtime.Intrinsics.Vector128`1<T>)
// ushort packmsb8<short>(Vector128<short> src)
// AggressiveInlining
ushort packmsb8<short>(Vector128<short> src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.ginx::vtakemask<T>(System.Runtime.Intrinsics.Vector128`1<T>)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt16 Z0.BitPack::packmsb8<T>(System.Runtime.Intrinsics.Vector128`1<T>)
// ushort packmsb8<uint>(Vector128<uint> src)
// AggressiveInlining
ushort packmsb8<uint>(Vector128<uint> src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.ginx::vtakemask<T>(System.Runtime.Intrinsics.Vector128`1<T>)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt16 Z0.BitPack::packmsb8<T>(System.Runtime.Intrinsics.Vector128`1<T>)
// ushort packmsb8<int>(Vector128<int> src)
// AggressiveInlining
ushort packmsb8<int>(Vector128<int> src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.ginx::vtakemask<T>(System.Runtime.Intrinsics.Vector128`1<T>)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt16 Z0.BitPack::packmsb8<T>(System.Runtime.Intrinsics.Vector128`1<T>)
// ushort packmsb8<ulong>(Vector128<ulong> src)
// AggressiveInlining
ushort packmsb8<ulong>(Vector128<ulong> src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.ginx::vtakemask<T>(System.Runtime.Intrinsics.Vector128`1<T>)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt16 Z0.BitPack::packmsb8<T>(System.Runtime.Intrinsics.Vector128`1<T>)
// ushort packmsb8<long>(Vector128<long> src)
// AggressiveInlining
ushort packmsb8<long>(Vector128<long> src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.ginx::vtakemask<T>(System.Runtime.Intrinsics.Vector128`1<T>)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt64 Z0.BitPack::packmsb8<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// ulong packmsb8<byte>(Vector256<byte> src)
// AggressiveInlining
ulong packmsb8<byte>(Vector256<byte> src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.ginx::vtakemask<T>(System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0006: conv.u8
    IL_0007: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt64 Z0.BitPack::packmsb8<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// ulong packmsb8<sbyte>(Vector256<sbyte> src)
// AggressiveInlining
ulong packmsb8<sbyte>(Vector256<sbyte> src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.ginx::vtakemask<T>(System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0006: conv.u8
    IL_0007: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt64 Z0.BitPack::packmsb8<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// ulong packmsb8<ushort>(Vector256<ushort> src)
// AggressiveInlining
ulong packmsb8<ushort>(Vector256<ushort> src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.ginx::vtakemask<T>(System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0006: conv.u8
    IL_0007: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt64 Z0.BitPack::packmsb8<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// ulong packmsb8<short>(Vector256<short> src)
// AggressiveInlining
ulong packmsb8<short>(Vector256<short> src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.ginx::vtakemask<T>(System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0006: conv.u8
    IL_0007: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt64 Z0.BitPack::packmsb8<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// ulong packmsb8<uint>(Vector256<uint> src)
// AggressiveInlining
ulong packmsb8<uint>(Vector256<uint> src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.ginx::vtakemask<T>(System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0006: conv.u8
    IL_0007: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt64 Z0.BitPack::packmsb8<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// ulong packmsb8<int>(Vector256<int> src)
// AggressiveInlining
ulong packmsb8<int>(Vector256<int> src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.ginx::vtakemask<T>(System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0006: conv.u8
    IL_0007: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt64 Z0.BitPack::packmsb8<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// ulong packmsb8<ulong>(Vector256<ulong> src)
// AggressiveInlining
ulong packmsb8<ulong>(Vector256<ulong> src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.ginx::vtakemask<T>(System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0006: conv.u8
    IL_0007: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt64 Z0.BitPack::packmsb8<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// ulong packmsb8<long>(Vector256<long> src)
// AggressiveInlining
ulong packmsb8<long>(Vector256<long> src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.ginx::vtakemask<T>(System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0006: conv.u8
    IL_0007: ret
}
------------------------------------------------------------------------------------------------------------------------
