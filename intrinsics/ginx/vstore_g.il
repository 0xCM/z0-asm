// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Fixed128&)
// void vstore<byte>(Vector128<byte> src, ref Fixed128 dst)
// AggressiveInlining
void vstore<byte>(Vector128<byte> src, ref Fixed128 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed128&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Fixed128&)
// void vstore<sbyte>(Vector128<sbyte> src, ref Fixed128 dst)
// AggressiveInlining
void vstore<sbyte>(Vector128<sbyte> src, ref Fixed128 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed128&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Fixed128&)
// void vstore<ushort>(Vector128<ushort> src, ref Fixed128 dst)
// AggressiveInlining
void vstore<ushort>(Vector128<ushort> src, ref Fixed128 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed128&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Fixed128&)
// void vstore<short>(Vector128<short> src, ref Fixed128 dst)
// AggressiveInlining
void vstore<short>(Vector128<short> src, ref Fixed128 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed128&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Fixed128&)
// void vstore<uint>(Vector128<uint> src, ref Fixed128 dst)
// AggressiveInlining
void vstore<uint>(Vector128<uint> src, ref Fixed128 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed128&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Fixed128&)
// void vstore<int>(Vector128<int> src, ref Fixed128 dst)
// AggressiveInlining
void vstore<int>(Vector128<int> src, ref Fixed128 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed128&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Fixed128&)
// void vstore<ulong>(Vector128<ulong> src, ref Fixed128 dst)
// AggressiveInlining
void vstore<ulong>(Vector128<ulong> src, ref Fixed128 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed128&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Fixed128&)
// void vstore<long>(Vector128<long> src, ref Fixed128 dst)
// AggressiveInlining
void vstore<long>(Vector128<long> src, ref Fixed128 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed128&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Fixed128&)
// void vstore<float>(Vector128<float> src, ref Fixed128 dst)
// AggressiveInlining
void vstore<float>(Vector128<float> src, ref Fixed128 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed128&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Fixed128&)
// void vstore<double>(Vector128<double> src, ref Fixed128 dst)
// AggressiveInlining
void vstore<double>(Vector128<double> src, ref Fixed128 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed128&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Fixed256&)
// void vstore<byte>(Vector256<byte> src, ref Fixed256 dst)
// AggressiveInlining
void vstore<byte>(Vector256<byte> src, ref Fixed256 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed256&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Fixed256&)
// void vstore<sbyte>(Vector256<sbyte> src, ref Fixed256 dst)
// AggressiveInlining
void vstore<sbyte>(Vector256<sbyte> src, ref Fixed256 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed256&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Fixed256&)
// void vstore<ushort>(Vector256<ushort> src, ref Fixed256 dst)
// AggressiveInlining
void vstore<ushort>(Vector256<ushort> src, ref Fixed256 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed256&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Fixed256&)
// void vstore<short>(Vector256<short> src, ref Fixed256 dst)
// AggressiveInlining
void vstore<short>(Vector256<short> src, ref Fixed256 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed256&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Fixed256&)
// void vstore<uint>(Vector256<uint> src, ref Fixed256 dst)
// AggressiveInlining
void vstore<uint>(Vector256<uint> src, ref Fixed256 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed256&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Fixed256&)
// void vstore<int>(Vector256<int> src, ref Fixed256 dst)
// AggressiveInlining
void vstore<int>(Vector256<int> src, ref Fixed256 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed256&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Fixed256&)
// void vstore<ulong>(Vector256<ulong> src, ref Fixed256 dst)
// AggressiveInlining
void vstore<ulong>(Vector256<ulong> src, ref Fixed256 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed256&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Fixed256&)
// void vstore<long>(Vector256<long> src, ref Fixed256 dst)
// AggressiveInlining
void vstore<long>(Vector256<long> src, ref Fixed256 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed256&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Fixed256&)
// void vstore<float>(Vector256<float> src, ref Fixed256 dst)
// AggressiveInlining
void vstore<float>(Vector256<float> src, ref Fixed256 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed256&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Fixed256&)
// void vstore<double>(Vector256<double> src, ref Fixed256 dst)
// AggressiveInlining
void vstore<double>(Vector256<double> src, ref Fixed256 dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Fixed::head<T>(Z0.Fixed256&)
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,System.Span`1<T>,System.Int32)
// void vstore<byte>(Vector128<byte> src, Span<byte> dst, int offset)
// AggressiveInlining
void vstore<byte>(Vector128<byte> src, Span<byte> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,System.Span`1<T>,System.Int32)
// void vstore<sbyte>(Vector128<sbyte> src, Span<sbyte> dst, int offset)
// AggressiveInlining
void vstore<sbyte>(Vector128<sbyte> src, Span<sbyte> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,System.Span`1<T>,System.Int32)
// void vstore<ushort>(Vector128<ushort> src, Span<ushort> dst, int offset)
// AggressiveInlining
void vstore<ushort>(Vector128<ushort> src, Span<ushort> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,System.Span`1<T>,System.Int32)
// void vstore<short>(Vector128<short> src, Span<short> dst, int offset)
// AggressiveInlining
void vstore<short>(Vector128<short> src, Span<short> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,System.Span`1<T>,System.Int32)
// void vstore<uint>(Vector128<uint> src, Span<uint> dst, int offset)
// AggressiveInlining
void vstore<uint>(Vector128<uint> src, Span<uint> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,System.Span`1<T>,System.Int32)
// void vstore<int>(Vector128<int> src, Span<int> dst, int offset)
// AggressiveInlining
void vstore<int>(Vector128<int> src, Span<int> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,System.Span`1<T>,System.Int32)
// void vstore<ulong>(Vector128<ulong> src, Span<ulong> dst, int offset)
// AggressiveInlining
void vstore<ulong>(Vector128<ulong> src, Span<ulong> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,System.Span`1<T>,System.Int32)
// void vstore<long>(Vector128<long> src, Span<long> dst, int offset)
// AggressiveInlining
void vstore<long>(Vector128<long> src, Span<long> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,System.Span`1<T>,System.Int32)
// void vstore<float>(Vector128<float> src, Span<float> dst, int offset)
// AggressiveInlining
void vstore<float>(Vector128<float> src, Span<float> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,System.Span`1<T>,System.Int32)
// void vstore<double>(Vector128<double> src, Span<double> dst, int offset)
// AggressiveInlining
void vstore<double>(Vector128<double> src, Span<double> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,System.Span`1<T>,System.Int32)
// void vstore<byte>(Vector256<byte> src, Span<byte> dst, int offset)
// AggressiveInlining
void vstore<byte>(Vector256<byte> src, Span<byte> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,System.Span`1<T>,System.Int32)
// void vstore<sbyte>(Vector256<sbyte> src, Span<sbyte> dst, int offset)
// AggressiveInlining
void vstore<sbyte>(Vector256<sbyte> src, Span<sbyte> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,System.Span`1<T>,System.Int32)
// void vstore<ushort>(Vector256<ushort> src, Span<ushort> dst, int offset)
// AggressiveInlining
void vstore<ushort>(Vector256<ushort> src, Span<ushort> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,System.Span`1<T>,System.Int32)
// void vstore<short>(Vector256<short> src, Span<short> dst, int offset)
// AggressiveInlining
void vstore<short>(Vector256<short> src, Span<short> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,System.Span`1<T>,System.Int32)
// void vstore<uint>(Vector256<uint> src, Span<uint> dst, int offset)
// AggressiveInlining
void vstore<uint>(Vector256<uint> src, Span<uint> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,System.Span`1<T>,System.Int32)
// void vstore<int>(Vector256<int> src, Span<int> dst, int offset)
// AggressiveInlining
void vstore<int>(Vector256<int> src, Span<int> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,System.Span`1<T>,System.Int32)
// void vstore<ulong>(Vector256<ulong> src, Span<ulong> dst, int offset)
// AggressiveInlining
void vstore<ulong>(Vector256<ulong> src, Span<ulong> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,System.Span`1<T>,System.Int32)
// void vstore<long>(Vector256<long> src, Span<long> dst, int offset)
// AggressiveInlining
void vstore<long>(Vector256<long> src, Span<long> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,System.Span`1<T>,System.Int32)
// void vstore<float>(Vector256<float> src, Span<float> dst, int offset)
// AggressiveInlining
void vstore<float>(Vector256<float> src, Span<float> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,System.Span`1<T>,System.Int32)
// void vstore<double>(Vector256<double> src, Span<double> dst, int offset)
// AggressiveInlining
void vstore<double>(Vector256<double> src, Span<double> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,System.Span`1<T>,System.Int32)
// void vstore<byte>(Vector512<byte> src, Span<byte> dst, int offset)
// AggressiveInlining
void vstore<byte>(Vector512<byte> src, Span<byte> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,System.Span`1<T>,System.Int32)
// void vstore<sbyte>(Vector512<sbyte> src, Span<sbyte> dst, int offset)
// AggressiveInlining
void vstore<sbyte>(Vector512<sbyte> src, Span<sbyte> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,System.Span`1<T>,System.Int32)
// void vstore<ushort>(Vector512<ushort> src, Span<ushort> dst, int offset)
// AggressiveInlining
void vstore<ushort>(Vector512<ushort> src, Span<ushort> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,System.Span`1<T>,System.Int32)
// void vstore<short>(Vector512<short> src, Span<short> dst, int offset)
// AggressiveInlining
void vstore<short>(Vector512<short> src, Span<short> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,System.Span`1<T>,System.Int32)
// void vstore<uint>(Vector512<uint> src, Span<uint> dst, int offset)
// AggressiveInlining
void vstore<uint>(Vector512<uint> src, Span<uint> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,System.Span`1<T>,System.Int32)
// void vstore<int>(Vector512<int> src, Span<int> dst, int offset)
// AggressiveInlining
void vstore<int>(Vector512<int> src, Span<int> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,System.Span`1<T>,System.Int32)
// void vstore<ulong>(Vector512<ulong> src, Span<ulong> dst, int offset)
// AggressiveInlining
void vstore<ulong>(Vector512<ulong> src, Span<ulong> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,System.Span`1<T>,System.Int32)
// void vstore<long>(Vector512<long> src, Span<long> dst, int offset)
// AggressiveInlining
void vstore<long>(Vector512<long> src, Span<long> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,System.Span`1<T>,System.Int32)
// void vstore<float>(Vector512<float> src, Span<float> dst, int offset)
// AggressiveInlining
void vstore<float>(Vector512<float> src, Span<float> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,System.Span`1<T>,System.Int32)
// void vstore<double>(Vector512<double> src, Span<double> dst, int offset)
// AggressiveInlining
void vstore<double>(Vector512<double> src, Span<double> dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&)
// void vstore<byte>(Vector128<byte> src, in Block128<byte> dst)
// AggressiveInlining
void vstore<byte>(Vector128<byte> src, in Block128<byte> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block128`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&)
// void vstore<sbyte>(Vector128<sbyte> src, in Block128<sbyte> dst)
// AggressiveInlining
void vstore<sbyte>(Vector128<sbyte> src, in Block128<sbyte> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block128`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&)
// void vstore<ushort>(Vector128<ushort> src, in Block128<ushort> dst)
// AggressiveInlining
void vstore<ushort>(Vector128<ushort> src, in Block128<ushort> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block128`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&)
// void vstore<short>(Vector128<short> src, in Block128<short> dst)
// AggressiveInlining
void vstore<short>(Vector128<short> src, in Block128<short> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block128`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&)
// void vstore<uint>(Vector128<uint> src, in Block128<uint> dst)
// AggressiveInlining
void vstore<uint>(Vector128<uint> src, in Block128<uint> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block128`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&)
// void vstore<int>(Vector128<int> src, in Block128<int> dst)
// AggressiveInlining
void vstore<int>(Vector128<int> src, in Block128<int> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block128`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&)
// void vstore<ulong>(Vector128<ulong> src, in Block128<ulong> dst)
// AggressiveInlining
void vstore<ulong>(Vector128<ulong> src, in Block128<ulong> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block128`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&)
// void vstore<long>(Vector128<long> src, in Block128<long> dst)
// AggressiveInlining
void vstore<long>(Vector128<long> src, in Block128<long> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block128`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&)
// void vstore<float>(Vector128<float> src, in Block128<float> dst)
// AggressiveInlining
void vstore<float>(Vector128<float> src, in Block128<float> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block128`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&)
// void vstore<double>(Vector128<double> src, in Block128<double> dst)
// AggressiveInlining
void vstore<double>(Vector128<double> src, in Block128<double> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block128`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&,System.Int32)
// void vstore<byte>(Vector128<byte> src, in Block128<byte> dst, int block)
// AggressiveInlining
void vstore<byte>(Vector128<byte> src, in Block128<byte> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block128`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&,System.Int32)
// void vstore<sbyte>(Vector128<sbyte> src, in Block128<sbyte> dst, int block)
// AggressiveInlining
void vstore<sbyte>(Vector128<sbyte> src, in Block128<sbyte> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block128`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&,System.Int32)
// void vstore<ushort>(Vector128<ushort> src, in Block128<ushort> dst, int block)
// AggressiveInlining
void vstore<ushort>(Vector128<ushort> src, in Block128<ushort> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block128`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&,System.Int32)
// void vstore<short>(Vector128<short> src, in Block128<short> dst, int block)
// AggressiveInlining
void vstore<short>(Vector128<short> src, in Block128<short> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block128`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&,System.Int32)
// void vstore<uint>(Vector128<uint> src, in Block128<uint> dst, int block)
// AggressiveInlining
void vstore<uint>(Vector128<uint> src, in Block128<uint> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block128`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&,System.Int32)
// void vstore<int>(Vector128<int> src, in Block128<int> dst, int block)
// AggressiveInlining
void vstore<int>(Vector128<int> src, in Block128<int> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block128`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&,System.Int32)
// void vstore<ulong>(Vector128<ulong> src, in Block128<ulong> dst, int block)
// AggressiveInlining
void vstore<ulong>(Vector128<ulong> src, in Block128<ulong> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block128`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&,System.Int32)
// void vstore<long>(Vector128<long> src, in Block128<long> dst, int block)
// AggressiveInlining
void vstore<long>(Vector128<long> src, in Block128<long> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block128`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&,System.Int32)
// void vstore<float>(Vector128<float> src, in Block128<float> dst, int block)
// AggressiveInlining
void vstore<float>(Vector128<float> src, in Block128<float> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block128`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,Z0.Block128`1<T>&,System.Int32)
// void vstore<double>(Vector128<double> src, in Block128<double> dst, int block)
// AggressiveInlining
void vstore<double>(Vector128<double> src, in Block128<double> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block128`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&)
// void vstore<byte>(Vector256<byte> src, in Block256<byte> dst)
// AggressiveInlining
void vstore<byte>(Vector256<byte> src, in Block256<byte> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block256`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&)
// void vstore<sbyte>(Vector256<sbyte> src, in Block256<sbyte> dst)
// AggressiveInlining
void vstore<sbyte>(Vector256<sbyte> src, in Block256<sbyte> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block256`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&)
// void vstore<ushort>(Vector256<ushort> src, in Block256<ushort> dst)
// AggressiveInlining
void vstore<ushort>(Vector256<ushort> src, in Block256<ushort> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block256`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&)
// void vstore<short>(Vector256<short> src, in Block256<short> dst)
// AggressiveInlining
void vstore<short>(Vector256<short> src, in Block256<short> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block256`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&)
// void vstore<uint>(Vector256<uint> src, in Block256<uint> dst)
// AggressiveInlining
void vstore<uint>(Vector256<uint> src, in Block256<uint> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block256`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&)
// void vstore<int>(Vector256<int> src, in Block256<int> dst)
// AggressiveInlining
void vstore<int>(Vector256<int> src, in Block256<int> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block256`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&)
// void vstore<ulong>(Vector256<ulong> src, in Block256<ulong> dst)
// AggressiveInlining
void vstore<ulong>(Vector256<ulong> src, in Block256<ulong> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block256`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&)
// void vstore<long>(Vector256<long> src, in Block256<long> dst)
// AggressiveInlining
void vstore<long>(Vector256<long> src, in Block256<long> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block256`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&)
// void vstore<float>(Vector256<float> src, in Block256<float> dst)
// AggressiveInlining
void vstore<float>(Vector256<float> src, in Block256<float> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block256`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&)
// void vstore<double>(Vector256<double> src, in Block256<double> dst)
// AggressiveInlining
void vstore<double>(Vector256<double> src, in Block256<double> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.Block256`1<T>::get_Head()
    IL_0007: ldc.i4.0
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&,System.Int32)
// void vstore<byte>(Vector256<byte> src, in Block256<byte> dst, int block)
// AggressiveInlining
void vstore<byte>(Vector256<byte> src, in Block256<byte> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block256`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&,System.Int32)
// void vstore<sbyte>(Vector256<sbyte> src, in Block256<sbyte> dst, int block)
// AggressiveInlining
void vstore<sbyte>(Vector256<sbyte> src, in Block256<sbyte> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block256`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&,System.Int32)
// void vstore<ushort>(Vector256<ushort> src, in Block256<ushort> dst, int block)
// AggressiveInlining
void vstore<ushort>(Vector256<ushort> src, in Block256<ushort> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block256`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&,System.Int32)
// void vstore<short>(Vector256<short> src, in Block256<short> dst, int block)
// AggressiveInlining
void vstore<short>(Vector256<short> src, in Block256<short> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block256`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&,System.Int32)
// void vstore<uint>(Vector256<uint> src, in Block256<uint> dst, int block)
// AggressiveInlining
void vstore<uint>(Vector256<uint> src, in Block256<uint> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block256`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&,System.Int32)
// void vstore<int>(Vector256<int> src, in Block256<int> dst, int block)
// AggressiveInlining
void vstore<int>(Vector256<int> src, in Block256<int> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block256`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&,System.Int32)
// void vstore<ulong>(Vector256<ulong> src, in Block256<ulong> dst, int block)
// AggressiveInlining
void vstore<ulong>(Vector256<ulong> src, in Block256<ulong> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block256`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&,System.Int32)
// void vstore<long>(Vector256<long> src, in Block256<long> dst, int block)
// AggressiveInlining
void vstore<long>(Vector256<long> src, in Block256<long> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block256`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&,System.Int32)
// void vstore<float>(Vector256<float> src, in Block256<float> dst, int block)
// AggressiveInlining
void vstore<float>(Vector256<float> src, in Block256<float> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block256`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,Z0.Block256`1<T>&,System.Int32)
// void vstore<double>(Vector256<double> src, in Block256<double> dst, int block)
// AggressiveInlining
void vstore<double>(Vector256<double> src, in Block256<double> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block256`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,Z0.Block512`1<T>&,System.Int32)
// void vstore<byte>(Vector512<byte> src, in Block512<byte> dst, int block)
// AggressiveInlining
void vstore<byte>(Vector512<byte> src, in Block512<byte> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,Z0.Block512`1<T>&,System.Int32)
// void vstore<sbyte>(Vector512<sbyte> src, in Block512<sbyte> dst, int block)
// AggressiveInlining
void vstore<sbyte>(Vector512<sbyte> src, in Block512<sbyte> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,Z0.Block512`1<T>&,System.Int32)
// void vstore<ushort>(Vector512<ushort> src, in Block512<ushort> dst, int block)
// AggressiveInlining
void vstore<ushort>(Vector512<ushort> src, in Block512<ushort> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,Z0.Block512`1<T>&,System.Int32)
// void vstore<short>(Vector512<short> src, in Block512<short> dst, int block)
// AggressiveInlining
void vstore<short>(Vector512<short> src, in Block512<short> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,Z0.Block512`1<T>&,System.Int32)
// void vstore<uint>(Vector512<uint> src, in Block512<uint> dst, int block)
// AggressiveInlining
void vstore<uint>(Vector512<uint> src, in Block512<uint> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,Z0.Block512`1<T>&,System.Int32)
// void vstore<int>(Vector512<int> src, in Block512<int> dst, int block)
// AggressiveInlining
void vstore<int>(Vector512<int> src, in Block512<int> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,Z0.Block512`1<T>&,System.Int32)
// void vstore<ulong>(Vector512<ulong> src, in Block512<ulong> dst, int block)
// AggressiveInlining
void vstore<ulong>(Vector512<ulong> src, in Block512<ulong> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,Z0.Block512`1<T>&,System.Int32)
// void vstore<long>(Vector512<long> src, in Block512<long> dst, int block)
// AggressiveInlining
void vstore<long>(Vector512<long> src, in Block512<long> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,Z0.Block512`1<T>&,System.Int32)
// void vstore<float>(Vector512<float> src, in Block512<float> dst, int block)
// AggressiveInlining
void vstore<float>(Vector512<float> src, in Block512<float> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,Z0.Block512`1<T>&,System.Int32)
// void vstore<double>(Vector512<double> src, in Block512<double> dst, int block)
// AggressiveInlining
void vstore<double>(Vector512<double> src, in Block512<double> dst, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: call System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
    IL_000E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
// void vstore<byte>(Vector128<byte> src, ref byte dst, int offset)
// AggressiveInlining
void vstore<byte>(Vector128<byte> src, ref byte dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore128_u<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore128_i<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore128_f<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
// void vstore<sbyte>(Vector128<sbyte> src, ref sbyte dst, int offset)
// AggressiveInlining
void vstore<sbyte>(Vector128<sbyte> src, ref sbyte dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore128_u<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore128_i<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore128_f<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
// void vstore<ushort>(Vector128<ushort> src, ref ushort dst, int offset)
// AggressiveInlining
void vstore<ushort>(Vector128<ushort> src, ref ushort dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore128_u<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore128_i<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore128_f<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
// void vstore<short>(Vector128<short> src, ref short dst, int offset)
// AggressiveInlining
void vstore<short>(Vector128<short> src, ref short dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore128_u<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore128_i<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore128_f<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
// void vstore<uint>(Vector128<uint> src, ref uint dst, int offset)
// AggressiveInlining
void vstore<uint>(Vector128<uint> src, ref uint dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore128_u<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore128_i<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore128_f<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
// void vstore<int>(Vector128<int> src, ref int dst, int offset)
// AggressiveInlining
void vstore<int>(Vector128<int> src, ref int dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore128_u<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore128_i<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore128_f<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
// void vstore<ulong>(Vector128<ulong> src, ref ulong dst, int offset)
// AggressiveInlining
void vstore<ulong>(Vector128<ulong> src, ref ulong dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore128_u<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore128_i<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore128_f<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
// void vstore<long>(Vector128<long> src, ref long dst, int offset)
// AggressiveInlining
void vstore<long>(Vector128<long> src, ref long dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore128_u<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore128_i<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore128_f<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
// void vstore<float>(Vector128<float> src, ref float dst, int offset)
// AggressiveInlining
void vstore<float>(Vector128<float> src, ref float dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore128_u<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore128_i<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore128_f<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
// void vstore<double>(Vector128<double> src, ref double dst, int offset)
// AggressiveInlining
void vstore<double>(Vector128<double> src, ref double dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore128_u<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore128_i<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore128_f<T>(System.Runtime.Intrinsics.Vector128`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
// void vstore<byte>(Vector256<byte> src, ref byte dst, int offset)
// AggressiveInlining
void vstore<byte>(Vector256<byte> src, ref byte dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore256_u<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore256_i<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore256_f<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
// void vstore<sbyte>(Vector256<sbyte> src, ref sbyte dst, int offset)
// AggressiveInlining
void vstore<sbyte>(Vector256<sbyte> src, ref sbyte dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore256_u<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore256_i<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore256_f<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
// void vstore<ushort>(Vector256<ushort> src, ref ushort dst, int offset)
// AggressiveInlining
void vstore<ushort>(Vector256<ushort> src, ref ushort dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore256_u<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore256_i<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore256_f<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
// void vstore<short>(Vector256<short> src, ref short dst, int offset)
// AggressiveInlining
void vstore<short>(Vector256<short> src, ref short dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore256_u<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore256_i<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore256_f<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
// void vstore<uint>(Vector256<uint> src, ref uint dst, int offset)
// AggressiveInlining
void vstore<uint>(Vector256<uint> src, ref uint dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore256_u<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore256_i<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore256_f<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
// void vstore<int>(Vector256<int> src, ref int dst, int offset)
// AggressiveInlining
void vstore<int>(Vector256<int> src, ref int dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore256_u<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore256_i<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore256_f<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
// void vstore<ulong>(Vector256<ulong> src, ref ulong dst, int offset)
// AggressiveInlining
void vstore<ulong>(Vector256<ulong> src, ref ulong dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore256_u<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore256_i<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore256_f<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
// void vstore<long>(Vector256<long> src, ref long dst, int offset)
// AggressiveInlining
void vstore<long>(Vector256<long> src, ref long dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore256_u<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore256_i<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore256_f<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
// void vstore<float>(Vector256<float> src, ref float dst, int offset)
// AggressiveInlining
void vstore<float>(Vector256<float> src, ref float dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore256_u<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore256_i<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore256_f<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
// void vstore<double>(Vector256<double> src, ref double dst, int offset)
// AggressiveInlining
void vstore<double>(Vector256<double> src, ref double dst, int offset)
{
    IL_0000: ldtoken T
    IL_0005: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_000A: ldtoken System.Byte
    IL_000F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0014: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0019: brtrue.s IL_006C
    IL_001B: ldtoken T
    IL_0020: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0025: ldtoken System.UInt16
    IL_002A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_002F: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_0034: brtrue.s IL_006C
    IL_0036: ldtoken T
    IL_003B: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0040: ldtoken System.UInt32
    IL_0045: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_004A: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_004F: brtrue.s IL_006C
    IL_0051: ldtoken T
    IL_0056: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_005B: ldtoken System.UInt64
    IL_0060: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0065: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_006A: brfalse.s IL_0075
    IL_006C: ldarg.0
    IL_006D: ldarg.1
    IL_006E: ldarg.2
    IL_006F: call System.Void Z0.ginx::vstore256_u<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_0074: ret
    IL_0075: ldtoken T
    IL_007A: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_007F: ldtoken System.SByte
    IL_0084: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_0089: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_008E: brtrue.s IL_00E1
    IL_0090: ldtoken T
    IL_0095: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_009A: ldtoken System.Int16
    IL_009F: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00A4: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00A9: brtrue.s IL_00E1
    IL_00AB: ldtoken T
    IL_00B0: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00B5: ldtoken System.Int32
    IL_00BA: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00BF: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00C4: brtrue.s IL_00E1
    IL_00C6: ldtoken T
    IL_00CB: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00D0: ldtoken System.Int64
    IL_00D5: call System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
    IL_00DA: call System.Boolean System.Type::op_Equality(System.Type,System.Type)
    IL_00DF: brfalse.s IL_00EA
    IL_00E1: ldarg.0
    IL_00E2: ldarg.1
    IL_00E3: ldarg.2
    IL_00E4: call System.Void Z0.ginx::vstore256_i<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00E9: ret
    IL_00EA: ldarg.0
    IL_00EB: ldarg.1
    IL_00EC: ldarg.2
    IL_00ED: call System.Void Z0.ginx::vstore256_f<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_00F2: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
// void vstore<byte>(Vector512<byte> src, ref byte dst, int offset)
// AggressiveInlining
void vstore<byte>(Vector512<byte> src, ref byte dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Lo
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ldarg.0
    IL_000E: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Hi
    IL_0013: ldarg.1
    IL_0014: ldarg.2
    IL_0015: call Z0.N256 zfunc::get_n256()
    IL_001A: ldloca.s V_0
    IL_001C: initobj T
    IL_0022: ldloc.0
    IL_0023: call System.Int32 Z0.CpuVector::vcount<T>(Z0.N256,T)
    IL_0028: add
    IL_0029: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_002E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
// void vstore<sbyte>(Vector512<sbyte> src, ref sbyte dst, int offset)
// AggressiveInlining
void vstore<sbyte>(Vector512<sbyte> src, ref sbyte dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Lo
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ldarg.0
    IL_000E: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Hi
    IL_0013: ldarg.1
    IL_0014: ldarg.2
    IL_0015: call Z0.N256 zfunc::get_n256()
    IL_001A: ldloca.s V_0
    IL_001C: initobj T
    IL_0022: ldloc.0
    IL_0023: call System.Int32 Z0.CpuVector::vcount<T>(Z0.N256,T)
    IL_0028: add
    IL_0029: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_002E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
// void vstore<ushort>(Vector512<ushort> src, ref ushort dst, int offset)
// AggressiveInlining
void vstore<ushort>(Vector512<ushort> src, ref ushort dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Lo
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ldarg.0
    IL_000E: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Hi
    IL_0013: ldarg.1
    IL_0014: ldarg.2
    IL_0015: call Z0.N256 zfunc::get_n256()
    IL_001A: ldloca.s V_0
    IL_001C: initobj T
    IL_0022: ldloc.0
    IL_0023: call System.Int32 Z0.CpuVector::vcount<T>(Z0.N256,T)
    IL_0028: add
    IL_0029: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_002E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
// void vstore<short>(Vector512<short> src, ref short dst, int offset)
// AggressiveInlining
void vstore<short>(Vector512<short> src, ref short dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Lo
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ldarg.0
    IL_000E: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Hi
    IL_0013: ldarg.1
    IL_0014: ldarg.2
    IL_0015: call Z0.N256 zfunc::get_n256()
    IL_001A: ldloca.s V_0
    IL_001C: initobj T
    IL_0022: ldloc.0
    IL_0023: call System.Int32 Z0.CpuVector::vcount<T>(Z0.N256,T)
    IL_0028: add
    IL_0029: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_002E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
// void vstore<uint>(Vector512<uint> src, ref uint dst, int offset)
// AggressiveInlining
void vstore<uint>(Vector512<uint> src, ref uint dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Lo
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ldarg.0
    IL_000E: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Hi
    IL_0013: ldarg.1
    IL_0014: ldarg.2
    IL_0015: call Z0.N256 zfunc::get_n256()
    IL_001A: ldloca.s V_0
    IL_001C: initobj T
    IL_0022: ldloc.0
    IL_0023: call System.Int32 Z0.CpuVector::vcount<T>(Z0.N256,T)
    IL_0028: add
    IL_0029: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_002E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
// void vstore<int>(Vector512<int> src, ref int dst, int offset)
// AggressiveInlining
void vstore<int>(Vector512<int> src, ref int dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Lo
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ldarg.0
    IL_000E: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Hi
    IL_0013: ldarg.1
    IL_0014: ldarg.2
    IL_0015: call Z0.N256 zfunc::get_n256()
    IL_001A: ldloca.s V_0
    IL_001C: initobj T
    IL_0022: ldloc.0
    IL_0023: call System.Int32 Z0.CpuVector::vcount<T>(Z0.N256,T)
    IL_0028: add
    IL_0029: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_002E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
// void vstore<ulong>(Vector512<ulong> src, ref ulong dst, int offset)
// AggressiveInlining
void vstore<ulong>(Vector512<ulong> src, ref ulong dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Lo
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ldarg.0
    IL_000E: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Hi
    IL_0013: ldarg.1
    IL_0014: ldarg.2
    IL_0015: call Z0.N256 zfunc::get_n256()
    IL_001A: ldloca.s V_0
    IL_001C: initobj T
    IL_0022: ldloc.0
    IL_0023: call System.Int32 Z0.CpuVector::vcount<T>(Z0.N256,T)
    IL_0028: add
    IL_0029: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_002E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
// void vstore<long>(Vector512<long> src, ref long dst, int offset)
// AggressiveInlining
void vstore<long>(Vector512<long> src, ref long dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Lo
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ldarg.0
    IL_000E: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Hi
    IL_0013: ldarg.1
    IL_0014: ldarg.2
    IL_0015: call Z0.N256 zfunc::get_n256()
    IL_001A: ldloca.s V_0
    IL_001C: initobj T
    IL_0022: ldloc.0
    IL_0023: call System.Int32 Z0.CpuVector::vcount<T>(Z0.N256,T)
    IL_0028: add
    IL_0029: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_002E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
// void vstore<float>(Vector512<float> src, ref float dst, int offset)
// AggressiveInlining
void vstore<float>(Vector512<float> src, ref float dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Lo
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ldarg.0
    IL_000E: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Hi
    IL_0013: ldarg.1
    IL_0014: ldarg.2
    IL_0015: call Z0.N256 zfunc::get_n256()
    IL_001A: ldloca.s V_0
    IL_001C: initobj T
    IL_0022: ldloc.0
    IL_0023: call System.Int32 Z0.CpuVector::vcount<T>(Z0.N256,T)
    IL_0028: add
    IL_0029: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_002E: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Void Z0.ginx::vstore<T>(Z0.Vector512`1<T>,T&,System.Int32)
// void vstore<double>(Vector512<double> src, ref double dst, int offset)
// AggressiveInlining
void vstore<double>(Vector512<double> src, ref double dst, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Lo
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_000D: ldarg.0
    IL_000E: ldfld System.Runtime.Intrinsics.Vector256`1<T> Z0.Vector512`1<T>::Hi
    IL_0013: ldarg.1
    IL_0014: ldarg.2
    IL_0015: call Z0.N256 zfunc::get_n256()
    IL_001A: ldloca.s V_0
    IL_001C: initobj T
    IL_0022: ldloc.0
    IL_0023: call System.Int32 Z0.CpuVector::vcount<T>(Z0.N256,T)
    IL_0028: add
    IL_0029: call System.Void Z0.ginx::vstore<T>(System.Runtime.Intrinsics.Vector256`1<T>,T&,System.Int32)
    IL_002E: ret
}
------------------------------------------------------------------------------------------------------------------------
