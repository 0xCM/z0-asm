// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
// Vector512<byte> vload<byte>(N512 w, in byte src)
// AggressiveInlining
Vector512<byte> vload<byte>(N512 w, in byte src)
{
    IL_0000: ldarg.1
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldloca.s V_0
    IL_0008: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000D: ldobj Z0.Vector512`1<T>
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
// Vector512<sbyte> vload<sbyte>(N512 w, in sbyte src)
// AggressiveInlining
Vector512<sbyte> vload<sbyte>(N512 w, in sbyte src)
{
    IL_0000: ldarg.1
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldloca.s V_0
    IL_0008: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000D: ldobj Z0.Vector512`1<T>
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
// Vector512<ushort> vload<ushort>(N512 w, in ushort src)
// AggressiveInlining
Vector512<ushort> vload<ushort>(N512 w, in ushort src)
{
    IL_0000: ldarg.1
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldloca.s V_0
    IL_0008: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000D: ldobj Z0.Vector512`1<T>
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
// Vector512<short> vload<short>(N512 w, in short src)
// AggressiveInlining
Vector512<short> vload<short>(N512 w, in short src)
{
    IL_0000: ldarg.1
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldloca.s V_0
    IL_0008: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000D: ldobj Z0.Vector512`1<T>
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
// Vector512<uint> vload<uint>(N512 w, in uint src)
// AggressiveInlining
Vector512<uint> vload<uint>(N512 w, in uint src)
{
    IL_0000: ldarg.1
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldloca.s V_0
    IL_0008: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000D: ldobj Z0.Vector512`1<T>
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
// Vector512<int> vload<int>(N512 w, in int src)
// AggressiveInlining
Vector512<int> vload<int>(N512 w, in int src)
{
    IL_0000: ldarg.1
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldloca.s V_0
    IL_0008: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000D: ldobj Z0.Vector512`1<T>
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
// Vector512<ulong> vload<ulong>(N512 w, in ulong src)
// AggressiveInlining
Vector512<ulong> vload<ulong>(N512 w, in ulong src)
{
    IL_0000: ldarg.1
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldloca.s V_0
    IL_0008: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000D: ldobj Z0.Vector512`1<T>
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
// Vector512<long> vload<long>(N512 w, in long src)
// AggressiveInlining
Vector512<long> vload<long>(N512 w, in long src)
{
    IL_0000: ldarg.1
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldloca.s V_0
    IL_0008: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000D: ldobj Z0.Vector512`1<T>
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
// Vector512<float> vload<float>(N512 w, in float src)
// AggressiveInlining
Vector512<float> vload<float>(N512 w, in float src)
{
    IL_0000: ldarg.1
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldloca.s V_0
    IL_0008: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000D: ldobj Z0.Vector512`1<T>
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
// Vector512<double> vload<double>(N512 w, in double src)
// AggressiveInlining
Vector512<double> vload<double>(N512 w, in double src)
{
    IL_0000: ldarg.1
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldloca.s V_0
    IL_0008: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000D: ldobj Z0.Vector512`1<T>
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&,System.Int32)
// Vector512<byte> vload<byte>(N512 w, in byte src, int offset)
// AggressiveInlining
Vector512<byte> vload<byte>(N512 w, in byte src, int offset)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T* zfunc::constptr<T>(T&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&,System.Int32)
// Vector512<sbyte> vload<sbyte>(N512 w, in sbyte src, int offset)
// AggressiveInlining
Vector512<sbyte> vload<sbyte>(N512 w, in sbyte src, int offset)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T* zfunc::constptr<T>(T&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&,System.Int32)
// Vector512<ushort> vload<ushort>(N512 w, in ushort src, int offset)
// AggressiveInlining
Vector512<ushort> vload<ushort>(N512 w, in ushort src, int offset)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T* zfunc::constptr<T>(T&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&,System.Int32)
// Vector512<short> vload<short>(N512 w, in short src, int offset)
// AggressiveInlining
Vector512<short> vload<short>(N512 w, in short src, int offset)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T* zfunc::constptr<T>(T&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&,System.Int32)
// Vector512<uint> vload<uint>(N512 w, in uint src, int offset)
// AggressiveInlining
Vector512<uint> vload<uint>(N512 w, in uint src, int offset)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T* zfunc::constptr<T>(T&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&,System.Int32)
// Vector512<int> vload<int>(N512 w, in int src, int offset)
// AggressiveInlining
Vector512<int> vload<int>(N512 w, in int src, int offset)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T* zfunc::constptr<T>(T&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&,System.Int32)
// Vector512<ulong> vload<ulong>(N512 w, in ulong src, int offset)
// AggressiveInlining
Vector512<ulong> vload<ulong>(N512 w, in ulong src, int offset)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T* zfunc::constptr<T>(T&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&,System.Int32)
// Vector512<long> vload<long>(N512 w, in long src, int offset)
// AggressiveInlining
Vector512<long> vload<long>(N512 w, in long src, int offset)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T* zfunc::constptr<T>(T&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&,System.Int32)
// Vector512<float> vload<float>(N512 w, in float src, int offset)
// AggressiveInlining
Vector512<float> vload<float>(N512 w, in float src, int offset)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T* zfunc::constptr<T>(T&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&,System.Int32)
// Vector512<double> vload<double>(N512 w, in double src, int offset)
// AggressiveInlining
Vector512<double> vload<double>(N512 w, in double src, int offset)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T* zfunc::constptr<T>(T&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
// ref Vector512<byte> vload<byte>(in byte src, out Vector512<byte> dst)
// AggressiveInlining
ref Vector512<byte> vload<byte>(in byte src, out Vector512<byte> dst)
{
    IL_0000: ldarg.0
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldarg.1
    IL_0007: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
// ref Vector512<sbyte> vload<sbyte>(in sbyte src, out Vector512<sbyte> dst)
// AggressiveInlining
ref Vector512<sbyte> vload<sbyte>(in sbyte src, out Vector512<sbyte> dst)
{
    IL_0000: ldarg.0
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldarg.1
    IL_0007: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
// ref Vector512<ushort> vload<ushort>(in ushort src, out Vector512<ushort> dst)
// AggressiveInlining
ref Vector512<ushort> vload<ushort>(in ushort src, out Vector512<ushort> dst)
{
    IL_0000: ldarg.0
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldarg.1
    IL_0007: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
// ref Vector512<short> vload<short>(in short src, out Vector512<short> dst)
// AggressiveInlining
ref Vector512<short> vload<short>(in short src, out Vector512<short> dst)
{
    IL_0000: ldarg.0
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldarg.1
    IL_0007: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
// ref Vector512<uint> vload<uint>(in uint src, out Vector512<uint> dst)
// AggressiveInlining
ref Vector512<uint> vload<uint>(in uint src, out Vector512<uint> dst)
{
    IL_0000: ldarg.0
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldarg.1
    IL_0007: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
// ref Vector512<int> vload<int>(in int src, out Vector512<int> dst)
// AggressiveInlining
ref Vector512<int> vload<int>(in int src, out Vector512<int> dst)
{
    IL_0000: ldarg.0
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldarg.1
    IL_0007: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
// ref Vector512<ulong> vload<ulong>(in ulong src, out Vector512<ulong> dst)
// AggressiveInlining
ref Vector512<ulong> vload<ulong>(in ulong src, out Vector512<ulong> dst)
{
    IL_0000: ldarg.0
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldarg.1
    IL_0007: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
// ref Vector512<long> vload<long>(in long src, out Vector512<long> dst)
// AggressiveInlining
ref Vector512<long> vload<long>(in long src, out Vector512<long> dst)
{
    IL_0000: ldarg.0
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldarg.1
    IL_0007: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
// ref Vector512<float> vload<float>(in float src, out Vector512<float> dst)
// AggressiveInlining
ref Vector512<float> vload<float>(in float src, out Vector512<float> dst)
{
    IL_0000: ldarg.0
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldarg.1
    IL_0007: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
// ref Vector512<double> vload<double>(in double src, out Vector512<double> dst)
// AggressiveInlining
ref Vector512<double> vload<double>(in double src, out Vector512<double> dst)
{
    IL_0000: ldarg.0
    IL_0001: call T* zfunc::constptr<T>(T&)
    IL_0006: ldarg.1
    IL_0007: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
// Vector512<byte> vload<byte>(N512 w, Span<byte> src)
// AggressiveInlining
Vector512<byte> vload<byte>(N512 w, Span<byte> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
// Vector512<sbyte> vload<sbyte>(N512 w, Span<sbyte> src)
// AggressiveInlining
Vector512<sbyte> vload<sbyte>(N512 w, Span<sbyte> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
// Vector512<ushort> vload<ushort>(N512 w, Span<ushort> src)
// AggressiveInlining
Vector512<ushort> vload<ushort>(N512 w, Span<ushort> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
// Vector512<short> vload<short>(N512 w, Span<short> src)
// AggressiveInlining
Vector512<short> vload<short>(N512 w, Span<short> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
// Vector512<uint> vload<uint>(N512 w, Span<uint> src)
// AggressiveInlining
Vector512<uint> vload<uint>(N512 w, Span<uint> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
// Vector512<int> vload<int>(N512 w, Span<int> src)
// AggressiveInlining
Vector512<int> vload<int>(N512 w, Span<int> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
// Vector512<ulong> vload<ulong>(N512 w, Span<ulong> src)
// AggressiveInlining
Vector512<ulong> vload<ulong>(N512 w, Span<ulong> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
// Vector512<long> vload<long>(N512 w, Span<long> src)
// AggressiveInlining
Vector512<long> vload<long>(N512 w, Span<long> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
// Vector512<float> vload<float>(N512 w, Span<float> src)
// AggressiveInlining
Vector512<float> vload<float>(N512 w, Span<float> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
// Vector512<double> vload<double>(N512 w, Span<double> src)
// AggressiveInlining
Vector512<double> vload<double>(N512 w, Span<double> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& zfunc::head<T>(System.Span`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>,System.Int32)
// Vector512<byte> vload<byte>(N512 w, Span<byte> src, int offset)
// AggressiveInlining
Vector512<byte> vload<byte>(N512 w, Span<byte> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& zfunc::seek<T>(System.Span`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>,System.Int32)
// Vector512<sbyte> vload<sbyte>(N512 w, Span<sbyte> src, int offset)
// AggressiveInlining
Vector512<sbyte> vload<sbyte>(N512 w, Span<sbyte> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& zfunc::seek<T>(System.Span`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>,System.Int32)
// Vector512<ushort> vload<ushort>(N512 w, Span<ushort> src, int offset)
// AggressiveInlining
Vector512<ushort> vload<ushort>(N512 w, Span<ushort> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& zfunc::seek<T>(System.Span`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>,System.Int32)
// Vector512<short> vload<short>(N512 w, Span<short> src, int offset)
// AggressiveInlining
Vector512<short> vload<short>(N512 w, Span<short> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& zfunc::seek<T>(System.Span`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>,System.Int32)
// Vector512<uint> vload<uint>(N512 w, Span<uint> src, int offset)
// AggressiveInlining
Vector512<uint> vload<uint>(N512 w, Span<uint> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& zfunc::seek<T>(System.Span`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>,System.Int32)
// Vector512<int> vload<int>(N512 w, Span<int> src, int offset)
// AggressiveInlining
Vector512<int> vload<int>(N512 w, Span<int> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& zfunc::seek<T>(System.Span`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>,System.Int32)
// Vector512<ulong> vload<ulong>(N512 w, Span<ulong> src, int offset)
// AggressiveInlining
Vector512<ulong> vload<ulong>(N512 w, Span<ulong> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& zfunc::seek<T>(System.Span`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>,System.Int32)
// Vector512<long> vload<long>(N512 w, Span<long> src, int offset)
// AggressiveInlining
Vector512<long> vload<long>(N512 w, Span<long> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& zfunc::seek<T>(System.Span`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>,System.Int32)
// Vector512<float> vload<float>(N512 w, Span<float> src, int offset)
// AggressiveInlining
Vector512<float> vload<float>(N512 w, Span<float> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& zfunc::seek<T>(System.Span`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>,System.Int32)
// Vector512<double> vload<double>(N512 w, Span<double> src, int offset)
// AggressiveInlining
Vector512<double> vload<double>(N512 w, Span<double> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& zfunc::seek<T>(System.Span`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>)
// Vector512<byte> vload<byte>(N512 w, ReadOnlySpan<byte> src)
// AggressiveInlining
Vector512<byte> vload<byte>(N512 w, ReadOnlySpan<byte> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::head<T>(System.ReadOnlySpan`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>)
// Vector512<sbyte> vload<sbyte>(N512 w, ReadOnlySpan<sbyte> src)
// AggressiveInlining
Vector512<sbyte> vload<sbyte>(N512 w, ReadOnlySpan<sbyte> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::head<T>(System.ReadOnlySpan`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>)
// Vector512<ushort> vload<ushort>(N512 w, ReadOnlySpan<ushort> src)
// AggressiveInlining
Vector512<ushort> vload<ushort>(N512 w, ReadOnlySpan<ushort> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::head<T>(System.ReadOnlySpan`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>)
// Vector512<short> vload<short>(N512 w, ReadOnlySpan<short> src)
// AggressiveInlining
Vector512<short> vload<short>(N512 w, ReadOnlySpan<short> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::head<T>(System.ReadOnlySpan`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>)
// Vector512<uint> vload<uint>(N512 w, ReadOnlySpan<uint> src)
// AggressiveInlining
Vector512<uint> vload<uint>(N512 w, ReadOnlySpan<uint> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::head<T>(System.ReadOnlySpan`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>)
// Vector512<int> vload<int>(N512 w, ReadOnlySpan<int> src)
// AggressiveInlining
Vector512<int> vload<int>(N512 w, ReadOnlySpan<int> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::head<T>(System.ReadOnlySpan`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>)
// Vector512<ulong> vload<ulong>(N512 w, ReadOnlySpan<ulong> src)
// AggressiveInlining
Vector512<ulong> vload<ulong>(N512 w, ReadOnlySpan<ulong> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::head<T>(System.ReadOnlySpan`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>)
// Vector512<long> vload<long>(N512 w, ReadOnlySpan<long> src)
// AggressiveInlining
Vector512<long> vload<long>(N512 w, ReadOnlySpan<long> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::head<T>(System.ReadOnlySpan`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>)
// Vector512<float> vload<float>(N512 w, ReadOnlySpan<float> src)
// AggressiveInlining
Vector512<float> vload<float>(N512 w, ReadOnlySpan<float> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::head<T>(System.ReadOnlySpan`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>)
// Vector512<double> vload<double>(N512 w, ReadOnlySpan<double> src)
// AggressiveInlining
Vector512<double> vload<double>(N512 w, ReadOnlySpan<double> src)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::head<T>(System.ReadOnlySpan`1<T>)
    IL_0007: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>,System.Int32)
// Vector512<byte> vload<byte>(N512 w, ReadOnlySpan<byte> src, int offset)
// AggressiveInlining
Vector512<byte> vload<byte>(N512 w, ReadOnlySpan<byte> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::skip<T>(System.ReadOnlySpan`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>,System.Int32)
// Vector512<sbyte> vload<sbyte>(N512 w, ReadOnlySpan<sbyte> src, int offset)
// AggressiveInlining
Vector512<sbyte> vload<sbyte>(N512 w, ReadOnlySpan<sbyte> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::skip<T>(System.ReadOnlySpan`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>,System.Int32)
// Vector512<ushort> vload<ushort>(N512 w, ReadOnlySpan<ushort> src, int offset)
// AggressiveInlining
Vector512<ushort> vload<ushort>(N512 w, ReadOnlySpan<ushort> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::skip<T>(System.ReadOnlySpan`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>,System.Int32)
// Vector512<short> vload<short>(N512 w, ReadOnlySpan<short> src, int offset)
// AggressiveInlining
Vector512<short> vload<short>(N512 w, ReadOnlySpan<short> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::skip<T>(System.ReadOnlySpan`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>,System.Int32)
// Vector512<uint> vload<uint>(N512 w, ReadOnlySpan<uint> src, int offset)
// AggressiveInlining
Vector512<uint> vload<uint>(N512 w, ReadOnlySpan<uint> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::skip<T>(System.ReadOnlySpan`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>,System.Int32)
// Vector512<int> vload<int>(N512 w, ReadOnlySpan<int> src, int offset)
// AggressiveInlining
Vector512<int> vload<int>(N512 w, ReadOnlySpan<int> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::skip<T>(System.ReadOnlySpan`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>,System.Int32)
// Vector512<ulong> vload<ulong>(N512 w, ReadOnlySpan<ulong> src, int offset)
// AggressiveInlining
Vector512<ulong> vload<ulong>(N512 w, ReadOnlySpan<ulong> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::skip<T>(System.ReadOnlySpan`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>,System.Int32)
// Vector512<long> vload<long>(N512 w, ReadOnlySpan<long> src, int offset)
// AggressiveInlining
Vector512<long> vload<long>(N512 w, ReadOnlySpan<long> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::skip<T>(System.ReadOnlySpan`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>,System.Int32)
// Vector512<float> vload<float>(N512 w, ReadOnlySpan<float> src, int offset)
// AggressiveInlining
Vector512<float> vload<float>(N512 w, ReadOnlySpan<float> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::skip<T>(System.ReadOnlySpan`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.ReadOnlySpan`1<T>,System.Int32)
// Vector512<double> vload<double>(N512 w, ReadOnlySpan<double> src, int offset)
// AggressiveInlining
Vector512<double> vload<double>(N512 w, ReadOnlySpan<double> src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call T& modreq(System.Runtime.InteropServices.InAttribute) zfunc::skip<T>(System.ReadOnlySpan`1<T>,System.Int32)
    IL_0008: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T&)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&)
// Vector512<byte> vload<byte>(in Block512<byte> src)
// AggressiveInlining
Vector512<byte> vload<byte>(in Block512<byte> src)
{
    IL_0000: call Z0.N512 zfunc::get_n512()
    IL_0005: ldarg.0
    IL_0006: call System.Span`1<T> Z0.Block512`1<T>::get_Data()
    IL_000B: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
    IL_0010: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&)
// Vector512<sbyte> vload<sbyte>(in Block512<sbyte> src)
// AggressiveInlining
Vector512<sbyte> vload<sbyte>(in Block512<sbyte> src)
{
    IL_0000: call Z0.N512 zfunc::get_n512()
    IL_0005: ldarg.0
    IL_0006: call System.Span`1<T> Z0.Block512`1<T>::get_Data()
    IL_000B: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
    IL_0010: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&)
// Vector512<ushort> vload<ushort>(in Block512<ushort> src)
// AggressiveInlining
Vector512<ushort> vload<ushort>(in Block512<ushort> src)
{
    IL_0000: call Z0.N512 zfunc::get_n512()
    IL_0005: ldarg.0
    IL_0006: call System.Span`1<T> Z0.Block512`1<T>::get_Data()
    IL_000B: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
    IL_0010: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&)
// Vector512<short> vload<short>(in Block512<short> src)
// AggressiveInlining
Vector512<short> vload<short>(in Block512<short> src)
{
    IL_0000: call Z0.N512 zfunc::get_n512()
    IL_0005: ldarg.0
    IL_0006: call System.Span`1<T> Z0.Block512`1<T>::get_Data()
    IL_000B: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
    IL_0010: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&)
// Vector512<uint> vload<uint>(in Block512<uint> src)
// AggressiveInlining
Vector512<uint> vload<uint>(in Block512<uint> src)
{
    IL_0000: call Z0.N512 zfunc::get_n512()
    IL_0005: ldarg.0
    IL_0006: call System.Span`1<T> Z0.Block512`1<T>::get_Data()
    IL_000B: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
    IL_0010: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&)
// Vector512<int> vload<int>(in Block512<int> src)
// AggressiveInlining
Vector512<int> vload<int>(in Block512<int> src)
{
    IL_0000: call Z0.N512 zfunc::get_n512()
    IL_0005: ldarg.0
    IL_0006: call System.Span`1<T> Z0.Block512`1<T>::get_Data()
    IL_000B: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
    IL_0010: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&)
// Vector512<ulong> vload<ulong>(in Block512<ulong> src)
// AggressiveInlining
Vector512<ulong> vload<ulong>(in Block512<ulong> src)
{
    IL_0000: call Z0.N512 zfunc::get_n512()
    IL_0005: ldarg.0
    IL_0006: call System.Span`1<T> Z0.Block512`1<T>::get_Data()
    IL_000B: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
    IL_0010: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&)
// Vector512<long> vload<long>(in Block512<long> src)
// AggressiveInlining
Vector512<long> vload<long>(in Block512<long> src)
{
    IL_0000: call Z0.N512 zfunc::get_n512()
    IL_0005: ldarg.0
    IL_0006: call System.Span`1<T> Z0.Block512`1<T>::get_Data()
    IL_000B: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
    IL_0010: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&)
// Vector512<float> vload<float>(in Block512<float> src)
// AggressiveInlining
Vector512<float> vload<float>(in Block512<float> src)
{
    IL_0000: call Z0.N512 zfunc::get_n512()
    IL_0005: ldarg.0
    IL_0006: call System.Span`1<T> Z0.Block512`1<T>::get_Data()
    IL_000B: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
    IL_0010: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&)
// Vector512<double> vload<double>(in Block512<double> src)
// AggressiveInlining
Vector512<double> vload<double>(in Block512<double> src)
{
    IL_0000: call Z0.N512 zfunc::get_n512()
    IL_0005: ldarg.0
    IL_0006: call System.Span`1<T> Z0.Block512`1<T>::get_Data()
    IL_000B: call Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,System.Span`1<T>)
    IL_0010: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&,System.Int32)
// Vector512<byte> vload<byte>(in Block512<byte> src, int block)
// AggressiveInlining
Vector512<byte> vload<byte>(in Block512<byte> src, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&,System.Int32)
// Vector512<sbyte> vload<sbyte>(in Block512<sbyte> src, int block)
// AggressiveInlining
Vector512<sbyte> vload<sbyte>(in Block512<sbyte> src, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&,System.Int32)
// Vector512<ushort> vload<ushort>(in Block512<ushort> src, int block)
// AggressiveInlining
Vector512<ushort> vload<ushort>(in Block512<ushort> src, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&,System.Int32)
// Vector512<short> vload<short>(in Block512<short> src, int block)
// AggressiveInlining
Vector512<short> vload<short>(in Block512<short> src, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&,System.Int32)
// Vector512<uint> vload<uint>(in Block512<uint> src, int block)
// AggressiveInlining
Vector512<uint> vload<uint>(in Block512<uint> src, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&,System.Int32)
// Vector512<int> vload<int>(in Block512<int> src, int block)
// AggressiveInlining
Vector512<int> vload<int>(in Block512<int> src, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&,System.Int32)
// Vector512<ulong> vload<ulong>(in Block512<ulong> src, int block)
// AggressiveInlining
Vector512<ulong> vload<ulong>(in Block512<ulong> src, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&,System.Int32)
// Vector512<long> vload<long>(in Block512<long> src, int block)
// AggressiveInlining
Vector512<long> vload<long>(in Block512<long> src, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&,System.Int32)
// Vector512<float> vload<float>(in Block512<float> src, int block)
// AggressiveInlining
Vector512<float> vload<float>(in Block512<float> src, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.Block512`1<T>&,System.Int32)
// Vector512<double> vload<double>(in Block512<double> src, int block)
// AggressiveInlining
Vector512<double> vload<double>(in Block512<double> src, int block)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T& Z0.BlockExtend::BlockRef<T>(Z0.Block512`1<T>&,System.Int32)
    IL_0007: ldloca.s V_0
    IL_0009: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T&,Z0.Vector512`1<T>&)
    IL_000E: ldobj Z0.Vector512`1<T>
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T*)
// Vector512<byte> vload<byte>(N512 w, byte* pSrc)
// AggressiveInlining
Vector512<byte> vload<byte>(N512 w, byte* pSrc)
{
    IL_0000: ldarg.1
    IL_0001: ldloca.s V_0
    IL_0003: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_0008: ldobj Z0.Vector512`1<T>
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T*)
// Vector512<sbyte> vload<sbyte>(N512 w, sbyte* pSrc)
// AggressiveInlining
Vector512<sbyte> vload<sbyte>(N512 w, sbyte* pSrc)
{
    IL_0000: ldarg.1
    IL_0001: ldloca.s V_0
    IL_0003: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_0008: ldobj Z0.Vector512`1<T>
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T*)
// Vector512<ushort> vload<ushort>(N512 w, ushort* pSrc)
// AggressiveInlining
Vector512<ushort> vload<ushort>(N512 w, ushort* pSrc)
{
    IL_0000: ldarg.1
    IL_0001: ldloca.s V_0
    IL_0003: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_0008: ldobj Z0.Vector512`1<T>
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T*)
// Vector512<short> vload<short>(N512 w, short* pSrc)
// AggressiveInlining
Vector512<short> vload<short>(N512 w, short* pSrc)
{
    IL_0000: ldarg.1
    IL_0001: ldloca.s V_0
    IL_0003: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_0008: ldobj Z0.Vector512`1<T>
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T*)
// Vector512<uint> vload<uint>(N512 w, uint* pSrc)
// AggressiveInlining
Vector512<uint> vload<uint>(N512 w, uint* pSrc)
{
    IL_0000: ldarg.1
    IL_0001: ldloca.s V_0
    IL_0003: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_0008: ldobj Z0.Vector512`1<T>
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T*)
// Vector512<int> vload<int>(N512 w, int* pSrc)
// AggressiveInlining
Vector512<int> vload<int>(N512 w, int* pSrc)
{
    IL_0000: ldarg.1
    IL_0001: ldloca.s V_0
    IL_0003: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_0008: ldobj Z0.Vector512`1<T>
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T*)
// Vector512<ulong> vload<ulong>(N512 w, ulong* pSrc)
// AggressiveInlining
Vector512<ulong> vload<ulong>(N512 w, ulong* pSrc)
{
    IL_0000: ldarg.1
    IL_0001: ldloca.s V_0
    IL_0003: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_0008: ldobj Z0.Vector512`1<T>
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T*)
// Vector512<long> vload<long>(N512 w, long* pSrc)
// AggressiveInlining
Vector512<long> vload<long>(N512 w, long* pSrc)
{
    IL_0000: ldarg.1
    IL_0001: ldloca.s V_0
    IL_0003: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_0008: ldobj Z0.Vector512`1<T>
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T*)
// Vector512<float> vload<float>(N512 w, float* pSrc)
// AggressiveInlining
Vector512<float> vload<float>(N512 w, float* pSrc)
{
    IL_0000: ldarg.1
    IL_0001: ldloca.s V_0
    IL_0003: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_0008: ldobj Z0.Vector512`1<T>
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T> Z0.CpuVector::vload<T>(Z0.N512,T*)
// Vector512<double> vload<double>(N512 w, double* pSrc)
// AggressiveInlining
Vector512<double> vload<double>(N512 w, double* pSrc)
{
    IL_0000: ldarg.1
    IL_0001: ldloca.s V_0
    IL_0003: call Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
    IL_0008: ldobj Z0.Vector512`1<T>
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
// ref Vector512<byte> vload<byte>(byte* pSrc, out Vector512<byte> dst)
// AggressiveInlining
ref Vector512<byte> vload<byte>(byte* pSrc, out Vector512<byte> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldloca.s V_0
    IL_0003: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_0008: pop
    IL_0009: ldarg.0
    IL_000A: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_000F: call System.Void* System.Runtime.CompilerServices.Unsafe::Add<T>(System.Void*,System.Int32)
    IL_0014: ldloca.s V_1
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_001B: pop
    IL_001C: ldarg.1
    IL_001D: ldloc.0
    IL_001E: ldloc.1
    IL_001F: newobj System.Void Z0.Vector512`1<T>::.ctor(System.Runtime.Intrinsics.Vector256`1<T>,System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0024: stobj Z0.Vector512`1<T>
    IL_0029: ldarg.1
    IL_002A: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
// ref Vector512<sbyte> vload<sbyte>(sbyte* pSrc, out Vector512<sbyte> dst)
// AggressiveInlining
ref Vector512<sbyte> vload<sbyte>(sbyte* pSrc, out Vector512<sbyte> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldloca.s V_0
    IL_0003: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_0008: pop
    IL_0009: ldarg.0
    IL_000A: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_000F: call System.Void* System.Runtime.CompilerServices.Unsafe::Add<T>(System.Void*,System.Int32)
    IL_0014: ldloca.s V_1
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_001B: pop
    IL_001C: ldarg.1
    IL_001D: ldloc.0
    IL_001E: ldloc.1
    IL_001F: newobj System.Void Z0.Vector512`1<T>::.ctor(System.Runtime.Intrinsics.Vector256`1<T>,System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0024: stobj Z0.Vector512`1<T>
    IL_0029: ldarg.1
    IL_002A: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
// ref Vector512<ushort> vload<ushort>(ushort* pSrc, out Vector512<ushort> dst)
// AggressiveInlining
ref Vector512<ushort> vload<ushort>(ushort* pSrc, out Vector512<ushort> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldloca.s V_0
    IL_0003: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_0008: pop
    IL_0009: ldarg.0
    IL_000A: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_000F: call System.Void* System.Runtime.CompilerServices.Unsafe::Add<T>(System.Void*,System.Int32)
    IL_0014: ldloca.s V_1
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_001B: pop
    IL_001C: ldarg.1
    IL_001D: ldloc.0
    IL_001E: ldloc.1
    IL_001F: newobj System.Void Z0.Vector512`1<T>::.ctor(System.Runtime.Intrinsics.Vector256`1<T>,System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0024: stobj Z0.Vector512`1<T>
    IL_0029: ldarg.1
    IL_002A: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
// ref Vector512<short> vload<short>(short* pSrc, out Vector512<short> dst)
// AggressiveInlining
ref Vector512<short> vload<short>(short* pSrc, out Vector512<short> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldloca.s V_0
    IL_0003: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_0008: pop
    IL_0009: ldarg.0
    IL_000A: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_000F: call System.Void* System.Runtime.CompilerServices.Unsafe::Add<T>(System.Void*,System.Int32)
    IL_0014: ldloca.s V_1
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_001B: pop
    IL_001C: ldarg.1
    IL_001D: ldloc.0
    IL_001E: ldloc.1
    IL_001F: newobj System.Void Z0.Vector512`1<T>::.ctor(System.Runtime.Intrinsics.Vector256`1<T>,System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0024: stobj Z0.Vector512`1<T>
    IL_0029: ldarg.1
    IL_002A: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
// ref Vector512<uint> vload<uint>(uint* pSrc, out Vector512<uint> dst)
// AggressiveInlining
ref Vector512<uint> vload<uint>(uint* pSrc, out Vector512<uint> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldloca.s V_0
    IL_0003: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_0008: pop
    IL_0009: ldarg.0
    IL_000A: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_000F: call System.Void* System.Runtime.CompilerServices.Unsafe::Add<T>(System.Void*,System.Int32)
    IL_0014: ldloca.s V_1
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_001B: pop
    IL_001C: ldarg.1
    IL_001D: ldloc.0
    IL_001E: ldloc.1
    IL_001F: newobj System.Void Z0.Vector512`1<T>::.ctor(System.Runtime.Intrinsics.Vector256`1<T>,System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0024: stobj Z0.Vector512`1<T>
    IL_0029: ldarg.1
    IL_002A: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
// ref Vector512<int> vload<int>(int* pSrc, out Vector512<int> dst)
// AggressiveInlining
ref Vector512<int> vload<int>(int* pSrc, out Vector512<int> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldloca.s V_0
    IL_0003: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_0008: pop
    IL_0009: ldarg.0
    IL_000A: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_000F: call System.Void* System.Runtime.CompilerServices.Unsafe::Add<T>(System.Void*,System.Int32)
    IL_0014: ldloca.s V_1
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_001B: pop
    IL_001C: ldarg.1
    IL_001D: ldloc.0
    IL_001E: ldloc.1
    IL_001F: newobj System.Void Z0.Vector512`1<T>::.ctor(System.Runtime.Intrinsics.Vector256`1<T>,System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0024: stobj Z0.Vector512`1<T>
    IL_0029: ldarg.1
    IL_002A: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
// ref Vector512<ulong> vload<ulong>(ulong* pSrc, out Vector512<ulong> dst)
// AggressiveInlining
ref Vector512<ulong> vload<ulong>(ulong* pSrc, out Vector512<ulong> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldloca.s V_0
    IL_0003: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_0008: pop
    IL_0009: ldarg.0
    IL_000A: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_000F: call System.Void* System.Runtime.CompilerServices.Unsafe::Add<T>(System.Void*,System.Int32)
    IL_0014: ldloca.s V_1
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_001B: pop
    IL_001C: ldarg.1
    IL_001D: ldloc.0
    IL_001E: ldloc.1
    IL_001F: newobj System.Void Z0.Vector512`1<T>::.ctor(System.Runtime.Intrinsics.Vector256`1<T>,System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0024: stobj Z0.Vector512`1<T>
    IL_0029: ldarg.1
    IL_002A: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
// ref Vector512<long> vload<long>(long* pSrc, out Vector512<long> dst)
// AggressiveInlining
ref Vector512<long> vload<long>(long* pSrc, out Vector512<long> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldloca.s V_0
    IL_0003: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_0008: pop
    IL_0009: ldarg.0
    IL_000A: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_000F: call System.Void* System.Runtime.CompilerServices.Unsafe::Add<T>(System.Void*,System.Int32)
    IL_0014: ldloca.s V_1
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_001B: pop
    IL_001C: ldarg.1
    IL_001D: ldloc.0
    IL_001E: ldloc.1
    IL_001F: newobj System.Void Z0.Vector512`1<T>::.ctor(System.Runtime.Intrinsics.Vector256`1<T>,System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0024: stobj Z0.Vector512`1<T>
    IL_0029: ldarg.1
    IL_002A: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
// ref Vector512<float> vload<float>(float* pSrc, out Vector512<float> dst)
// AggressiveInlining
ref Vector512<float> vload<float>(float* pSrc, out Vector512<float> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldloca.s V_0
    IL_0003: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_0008: pop
    IL_0009: ldarg.0
    IL_000A: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_000F: call System.Void* System.Runtime.CompilerServices.Unsafe::Add<T>(System.Void*,System.Int32)
    IL_0014: ldloca.s V_1
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_001B: pop
    IL_001C: ldarg.1
    IL_001D: ldloc.0
    IL_001E: ldloc.1
    IL_001F: newobj System.Void Z0.Vector512`1<T>::.ctor(System.Runtime.Intrinsics.Vector256`1<T>,System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0024: stobj Z0.Vector512`1<T>
    IL_0029: ldarg.1
    IL_002A: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.Vector512`1<T>& Z0.CpuVector::vload<T>(T*,Z0.Vector512`1<T>&)
// ref Vector512<double> vload<double>(double* pSrc, out Vector512<double> dst)
// AggressiveInlining
ref Vector512<double> vload<double>(double* pSrc, out Vector512<double> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldloca.s V_0
    IL_0003: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_0008: pop
    IL_0009: ldarg.0
    IL_000A: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_000F: call System.Void* System.Runtime.CompilerServices.Unsafe::Add<T>(System.Void*,System.Int32)
    IL_0014: ldloca.s V_1
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<T>& Z0.CpuVector::vload<T>(T*,System.Runtime.Intrinsics.Vector256`1<T>&)
    IL_001B: pop
    IL_001C: ldarg.1
    IL_001D: ldloc.0
    IL_001E: ldloc.1
    IL_001F: newobj System.Void Z0.Vector512`1<T>::.ctor(System.Runtime.Intrinsics.Vector256`1<T>,System.Runtime.Intrinsics.Vector256`1<T>)
    IL_0024: stobj Z0.Vector512`1<T>
    IL_0029: ldarg.1
    IL_002A: ret
}
------------------------------------------------------------------------------------------------------------------------
