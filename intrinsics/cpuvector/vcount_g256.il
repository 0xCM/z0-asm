// System.Int32 Z0.CpuVector::vcount<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// int vcount<byte>(Vector256<byte> src)
// AggressiveInlining
int vcount<byte>(Vector256<byte> src)
{
    IL_0000: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_0005: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Int32 Z0.CpuVector::vcount<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// int vcount<sbyte>(Vector256<sbyte> src)
// AggressiveInlining
int vcount<sbyte>(Vector256<sbyte> src)
{
    IL_0000: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_0005: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Int32 Z0.CpuVector::vcount<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// int vcount<ushort>(Vector256<ushort> src)
// AggressiveInlining
int vcount<ushort>(Vector256<ushort> src)
{
    IL_0000: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_0005: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Int32 Z0.CpuVector::vcount<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// int vcount<short>(Vector256<short> src)
// AggressiveInlining
int vcount<short>(Vector256<short> src)
{
    IL_0000: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_0005: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Int32 Z0.CpuVector::vcount<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// int vcount<uint>(Vector256<uint> src)
// AggressiveInlining
int vcount<uint>(Vector256<uint> src)
{
    IL_0000: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_0005: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Int32 Z0.CpuVector::vcount<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// int vcount<int>(Vector256<int> src)
// AggressiveInlining
int vcount<int>(Vector256<int> src)
{
    IL_0000: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_0005: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Int32 Z0.CpuVector::vcount<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// int vcount<ulong>(Vector256<ulong> src)
// AggressiveInlining
int vcount<ulong>(Vector256<ulong> src)
{
    IL_0000: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_0005: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Int32 Z0.CpuVector::vcount<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// int vcount<long>(Vector256<long> src)
// AggressiveInlining
int vcount<long>(Vector256<long> src)
{
    IL_0000: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_0005: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Int32 Z0.CpuVector::vcount<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// int vcount<float>(Vector256<float> src)
// AggressiveInlining
int vcount<float>(Vector256<float> src)
{
    IL_0000: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_0005: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Int32 Z0.CpuVector::vcount<T>(System.Runtime.Intrinsics.Vector256`1<T>)
// int vcount<double>(Vector256<double> src)
// AggressiveInlining
int vcount<double>(Vector256<double> src)
{
    IL_0000: call System.Int32 System.Runtime.Intrinsics.Vector256`1<T>::get_Count()
    IL_0005: ret
}
------------------------------------------------------------------------------------------------------------------------
