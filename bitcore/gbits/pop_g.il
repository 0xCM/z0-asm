// System.UInt32 Z0.gbits::pop<T>(T)
// uint pop<byte>(byte src)
// AggressiveInlining
uint pop<byte>(byte src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.gbits::pop_u<T>(T)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T)
// uint pop<sbyte>(sbyte src)
// AggressiveInlining
uint pop<sbyte>(sbyte src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.gbits::pop_u<T>(T)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T)
// uint pop<ushort>(ushort src)
// AggressiveInlining
uint pop<ushort>(ushort src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.gbits::pop_u<T>(T)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T)
// uint pop<short>(short src)
// AggressiveInlining
uint pop<short>(short src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.gbits::pop_u<T>(T)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T)
// uint pop<uint>(uint src)
// AggressiveInlining
uint pop<uint>(uint src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.gbits::pop_u<T>(T)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T)
// uint pop<int>(int src)
// AggressiveInlining
uint pop<int>(int src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.gbits::pop_u<T>(T)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T)
// uint pop<ulong>(ulong src)
// AggressiveInlining
uint pop<ulong>(ulong src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.gbits::pop_u<T>(T)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T)
// uint pop<long>(long src)
// AggressiveInlining
uint pop<long>(long src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.gbits::pop_u<T>(T)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T)
// uint pop<byte>(byte x0, byte x1, byte x2)
// AggressiveInlining
uint pop<byte>(byte x0, byte x1, byte x2)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T)
// uint pop<sbyte>(sbyte x0, sbyte x1, sbyte x2)
// AggressiveInlining
uint pop<sbyte>(sbyte x0, sbyte x1, sbyte x2)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T)
// uint pop<ushort>(ushort x0, ushort x1, ushort x2)
// AggressiveInlining
uint pop<ushort>(ushort x0, ushort x1, ushort x2)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T)
// uint pop<short>(short x0, short x1, short x2)
// AggressiveInlining
uint pop<short>(short x0, short x1, short x2)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T)
// uint pop<uint>(uint x0, uint x1, uint x2)
// AggressiveInlining
uint pop<uint>(uint x0, uint x1, uint x2)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T)
// uint pop<int>(int x0, int x1, int x2)
// AggressiveInlining
uint pop<int>(int x0, int x1, int x2)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T)
// uint pop<ulong>(ulong x0, ulong x1, ulong x2)
// AggressiveInlining
uint pop<ulong>(ulong x0, ulong x1, ulong x2)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T)
// uint pop<long>(long x0, long x1, long x2)
// AggressiveInlining
uint pop<long>(long x0, long x1, long x2)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T,T)
// uint pop<byte>(byte x0, byte x1, byte x2, byte x3)
// AggressiveInlining
uint pop<byte>(byte x0, byte x1, byte x2, byte x3)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: ldarg.3
    IL_0013: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0018: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64,System.UInt64)
    IL_001D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T,T)
// uint pop<sbyte>(sbyte x0, sbyte x1, sbyte x2, sbyte x3)
// AggressiveInlining
uint pop<sbyte>(sbyte x0, sbyte x1, sbyte x2, sbyte x3)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: ldarg.3
    IL_0013: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0018: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64,System.UInt64)
    IL_001D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T,T)
// uint pop<ushort>(ushort x0, ushort x1, ushort x2, ushort x3)
// AggressiveInlining
uint pop<ushort>(ushort x0, ushort x1, ushort x2, ushort x3)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: ldarg.3
    IL_0013: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0018: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64,System.UInt64)
    IL_001D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T,T)
// uint pop<short>(short x0, short x1, short x2, short x3)
// AggressiveInlining
uint pop<short>(short x0, short x1, short x2, short x3)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: ldarg.3
    IL_0013: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0018: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64,System.UInt64)
    IL_001D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T,T)
// uint pop<uint>(uint x0, uint x1, uint x2, uint x3)
// AggressiveInlining
uint pop<uint>(uint x0, uint x1, uint x2, uint x3)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: ldarg.3
    IL_0013: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0018: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64,System.UInt64)
    IL_001D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T,T)
// uint pop<int>(int x0, int x1, int x2, int x3)
// AggressiveInlining
uint pop<int>(int x0, int x1, int x2, int x3)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: ldarg.3
    IL_0013: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0018: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64,System.UInt64)
    IL_001D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T,T)
// uint pop<ulong>(ulong x0, ulong x1, ulong x2, ulong x3)
// AggressiveInlining
uint pop<ulong>(ulong x0, ulong x1, ulong x2, ulong x3)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: ldarg.3
    IL_0013: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0018: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64,System.UInt64)
    IL_001D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T,T)
// uint pop<long>(long x0, long x1, long x2, long x3)
// AggressiveInlining
uint pop<long>(long x0, long x1, long x2, long x3)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: ldarg.3
    IL_0013: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0018: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64,System.UInt64)
    IL_001D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T,T,T,T,T,T)
// uint pop<byte>(byte x0, byte x1, byte x2, byte x3, byte x4, byte x5, byte x6, byte x7)
// AggressiveInlining
uint pop<byte>(byte x0, byte x1, byte x2, byte x3, byte x4, byte x5, byte x6, byte x7)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: ldarg.3
    IL_0013: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0018: ldarg.s x4
    IL_001A: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_001F: ldarg.s x5
    IL_0021: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0026: ldarg.s x6
    IL_0028: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_002D: ldarg.s x7
    IL_002F: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0034: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)
    IL_0039: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T,T,T,T,T,T)
// uint pop<sbyte>(sbyte x0, sbyte x1, sbyte x2, sbyte x3, sbyte x4, sbyte x5, sbyte x6, sbyte x7)
// AggressiveInlining
uint pop<sbyte>(sbyte x0, sbyte x1, sbyte x2, sbyte x3, sbyte x4, sbyte x5, sbyte x6, sbyte x7)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: ldarg.3
    IL_0013: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0018: ldarg.s x4
    IL_001A: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_001F: ldarg.s x5
    IL_0021: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0026: ldarg.s x6
    IL_0028: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_002D: ldarg.s x7
    IL_002F: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0034: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)
    IL_0039: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T,T,T,T,T,T)
// uint pop<ushort>(ushort x0, ushort x1, ushort x2, ushort x3, ushort x4, ushort x5, ushort x6, ushort x7)
// AggressiveInlining
uint pop<ushort>(ushort x0, ushort x1, ushort x2, ushort x3, ushort x4, ushort x5, ushort x6, ushort x7)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: ldarg.3
    IL_0013: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0018: ldarg.s x4
    IL_001A: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_001F: ldarg.s x5
    IL_0021: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0026: ldarg.s x6
    IL_0028: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_002D: ldarg.s x7
    IL_002F: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0034: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)
    IL_0039: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T,T,T,T,T,T)
// uint pop<short>(short x0, short x1, short x2, short x3, short x4, short x5, short x6, short x7)
// AggressiveInlining
uint pop<short>(short x0, short x1, short x2, short x3, short x4, short x5, short x6, short x7)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: ldarg.3
    IL_0013: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0018: ldarg.s x4
    IL_001A: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_001F: ldarg.s x5
    IL_0021: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0026: ldarg.s x6
    IL_0028: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_002D: ldarg.s x7
    IL_002F: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0034: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)
    IL_0039: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T,T,T,T,T,T)
// uint pop<uint>(uint x0, uint x1, uint x2, uint x3, uint x4, uint x5, uint x6, uint x7)
// AggressiveInlining
uint pop<uint>(uint x0, uint x1, uint x2, uint x3, uint x4, uint x5, uint x6, uint x7)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: ldarg.3
    IL_0013: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0018: ldarg.s x4
    IL_001A: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_001F: ldarg.s x5
    IL_0021: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0026: ldarg.s x6
    IL_0028: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_002D: ldarg.s x7
    IL_002F: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0034: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)
    IL_0039: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T,T,T,T,T,T)
// uint pop<int>(int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7)
// AggressiveInlining
uint pop<int>(int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: ldarg.3
    IL_0013: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0018: ldarg.s x4
    IL_001A: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_001F: ldarg.s x5
    IL_0021: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0026: ldarg.s x6
    IL_0028: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_002D: ldarg.s x7
    IL_002F: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0034: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)
    IL_0039: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T,T,T,T,T,T)
// uint pop<ulong>(ulong x0, ulong x1, ulong x2, ulong x3, ulong x4, ulong x5, ulong x6, ulong x7)
// AggressiveInlining
uint pop<ulong>(ulong x0, ulong x1, ulong x2, ulong x3, ulong x4, ulong x5, ulong x6, ulong x7)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: ldarg.3
    IL_0013: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0018: ldarg.s x4
    IL_001A: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_001F: ldarg.s x5
    IL_0021: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0026: ldarg.s x6
    IL_0028: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_002D: ldarg.s x7
    IL_002F: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0034: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)
    IL_0039: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.gbits::pop<T>(T,T,T,T,T,T,T,T)
// uint pop<long>(long x0, long x1, long x2, long x3, long x4, long x5, long x6, long x7)
// AggressiveInlining
uint pop<long>(long x0, long x1, long x2, long x3, long x4, long x5, long x6, long x7)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_000C: ldarg.2
    IL_000D: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0012: ldarg.3
    IL_0013: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0018: ldarg.s x4
    IL_001A: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_001F: ldarg.s x5
    IL_0021: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0026: ldarg.s x6
    IL_0028: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_002D: ldarg.s x7
    IL_002F: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0034: call System.UInt32 Z0.Bits::pop(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)
    IL_0039: ret
}
------------------------------------------------------------------------------------------------------------------------
