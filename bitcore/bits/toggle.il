// System.SByte Z0.Bits::toggle(System.SByte,System.Int32)
// sbyte toggle(sbyte src, int pos)
// AggressiveInlining
sbyte toggle(sbyte src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.1
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: conv.i1
    IL_0008: xor
    IL_0009: conv.i1
    IL_000A: dup
    IL_000B: starg.s src
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Byte Z0.Bits::toggle(System.Byte,System.Int32)
// byte toggle(byte src, int pos)
// AggressiveInlining
byte toggle(byte src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.1
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: conv.u1
    IL_0008: xor
    IL_0009: conv.u1
    IL_000A: dup
    IL_000B: starg.s src
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Int16 Z0.Bits::toggle(System.Int16,System.Int32)
// short toggle(short src, int pos)
// AggressiveInlining
short toggle(short src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.1
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: conv.i2
    IL_0008: xor
    IL_0009: conv.i2
    IL_000A: dup
    IL_000B: starg.s src
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt16 Z0.Bits::toggle(System.UInt16,System.Int32)
// ushort toggle(ushort src, int pos)
// AggressiveInlining
ushort toggle(ushort src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.1
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: conv.u2
    IL_0008: xor
    IL_0009: conv.u2
    IL_000A: dup
    IL_000B: starg.s src
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Int32 Z0.Bits::toggle(System.Int32,System.Int32)
// int toggle(int src, int pos)
// AggressiveInlining
int toggle(int src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.1
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: xor
    IL_0008: dup
    IL_0009: starg.s src
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt32 Z0.Bits::toggle(System.UInt32,System.Int32)
// uint toggle(uint src, int pos)
// AggressiveInlining
uint toggle(uint src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.1
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: xor
    IL_0008: dup
    IL_0009: starg.s src
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Int64 Z0.Bits::toggle(System.Int64,System.Int32)
// long toggle(long src, int pos)
// AggressiveInlining
long toggle(long src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.1
    IL_0002: conv.i8
    IL_0003: ldarg.1
    IL_0004: ldc.i4.s 63
    IL_0006: and
    IL_0007: shl
    IL_0008: xor
    IL_0009: dup
    IL_000A: starg.s src
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.UInt64 Z0.Bits::toggle(System.UInt64,System.Int32)
// ulong toggle(ulong src, int pos)
// AggressiveInlining
ulong toggle(ulong src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.1
    IL_0002: conv.i8
    IL_0003: ldarg.1
    IL_0004: ldc.i4.s 63
    IL_0006: and
    IL_0007: shl
    IL_0008: xor
    IL_0009: dup
    IL_000A: starg.s src
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Single Z0.Bits::toggle(System.Single,System.Int32)
// float toggle(float src, int pos)
// AggressiveInlining
float toggle(float src, int pos)
{
    IL_0000: ldarga.s src
    IL_0002: call System.Int32& System.Runtime.CompilerServices.Unsafe::As<System.Single,System.Int32>(System.Single&)
    IL_0007: stloc.0
    IL_0008: ldloc.0
    IL_0009: ldloc.0
    IL_000A: ldind.i4
    IL_000B: ldc.i4.1
    IL_000C: ldarg.1
    IL_000D: ldc.i4.s 31
    IL_000F: and
    IL_0010: shl
    IL_0011: xor
    IL_0012: stind.i4
    IL_0013: ldarg.0
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// System.Double Z0.Bits::toggle(System.Double,System.Int32)
// double toggle(double src, int pos)
// AggressiveInlining
double toggle(double src, int pos)
{
    IL_0000: ldarga.s src
    IL_0002: call System.Int64& System.Runtime.CompilerServices.Unsafe::As<System.Double,System.Int64>(System.Double&)
    IL_0007: stloc.0
    IL_0008: ldloc.0
    IL_0009: ldloc.0
    IL_000A: ldind.i8
    IL_000B: ldc.i4.1
    IL_000C: conv.i8
    IL_000D: ldarg.1
    IL_000E: ldc.i4.s 63
    IL_0010: and
    IL_0011: shl
    IL_0012: xor
    IL_0013: stind.i8
    IL_0014: ldarg.0
    IL_0015: ret
}
------------------------------------------------------------------------------------------------------------------------
