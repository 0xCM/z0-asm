Sequence  | Address         | Length  | Uri                                                                                                           | OpSig                                                                                                         | Data
0         | 7ff7c8585f70h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[8u](8u~in)                                                          | Span<byte> GetBytes<byte>(in byte src)                                                                        | 0f 1f 44 00 00 48 89 11 c7 41 08 01 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
1         | 7ff7c8585fa0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[8i](8i~in)                                                          | Span<byte> GetBytes<sbyte>(in sbyte src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 01 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
2         | 7ff7c8585fd0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[16u](16u~in)                                                        | Span<byte> GetBytes<ushort>(in ushort src)                                                                    | 0f 1f 44 00 00 48 89 11 c7 41 08 02 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
3         | 7ff7c8586000h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[16i](16i~in)                                                        | Span<byte> GetBytes<short>(in short src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 02 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
4         | 7ff7c8586030h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32u](32u~in)                                                        | Span<byte> GetBytes<uint>(in uint src)                                                                        | 0f 1f 44 00 00 48 89 11 c7 41 08 04 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
5         | 7ff7c8586060h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32i](32i~in)                                                        | Span<byte> GetBytes<int>(in int src)                                                                          | 0f 1f 44 00 00 48 89 11 c7 41 08 04 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
6         | 7ff7c8586090h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](64u~in)                                                        | Span<byte> GetBytes<ulong>(in ulong src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 08 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
7         | 7ff7c85860c0h   | 1064    | hex://root/bitconvert?GetBytes#GetBytes_g[64i](64i~in)                                                        | Span<byte> GetBytes<long>(in long src)                                                                        | 0f 1f 44 00 00 48 89 11 c7 41 08 08 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 e8 53 f5 cd 5e 5e 00 00 58 51 8a c8 f7 7f 00 00 e8 43 f5 cd 5e 5e 00 00 b8 51 8a c8 f7 7f 00 00 e8 33 f5 cd 5e 5e 00 00 18 52 8a c8 f7 7f 00 00 e8 23 f5 cd 5e 5e 00 00 78 52 8a c8 f7 7f 00 00 e8 13 f5 cd 5e 5e 00 00 d8 52 8a c8 f7 7f 00 00 e8 03 f5 cd 5e 5e 00 00 38 53 8a c8 f7 7f 00 00 e8 f3 f4 cd 5e 5e 00 00 98 53 8a c8 f7 7f 00 00 e8 e3 f4 cd 5e 5e 00 00 f8 53 8a c8 f7 7f 00 00 e8 d3 f4 cd 5e 5e 00 00 58 54 8a c8 f7 7f 00 00 e8 c3 f4 cd 5e 5e 00 01 e8 bb f4 cd 5e 5e 01 00 c0 55 8a c8 f7 7f 00 00 e8 ab f4 cd 5e 5e 00 18 e8 a3 f4 cd 5e 5e 01 17 e8 9b f4 cd 5e 5e 02 16 e8 93 f4 cd 5e 5e 03 15 e8 8b f4 cd 5e 5e 04 14 e8 83 f4 cd 5e 5e 05 13 e8 7b f4 cd 5e 5e 06 12 e8 73 f4 cd 5e 5e 07 11 e8 6b f4 cd 5e 5e 08 10 e8 63 f4 cd 5e 5e 09 0f e8 5b f4 cd 5e 5e 0a 0e e8 53 f4 cd 5e 5e 0b 0d e8 4b f4 cd 5e 5e 0c 0c e8 43 f4 cd 5e 5e 0d 0b e8 3b f4 cd 5e 5e 0e 0a e8 33 f4 cd 5e 5e 0f 09 e8 2b f4 cd 5e 5e 10 08 e8 23 f4 cd 5e 5e 11 07 e8 1b f4 cd 5e 5e 12 06 e8 13 f4 cd 5e 5e 13 05 e8 0b f4 cd 5e 5e 14 04 e8 03 f4 cd 5e 5e 15 03 e8 fb f3 cd 5e 5e 16 02 e8 f3 f3 cd 5e 5e 17 01 e8 eb f3 cd 5e 5e 18 00 c8 54 8a c8 f7 7f 00 00 e8 db f3 cd 5e 5e 00 00 c0 57 8a c8 f7 7f 00 00 e8 cb f3 cd 5e 5e 00 00 20 58 8a c8 f7 7f 00 00 e8 bb f3 cd 5e 5e 00 00 80 58 8a c8 f7 7f 00 00 e8 ab f3 cd 5e 5e 00 00 e0 58 8a c8 f7 7f 00 00 e8 9b f3 cd 5e 5e 00 00 40 59 8a c8 f7 7f 00 00 e8 8b f3 cd 5e 5e 00 00 a0 59 8a c8 f7 7f 00 00 e8 7b f3 cd 5e 5e 00 00 00 5a 8a c8 f7 7f 00 00 e8 6b f3 cd 5e 5e 00 00 60 5a 8a c8 f7 7f 00 00 e8 5b f3 cd 5e 5e 00 00 c0 5a 8a c8 f7 7f 00 00 e8 4b f3 cd 5e 5e 00 00 20 5b 8a c8 f7 7f 00 00 e8 3b f3 cd 5e 5e 00 00 80 5b 8a c8 f7 7f 00 00 e8 2b f3 cd 5e 5e 00 00 e0 5b 8a c8 f7 7f 00 00 e8 1b f3 cd 5e 5e 00 00 40 5c 8a c8 f7 7f 00 00 e8 0b f3 cd 5e 5e 00 00 a0 5c 8a c8 f7 7f 00 00 e8 fb f2 cd 5e 5e 00 00 00 5d 8a c8 f7 7f 00 00 e8 eb f2 cd 5e 5e 00 00 60 5d 8a c8 f7 7f 00 00 e8 db f2 cd 5e 5e 00 00 c0 5d 8a c8 f7 7f 00 00 e8 cb f2 cd 5e 5e 00 00 20 5e 8a c8 f7 7f 00 00 e8 bb f2 cd 5e 5e 00 00 80 5e 8a c8 f7 7f 00 00 e8 ab f2 cd 5e 5e 00 00 e0 5e 8a c8 f7 7f 00 00 e8 9b f2 cd 5e 5e 00 00 40 5f 8a c8 f7 7f 00 00 e8 8b f2 cd 5e 5e 00 00 a0 5f 8a c8 f7 7f 00 00 e8 7b f2 cd 5e 5e 00 00 00 60 8a c8 f7 7f 00 00 e8 6b f2 cd 5e 5e 00 00 60 60 8a c8 f7 7f 00 00 e8 5b f2 cd 5e 5e 00 00 c0 60 8a c8 f7 7f 00 00 e8 4b f2 cd 5e 5e 00 00 20 61 8a c8 f7 7f 00 00 e8 3b f2 cd 5e 5e 00 00 80 61 8a c8 f7 7f 00 00 e8 2b f2 cd 5e 5e 00 00 e0 61 8a c8 f7 7f 00 00 e8 1b f2 cd 5e 5e 00 00 40 62 8a c8 f7 7f 00 00 e8 0b f2 cd 5e 5e 00 00 a0 62 8a c8 f7 7f 00 00 e8 fb f1 cd 5e 5e 00 00 00 63 8a c8 f7 7f 00 00 e8 eb f1 cd 5e 5e 00 00 60 63 8a c8 f7 7f 00 00 e8 db f1 cd 5e 5e 00 00 c0 63 8a c8 f7 7f 00 00 e8 cb f1 cd 5e 5e 00 00 20 64 8a c8 f7 7f 00 00 e8 bb f1 cd 5e 5e 00 00 80 64 8a c8 f7 7f 00 00 e8 ab f1 cd 5e 5e 00 00 e0 64 8a c8 f7 7f 00 00 e8 9b f1 cd 5e 5e 00 00 40 65 8a c8 f7 7f 00 00 e8 8b f1 cd 5e 5e 00 00 a0 65 8a c8 f7 7f 00 00 e8 7b f1 cd 5e 5e 00 00 00 66 8a c8 f7 7f 00 00 e8 6b f1 cd 5e 5e 00 00 60 66 8a c8 f7 7f 00 00 00 00 00 00 00 00 00 00
8         | 7ff7c85864f0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](32f~in)                                                        | Span<byte> GetBytes<float>(in float src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 04 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
9         | 7ff7c8586520h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64f](64f~in)                                                        | Span<byte> GetBytes<double>(in double src)                                                                    | 0f 1f 44 00 00 48 89 11 c7 41 08 08 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
10        | 7ff7c8586550h   | 243     | hex://root/bitconvert?GetBytes#GetBytes_g[8u](uspan8u,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<byte>(ReadOnlySpan<byte> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 dc e4 1d ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 28 29 8b c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 8c e4 1d ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 b0 29 8b c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 f6 95 e0 5e e8 31 e4 1d ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
11        | 7ff7c85865a0h   | 163     | hex://root/bitconvert?GetBytes#GetBytes_g[8i](uspan8i,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<sbyte>(ReadOnlySpan<sbyte> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 8c e4 1d ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 b0 29 8b c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 f6 95 e0 5e e8 31 e4 1d ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
12        | 7ff7c85865f0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[16u](uspan16u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ushort>(ReadOnlySpan<ushort> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 f6 95 e0 5e e8 31 e4 1d ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
13        | 7ff7c8586650h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[16i](uspan16i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<short>(ReadOnlySpan<short> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 96 95 e0 5e e8 d1 e3 1d ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
14        | 7ff7c85866b0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32u](uspan32u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<uint>(ReadOnlySpan<uint> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 36 95 e0 5e e8 71 e3 1d ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
15        | 7ff7c8586710h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32i](uspan32i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<int>(ReadOnlySpan<int> src, int offset, int count)                                | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 d6 94 e0 5e e8 11 e3 1d ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
16        | 7ff7c8586770h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](uspan64u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ulong>(ReadOnlySpan<ulong> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 76 94 e0 5e e8 b1 e2 1d ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
17        | 7ff7c85867d0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](uspan64i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<long>(ReadOnlySpan<long> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 16 94 e0 5e e8 51 e2 1d ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
18        | 7ff7c8586830h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](uspan32f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<float>(ReadOnlySpan<float> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 b6 93 e0 5e e8 f1 e1 1d ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
19        | 7ff7c8586890h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64f](uspan64f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<double>(ReadOnlySpan<double> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 56 93 e0 5e e8 91 e1 1d ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
20        | 7ff7c85868f0h   | 552     | hex://root/bitconvert?GetBytes#GetBytes_g[8u](8u~in,span8u)                                                   | void GetBytes<byte>(in byte src, Span<byte> dst)                                                              | 0f 1f 44 00 00 48 8b 02 0f b6 11 88 10 c3 00 00 19 00 00 00 40 00 00 00 60 30 8b c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f be 11 88 10 c3 00 19 00 00 00 40 00 00 00 e8 30 8b c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 0f b7 11 66 89 10 c3 00 19 00 00 00 40 00 00 00 70 31 8b c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 02 00 00 00 00 00 00 00 e8 cb ec cd 5e 5e 00 00 c0 66 8a c8 f7 7f 00 00 e8 bb ec cd 5e 5e 00 00 20 67 8a c8 f7 7f 00 00 e8 ab ec cd 5e 5e 00 00 80 67 8a c8 f7 7f 00 00 e8 9b ec cd 5e 5e 00 00 e0 67 8a c8 f7 7f 00 00 e8 8b ec cd 5e 5e 00 00 40 68 8a c8 f7 7f 00 00 e8 7b ec cd 5e 5e 00 00 a0 68 8a c8 f7 7f 00 00 e8 6b ec cd 5e 5e 00 00 00 69 8a c8 f7 7f 00 00 e8 5b ec cd 5e 5e 00 00 60 69 8a c8 f7 7f 00 00 e8 4b ec cd 5e 5e 00 00 c0 69 8a c8 f7 7f 00 00 e8 3b ec cd 5e 5e 00 00 20 6a 8a c8 f7 7f 00 00 e8 2b ec cd 5e 5e 00 00 80 6a 8a c8 f7 7f 00 00 e8 1b ec cd 5e 5e 00 00 e0 6a 8a c8 f7 7f 00 00 e8 0b ec cd 5e 5e 00 00 40 6b 8a c8 f7 7f 00 00 e8 fb eb cd 5e 5e 00 00 a0 6b 8a c8 f7 7f 00 00 e8 eb eb cd 5e 5e 00 00 00 6c 8a c8 f7 7f 00 00 e8 db eb cd 5e 5e 00 00 60 6c 8a c8 f7 7f 00 00 e8 cb eb cd 5e 5e 00 00 c0 6c 8a c8 f7 7f 00 00 e8 bb eb cd 5e 5e 00 00 20 6d 8a c8 f7 7f 00 00 e8 ab eb cd 5e 5e 00 00 80 6d 8a c8 f7 7f 00 00 e8 9b eb cd 5e 5e 00 00 e0 6d 8a c8 f7 7f 00 00 e8 8b eb cd 5e 5e 00 00 40 6e 8a c8 f7 7f 00 00 e8 7b eb cd 5e 5e 00 00 a0 6e 8a c8 f7 7f 00 00 e8 6b eb cd 5e 5e 00 00 00 6f 8a c8 f7 7f 00 00 e8 5b eb cd 5e 5e 00 00 60 6f 8a c8 f7 7f 00 00 e8 4b eb cd 5e 5e 00 00 c0 6f 8a c8 f7 7f 00 00 e8 3b eb cd 5e 5e 00 00 20 70 8a c8 f7 7f 00 00 00 00 00 00 00 00 00 00
21        | 7ff7c8586910h   | 520     | hex://root/bitconvert?GetBytes#GetBytes_g[8i](8i~in,span8u)                                                   | void GetBytes<sbyte>(in sbyte src, Span<byte> dst)                                                            | 0f 1f 44 00 00 48 8b 02 48 0f be 11 88 10 c3 00 19 00 00 00 40 00 00 00 e8 30 8b c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 0f b7 11 66 89 10 c3 00 19 00 00 00 40 00 00 00 70 31 8b c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 02 00 00 00 00 00 00 00 e8 cb ec cd 5e 5e 00 00 c0 66 8a c8 f7 7f 00 00 e8 bb ec cd 5e 5e 00 00 20 67 8a c8 f7 7f 00 00 e8 ab ec cd 5e 5e 00 00 80 67 8a c8 f7 7f 00 00 e8 9b ec cd 5e 5e 00 00 e0 67 8a c8 f7 7f 00 00 e8 8b ec cd 5e 5e 00 00 40 68 8a c8 f7 7f 00 00 e8 7b ec cd 5e 5e 00 00 a0 68 8a c8 f7 7f 00 00 e8 6b ec cd 5e 5e 00 00 00 69 8a c8 f7 7f 00 00 e8 5b ec cd 5e 5e 00 00 60 69 8a c8 f7 7f 00 00 e8 4b ec cd 5e 5e 00 00 c0 69 8a c8 f7 7f 00 00 e8 3b ec cd 5e 5e 00 00 20 6a 8a c8 f7 7f 00 00 e8 2b ec cd 5e 5e 00 00 80 6a 8a c8 f7 7f 00 00 e8 1b ec cd 5e 5e 00 00 e0 6a 8a c8 f7 7f 00 00 e8 0b ec cd 5e 5e 00 00 40 6b 8a c8 f7 7f 00 00 e8 fb eb cd 5e 5e 00 00 a0 6b 8a c8 f7 7f 00 00 e8 eb eb cd 5e 5e 00 00 00 6c 8a c8 f7 7f 00 00 e8 db eb cd 5e 5e 00 00 60 6c 8a c8 f7 7f 00 00 e8 cb eb cd 5e 5e 00 00 c0 6c 8a c8 f7 7f 00 00 e8 bb eb cd 5e 5e 00 00 20 6d 8a c8 f7 7f 00 00 e8 ab eb cd 5e 5e 00 00 80 6d 8a c8 f7 7f 00 00 e8 9b eb cd 5e 5e 00 00 e0 6d 8a c8 f7 7f 00 00 e8 8b eb cd 5e 5e 00 00 40 6e 8a c8 f7 7f 00 00 e8 7b eb cd 5e 5e 00 00 a0 6e 8a c8 f7 7f 00 00 e8 6b eb cd 5e 5e 00 00 00 6f 8a c8 f7 7f 00 00 e8 5b eb cd 5e 5e 00 00 60 6f 8a c8 f7 7f 00 00 e8 4b eb cd 5e 5e 00 00 c0 6f 8a c8 f7 7f 00 00 e8 3b eb cd 5e 5e 00 00 20 70 8a c8 f7 7f 00 00 00 00 00 00 00 00 00 00
22        | 7ff7c8586930h   | 488     | hex://root/bitconvert?GetBytes#GetBytes_g[16u](16u~in,span8u)                                                 | void GetBytes<ushort>(in ushort src, Span<byte> dst)                                                          | 0f 1f 44 00 00 48 8b 02 0f b7 11 66 89 10 c3 00 19 00 00 00 40 00 00 00 70 31 8b c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 02 00 00 00 00 00 00 00 e8 cb ec cd 5e 5e 00 00 c0 66 8a c8 f7 7f 00 00 e8 bb ec cd 5e 5e 00 00 20 67 8a c8 f7 7f 00 00 e8 ab ec cd 5e 5e 00 00 80 67 8a c8 f7 7f 00 00 e8 9b ec cd 5e 5e 00 00 e0 67 8a c8 f7 7f 00 00 e8 8b ec cd 5e 5e 00 00 40 68 8a c8 f7 7f 00 00 e8 7b ec cd 5e 5e 00 00 a0 68 8a c8 f7 7f 00 00 e8 6b ec cd 5e 5e 00 00 00 69 8a c8 f7 7f 00 00 e8 5b ec cd 5e 5e 00 00 60 69 8a c8 f7 7f 00 00 e8 4b ec cd 5e 5e 00 00 c0 69 8a c8 f7 7f 00 00 e8 3b ec cd 5e 5e 00 00 20 6a 8a c8 f7 7f 00 00 e8 2b ec cd 5e 5e 00 00 80 6a 8a c8 f7 7f 00 00 e8 1b ec cd 5e 5e 00 00 e0 6a 8a c8 f7 7f 00 00 e8 0b ec cd 5e 5e 00 00 40 6b 8a c8 f7 7f 00 00 e8 fb eb cd 5e 5e 00 00 a0 6b 8a c8 f7 7f 00 00 e8 eb eb cd 5e 5e 00 00 00 6c 8a c8 f7 7f 00 00 e8 db eb cd 5e 5e 00 00 60 6c 8a c8 f7 7f 00 00 e8 cb eb cd 5e 5e 00 00 c0 6c 8a c8 f7 7f 00 00 e8 bb eb cd 5e 5e 00 00 20 6d 8a c8 f7 7f 00 00 e8 ab eb cd 5e 5e 00 00 80 6d 8a c8 f7 7f 00 00 e8 9b eb cd 5e 5e 00 00 e0 6d 8a c8 f7 7f 00 00 e8 8b eb cd 5e 5e 00 00 40 6e 8a c8 f7 7f 00 00 e8 7b eb cd 5e 5e 00 00 a0 6e 8a c8 f7 7f 00 00 e8 6b eb cd 5e 5e 00 00 00 6f 8a c8 f7 7f 00 00 e8 5b eb cd 5e 5e 00 00 60 6f 8a c8 f7 7f 00 00 e8 4b eb cd 5e 5e 00 00 c0 6f 8a c8 f7 7f 00 00 e8 3b eb cd 5e 5e 00 00 20 70 8a c8 f7 7f 00 00 00 00 00 00 00 00 00 00
23        | 7ff7c8586950h   | 456     | hex://root/bitconvert?GetBytes#GetBytes_g[16i](16i~in,span8u)                                                 | void GetBytes<short>(in short src, Span<byte> dst)                                                            | 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 02 00 00 00 00 00 00 00 e8 cb ec cd 5e 5e 00 00 c0 66 8a c8 f7 7f 00 00 e8 bb ec cd 5e 5e 00 00 20 67 8a c8 f7 7f 00 00 e8 ab ec cd 5e 5e 00 00 80 67 8a c8 f7 7f 00 00 e8 9b ec cd 5e 5e 00 00 e0 67 8a c8 f7 7f 00 00 e8 8b ec cd 5e 5e 00 00 40 68 8a c8 f7 7f 00 00 e8 7b ec cd 5e 5e 00 00 a0 68 8a c8 f7 7f 00 00 e8 6b ec cd 5e 5e 00 00 00 69 8a c8 f7 7f 00 00 e8 5b ec cd 5e 5e 00 00 60 69 8a c8 f7 7f 00 00 e8 4b ec cd 5e 5e 00 00 c0 69 8a c8 f7 7f 00 00 e8 3b ec cd 5e 5e 00 00 20 6a 8a c8 f7 7f 00 00 e8 2b ec cd 5e 5e 00 00 80 6a 8a c8 f7 7f 00 00 e8 1b ec cd 5e 5e 00 00 e0 6a 8a c8 f7 7f 00 00 e8 0b ec cd 5e 5e 00 00 40 6b 8a c8 f7 7f 00 00 e8 fb eb cd 5e 5e 00 00 a0 6b 8a c8 f7 7f 00 00 e8 eb eb cd 5e 5e 00 00 00 6c 8a c8 f7 7f 00 00 e8 db eb cd 5e 5e 00 00 60 6c 8a c8 f7 7f 00 00 e8 cb eb cd 5e 5e 00 00 c0 6c 8a c8 f7 7f 00 00 e8 bb eb cd 5e 5e 00 00 20 6d 8a c8 f7 7f 00 00 e8 ab eb cd 5e 5e 00 00 80 6d 8a c8 f7 7f 00 00 e8 9b eb cd 5e 5e 00 00 e0 6d 8a c8 f7 7f 00 00 e8 8b eb cd 5e 5e 00 00 40 6e 8a c8 f7 7f 00 00 e8 7b eb cd 5e 5e 00 00 a0 6e 8a c8 f7 7f 00 00 e8 6b eb cd 5e 5e 00 00 00 6f 8a c8 f7 7f 00 00 e8 5b eb cd 5e 5e 00 00 60 6f 8a c8 f7 7f 00 00 e8 4b eb cd 5e 5e 00 00 c0 6f 8a c8 f7 7f 00 00 e8 3b eb cd 5e 5e 00 00 20 70 8a c8 f7 7f 00 00 00 00 00 00 00 00 00 00
24        | 7ff7c8586d80h   | 163     | hex://root/bitconvert?GetBytes#GetBytes_g[32u](32u~in,span8u)                                                 | void GetBytes<uint>(in uint src, Span<byte> dst)                                                              | 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 80 32 8b c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 08 33 8b c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 90 33 8b c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 18 34 8b c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
25        | 7ff7c8586da0h   | 131     | hex://root/bitconvert?GetBytes#GetBytes_g[32i](32i~in,span8u)                                                 | void GetBytes<int>(in int src, Span<byte> dst)                                                                | 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 08 33 8b c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 90 33 8b c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 18 34 8b c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
26        | 7ff7c8586dc0h   | 99      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](64u~in,span8u)                                                 | void GetBytes<ulong>(in ulong src, Span<byte> dst)                                                            | 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 90 33 8b c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 18 34 8b c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
27        | 7ff7c8586de0h   | 67      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](64i~in,span8u)                                                 | void GetBytes<long>(in long src, Span<byte> dst)                                                              | 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 18 34 8b c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
28        | 7ff7c8586e00h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](32f~in,span8u)                                                 | void GetBytes<float>(in float src, Span<byte> dst)                                                            | c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
29        | 7ff7c8586e30h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64f](64f~in,span8u)                                                 | void GetBytes<double>(in double src, Span<byte> dst)                                                          | c5 f8 77 66 90 48 8b 02 c5 fb 10 01 c5 fb 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
30        | 7ff7c8586e60h   | 231     | hex://root/bitconvert?ToInt16#ToInt16_(uspan8u,32i)                                                           | short ToInt16(ReadOnlySpan<byte> src, int offset)                                                             | 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 16 2b ca 48 63 d2 48 03 c2 83 f9 02 7c 0f 48 0f bf 00 48 83 c4 28 c3 e8 d6 db 1d ff cc b9 28 00 00 00 e8 6b dc 1d ff cc 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 e0 35 8b c8 f7 7f 00 00 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 15 2b ca 48 63 d2 48 03 c2 83 f9 02 7c 0e 0f b7 00 48 83 c4 28 c3 e8 87 db 1d ff cc b9 28 00 00 00 e8 1c dc 1d ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 80 36 8b c8 f7 7f 00 00 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 14 2b ca 48 63 d2 48 03 c2 83 f9 04 7c 0d 8b 00 48 83 c4 28 c3 e8 38 db 1d ff cc b9 28 00 00 00 e8 cd db 1d ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
31        | 7ff7c8586eb0h   | 151     | hex://root/bitconvert?ToUInt16#ToUInt16_(uspan8u,32i)                                                         | ushort ToUInt16(ReadOnlySpan<byte> src, int offset)                                                           | 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 15 2b ca 48 63 d2 48 03 c2 83 f9 02 7c 0e 0f b7 00 48 83 c4 28 c3 e8 87 db 1d ff cc b9 28 00 00 00 e8 1c dc 1d ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 80 36 8b c8 f7 7f 00 00 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 14 2b ca 48 63 d2 48 03 c2 83 f9 04 7c 0d 8b 00 48 83 c4 28 c3 e8 38 db 1d ff cc b9 28 00 00 00 e8 cd db 1d ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
32        | 7ff7c8586f00h   | 71      | hex://root/bitconvert?ToInt32#ToInt32_(uspan8u,32i)                                                           | int ToInt32(ReadOnlySpan<byte> src, int offset)                                                               | 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 14 2b ca 48 63 d2 48 03 c2 83 f9 04 7c 0d 8b 00 48 83 c4 28 c3 e8 38 db 1d ff cc b9 28 00 00 00 e8 cd db 1d ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
33        | 7ff7c8586f50h   | 71      | hex://root/bitconvert?ToUInt32#ToUInt32_(uspan8u,32i)                                                         | uint ToUInt32(ReadOnlySpan<byte> src, int offset)                                                             | 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 14 2b ca 48 63 d2 48 03 c2 83 f9 04 7c 0d 8b 00 48 83 c4 28 c3 e8 e8 da 1d ff cc b9 28 00 00 00 e8 7d db 1d ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
34        | 7ff7c8586fa0h   | 295     | hex://root/bitconvert?ToInt64#ToInt64_(uspan8u,32i)                                                           | long ToInt64(ReadOnlySpan<byte> src, int offset)                                                              | 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 15 2b ca 48 63 d2 48 03 c2 83 f9 08 7c 0e 48 8b 00 48 83 c4 28 c3 e8 97 da 1d ff cc b9 28 00 00 00 e8 2c db 1d ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 18 38 8b c8 f7 7f 00 00 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 15 2b ca 48 63 d2 48 03 c2 83 f9 08 7c 0e 48 8b 00 48 83 c4 28 c3 e8 47 da 1d ff cc b9 28 00 00 00 e8 dc da 1d ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 88 38 8b c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 38 8b c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 40 39 8b c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
35        | 7ff7c8586ff0h   | 215     | hex://root/bitconvert?ToUInt64#ToUInt64_(uspan8u,32i)                                                         | ulong ToUInt64(ReadOnlySpan<byte> src, int offset)                                                            | 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 15 2b ca 48 63 d2 48 03 c2 83 f9 08 7c 0e 48 8b 00 48 83 c4 28 c3 e8 47 da 1d ff cc b9 28 00 00 00 e8 dc da 1d ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 88 38 8b c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 38 8b c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 40 39 8b c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
36        | 7ff7c8587040h   | 135     | hex://root/bitconvert?ToSingle#ToSingle_(32i)                                                                 | float ToSingle(int src)                                                                                       | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 38 8b c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 40 39 8b c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
37        | 7ff7c8587070h   | 87      | hex://root/bitconvert?ToSingle#ToSingle_(32u)                                                                 | float ToSingle(uint src)                                                                                      | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 40 39 8b c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
38        | 7ff7c85870a0h   | 39      | hex://root/bitconvert?ToDouble#ToDouble_(64i)                                                                 | double ToDouble(long src)                                                                                     | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
39        | 7ff7c85870d0h   | 39      | hex://root/bitconvert?ToDouble#ToDouble_(64u)                                                                 | double ToDouble(ulong src)                                                                                    | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
40        | 7ff7c8587100h   | 135     | hex://root/bitconvert?ToInt32#ToInt32_(32f)                                                                   | int ToInt32(float src)                                                                                        | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 48 3a 8b c8 f7 7f 00 00 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 b0 3a 8b c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
41        | 7ff7c8587130h   | 87      | hex://root/bitconvert?ToUInt32#ToUInt32_(32f)                                                                 | uint ToUInt32(float src)                                                                                      | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 b0 3a 8b c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
42        | 7ff7c8587160h   | 39      | hex://root/bitconvert?ToInt64#ToInt64_(64f)                                                                   | long ToInt64(double src)                                                                                      | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
43        | 7ff7c8587190h   | 39      | hex://root/bitconvert?ToUInt64#ToUInt64_(64f)                                                                 | ulong ToUInt64(double src)                                                                                    | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
