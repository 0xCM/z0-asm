Sequence  | Address         | Length  | Uri                                                                                                           | OpSig                                                                                                         | Data
0         | 7ff7c85a3e50h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[8u](8u~in)                                                          | Span<byte> GetBytes<byte>(in byte src)                                                                        | 0f 1f 44 00 00 48 89 11 c7 41 08 01 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
1         | 7ff7c85a3e80h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[8i](8i~in)                                                          | Span<byte> GetBytes<sbyte>(in sbyte src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 01 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
2         | 7ff7c85a3eb0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[16u](16u~in)                                                        | Span<byte> GetBytes<ushort>(in ushort src)                                                                    | 0f 1f 44 00 00 48 89 11 c7 41 08 02 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
3         | 7ff7c85a3ee0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[16i](16i~in)                                                        | Span<byte> GetBytes<short>(in short src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 02 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
4         | 7ff7c85a3f10h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32u](32u~in)                                                        | Span<byte> GetBytes<uint>(in uint src)                                                                        | 0f 1f 44 00 00 48 89 11 c7 41 08 04 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
5         | 7ff7c85a3f40h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32i](32i~in)                                                        | Span<byte> GetBytes<int>(in int src)                                                                          | 0f 1f 44 00 00 48 89 11 c7 41 08 04 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
6         | 7ff7c85a3f70h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](64u~in)                                                        | Span<byte> GetBytes<ulong>(in ulong src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 08 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
7         | 7ff7c85a3fa0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](64i~in)                                                        | Span<byte> GetBytes<long>(in long src)                                                                        | 0f 1f 44 00 00 48 89 11 c7 41 08 08 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
8         | 7ff7c85a3fd0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](32f~in)                                                        | Span<byte> GetBytes<float>(in float src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 04 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
9         | 7ff7c85a4000h   | 1315    | hex://root/bitconvert?GetBytes#GetBytes_g[64f](64f~in)                                                        | Span<byte> GetBytes<double>(in double src)                                                                    | 0f 1f 44 00 00 48 89 11 c7 41 08 08 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 e8 13 16 cc 5e 5e 00 18 e8 0b 16 cc 5e 5e 01 17 e8 03 16 cc 5e 5e 02 16 e8 fb 15 cc 5e 5e 03 15 e8 f3 15 cc 5e 5e 04 14 e8 eb 15 cc 5e 5e 05 13 e8 e3 15 cc 5e 5e 06 12 e8 db 15 cc 5e 5e 07 11 e8 d3 15 cc 5e 5e 08 10 e8 cb 15 cc 5e 5e 09 0f e8 c3 15 cc 5e 5e 0a 0e e8 bb 15 cc 5e 5e 0b 0d e8 b3 15 cc 5e 5e 0c 0c e8 ab 15 cc 5e 5e 0d 0b e8 a3 15 cc 5e 5e 0e 0a e8 9b 15 cc 5e 5e 0f 09 e8 93 15 cc 5e 5e 10 08 e8 8b 15 cc 5e 5e 11 07 e8 83 15 cc 5e 5e 12 06 e8 7b 15 cc 5e 5e 13 05 e8 73 15 cc 5e 5e 14 04 e8 6b 15 cc 5e 5e 15 03 e8 63 15 cc 5e 5e 16 02 e8 5b 15 cc 5e 5e 17 01 e8 53 15 cc 5e 5e 18 00 50 45 8f c8 f7 7f 00 00 e8 43 15 cc 5e 5e 00 00 a8 4b 8f c8 f7 7f 00 00 e8 33 15 cc 5e 5e 00 00 08 4c 8f c8 f7 7f 00 00 e8 23 15 cc 5e 5e 00 00 68 4c 8f c8 f7 7f 00 00 e8 13 15 cc 5e 5e 00 00 c8 4c 8f c8 f7 7f 00 00 e8 03 15 cc 5e 5e 00 00 28 4d 8f c8 f7 7f 00 00 e8 f3 14 cc 5e 5e 00 00 88 4d 8f c8 f7 7f 00 00 e8 e3 14 cc 5e 5e 00 00 e8 4d 8f c8 f7 7f 00 00 e8 d3 14 cc 5e 5e 00 00 48 4e 8f c8 f7 7f 00 00 e8 c3 14 cc 5e 5e 00 00 a8 4e 8f c8 f7 7f 00 00 e8 b3 14 cc 5e 5e 00 00 08 4f 8f c8 f7 7f 00 00 e8 a3 14 cc 5e 5e 00 00 68 4f 8f c8 f7 7f 00 00 e8 93 14 cc 5e 5e 00 00 c8 4f 8f c8 f7 7f 00 00 e8 83 14 cc 5e 5e 00 00 28 50 8f c8 f7 7f 00 00 e8 73 14 cc 5e 5e 00 00 88 50 8f c8 f7 7f 00 00 e8 63 14 cc 5e 5e 00 00 e8 50 8f c8 f7 7f 00 00 e8 53 14 cc 5e 5e 00 00 48 51 8f c8 f7 7f 00 00 e8 43 14 cc 5e 5e 00 00 a8 51 8f c8 f7 7f 00 00 e8 33 14 cc 5e 5e 00 00 08 52 8f c8 f7 7f 00 00 e8 23 14 cc 5e 5e 00 00 68 52 8f c8 f7 7f 00 00 e8 13 14 cc 5e 5e 00 00 c8 52 8f c8 f7 7f 00 00 e8 03 14 cc 5e 5e 00 00 28 53 8f c8 f7 7f 00 00 e8 f3 13 cc 5e 5e 00 00 88 53 8f c8 f7 7f 00 00 e8 e3 13 cc 5e 5e 00 00 e8 53 8f c8 f7 7f 00 00 e8 d3 13 cc 5e 5e 00 00 48 54 8f c8 f7 7f 00 00 e8 c3 13 cc 5e 5e 00 00 a8 54 8f c8 f7 7f 00 00 e8 b3 13 cc 5e 5e 00 00 08 55 8f c8 f7 7f 00 00 e8 a3 13 cc 5e 5e 00 00 68 55 8f c8 f7 7f 00 00 e8 93 13 cc 5e 5e 00 00 c8 55 8f c8 f7 7f 00 00 e8 83 13 cc 5e 5e 00 00 28 56 8f c8 f7 7f 00 00 e8 73 13 cc 5e 5e 00 00 88 56 8f c8 f7 7f 00 00 e8 63 13 cc 5e 5e 00 00 e8 56 8f c8 f7 7f 00 00 e8 53 13 cc 5e 5e 00 00 48 57 8f c8 f7 7f 00 00 e8 43 13 cc 5e 5e 00 00 a8 57 8f c8 f7 7f 00 00 e8 33 13 cc 5e 5e 00 00 08 58 8f c8 f7 7f 00 00 e8 23 13 cc 5e 5e 00 00 68 58 8f c8 f7 7f 00 00 e8 13 13 cc 5e 5e 00 00 c8 58 8f c8 f7 7f 00 00 e8 03 13 cc 5e 5e 00 00 28 59 8f c8 f7 7f 00 00 e8 f3 12 cc 5e 5e 00 00 88 59 8f c8 f7 7f 00 00 e8 e3 12 cc 5e 5e 00 00 e8 59 8f c8 f7 7f 00 00 e8 d3 12 cc 5e 5e 00 00 48 5a 8f c8 f7 7f 00 00 e8 c3 12 cc 5e 5e 00 00 a8 5a 8f c8 f7 7f 00 00 e8 b3 12 cc 5e 5e 00 00 08 5b 8f c8 f7 7f 00 00 e8 a3 12 cc 5e 5e 00 00 68 5b 8f c8 f7 7f 00 00 e8 93 12 cc 5e 5e 00 00 c8 5b 8f c8 f7 7f 00 00 e8 83 12 cc 5e 5e 00 00 28 5c 8f c8 f7 7f 00 00 e8 73 12 cc 5e 5e 00 00 88 5c 8f c8 f7 7f 00 00 e8 63 12 cc 5e 5e 00 00 e8 5c 8f c8 f7 7f 00 00 e8 53 12 cc 5e 5e 00 00 48 5d 8f c8 f7 7f 00 00 e8 43 12 cc 5e 5e 00 00 a8 5d 8f c8 f7 7f 00 00 e8 33 12 cc 5e 5e 00 00 08 5e 8f c8 f7 7f 00 00 e8 23 12 cc 5e 5e 00 00 68 5e 8f c8 f7 7f 00 00 38 3d 8e c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 fc 05 1c ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 08 3e 8e c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 ac 05 1c ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 90 3e 8e c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 16 b7 de 5e e8 51 05 1c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
10        | 7ff7c85a4430h   | 243     | hex://root/bitconvert?GetBytes#GetBytes_g[8u](uspan8u,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<byte>(ReadOnlySpan<byte> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 fc 05 1c ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 08 3e 8e c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 ac 05 1c ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 90 3e 8e c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 16 b7 de 5e e8 51 05 1c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
11        | 7ff7c85a4480h   | 163     | hex://root/bitconvert?GetBytes#GetBytes_g[8i](uspan8i,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<sbyte>(ReadOnlySpan<sbyte> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 ac 05 1c ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 90 3e 8e c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 16 b7 de 5e e8 51 05 1c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
12        | 7ff7c85a44d0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[16u](uspan16u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ushort>(ReadOnlySpan<ushort> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 16 b7 de 5e e8 51 05 1c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
13        | 7ff7c85a4530h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[16i](uspan16i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<short>(ReadOnlySpan<short> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 b6 b6 de 5e e8 f1 04 1c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
14        | 7ff7c85a4590h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32u](uspan32u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<uint>(ReadOnlySpan<uint> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 56 b6 de 5e e8 91 04 1c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
15        | 7ff7c85a45f0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32i](uspan32i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<int>(ReadOnlySpan<int> src, int offset, int count)                                | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 f6 b5 de 5e e8 31 04 1c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
16        | 7ff7c85a4650h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](uspan64u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ulong>(ReadOnlySpan<ulong> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 96 b5 de 5e e8 d1 03 1c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
17        | 7ff7c85a46b0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](uspan64i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<long>(ReadOnlySpan<long> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 36 b5 de 5e e8 71 03 1c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
18        | 7ff7c85a4710h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](uspan32f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<float>(ReadOnlySpan<float> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 d6 b4 de 5e e8 11 03 1c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
19        | 7ff7c85a4770h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64f](uspan64f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<double>(ReadOnlySpan<double> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 76 b4 de 5e e8 b1 02 1c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
20        | 7ff7c85a47d0h   | 291     | hex://root/bitconvert?GetBytes#GetBytes_g[8u](8u~in,span8u)                                                   | void GetBytes<byte>(in byte src, Span<byte> dst)                                                              | 0f 1f 44 00 00 48 8b 02 0f b6 11 88 10 c3 00 00 19 00 00 00 40 00 00 00 40 45 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f be 11 88 10 c3 00 19 00 00 00 40 00 00 00 c8 45 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 0f b7 11 66 89 10 c3 00 19 00 00 00 40 00 00 00 50 46 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 d8 46 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 60 47 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 e8 47 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 70 48 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 f8 48 8e c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
21        | 7ff7c85a47f0h   | 259     | hex://root/bitconvert?GetBytes#GetBytes_g[8i](8i~in,span8u)                                                   | void GetBytes<sbyte>(in sbyte src, Span<byte> dst)                                                            | 0f 1f 44 00 00 48 8b 02 48 0f be 11 88 10 c3 00 19 00 00 00 40 00 00 00 c8 45 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 0f b7 11 66 89 10 c3 00 19 00 00 00 40 00 00 00 50 46 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 d8 46 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 60 47 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 e8 47 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 70 48 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 f8 48 8e c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
22        | 7ff7c85a4810h   | 227     | hex://root/bitconvert?GetBytes#GetBytes_g[16u](16u~in,span8u)                                                 | void GetBytes<ushort>(in ushort src, Span<byte> dst)                                                          | 0f 1f 44 00 00 48 8b 02 0f b7 11 66 89 10 c3 00 19 00 00 00 40 00 00 00 50 46 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 d8 46 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 60 47 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 e8 47 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 70 48 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 f8 48 8e c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
23        | 7ff7c85a4830h   | 195     | hex://root/bitconvert?GetBytes#GetBytes_g[16i](16i~in,span8u)                                                 | void GetBytes<short>(in short src, Span<byte> dst)                                                            | 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 d8 46 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 60 47 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 e8 47 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 70 48 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 f8 48 8e c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
24        | 7ff7c85a4850h   | 163     | hex://root/bitconvert?GetBytes#GetBytes_g[32u](32u~in,span8u)                                                 | void GetBytes<uint>(in uint src, Span<byte> dst)                                                              | 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 60 47 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 e8 47 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 70 48 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 f8 48 8e c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
25        | 7ff7c85a4870h   | 131     | hex://root/bitconvert?GetBytes#GetBytes_g[32i](32i~in,span8u)                                                 | void GetBytes<int>(in int src, Span<byte> dst)                                                                | 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 e8 47 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 70 48 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 f8 48 8e c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
26        | 7ff7c85a4890h   | 99      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](64u~in,span8u)                                                 | void GetBytes<ulong>(in ulong src, Span<byte> dst)                                                            | 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 70 48 8e c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 f8 48 8e c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
27        | 7ff7c85a48b0h   | 67      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](64i~in,span8u)                                                 | void GetBytes<long>(in long src, Span<byte> dst)                                                              | 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 f8 48 8e c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
28        | 7ff7c85a48d0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](32f~in,span8u)                                                 | void GetBytes<float>(in float src, Span<byte> dst)                                                            | c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
29        | 7ff7c85a4900h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64f](64f~in,span8u)                                                 | void GetBytes<double>(in double src, Span<byte> dst)                                                          | c5 f8 77 66 90 48 8b 02 c5 fb 10 01 c5 fb 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
30        | 7ff7c85a4930h   | 336     | hex://root/bitconvert?ToInt16#ToInt16_(uspan8u,32i)                                                           | short ToInt16(ReadOnlySpan<byte> src, int offset)                                                             | 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 16 2b ca 48 63 d2 48 03 c2 83 f9 02 7c 0f 48 0f bf 00 48 83 c4 28 c3 e8 06 01 1c ff cc b9 28 00 00 00 e8 9b 01 1c ff cc 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 c0 4a 8e c8 f7 7f 00 00 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 15 2b ca 48 63 d2 48 03 c2 83 f9 02 7c 0e 0f b7 00 48 83 c4 28 c3 e8 b7 00 1c ff cc b9 28 00 00 00 e8 4c 01 1c ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 60 4b 8e c8 f7 7f 00 00 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 14 2b ca 48 63 d2 48 03 c2 83 f9 04 7c 0d 8b 00 48 83 c4 28 c3 e8 68 00 1c ff cc b9 28 00 00 00 e8 fd 00 1c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 02 00 00 00 00 00 00 00 e8 23 0c cc 5e 5e 00 00 c8 5e 8f c8 f7 7f 00 00 e8 13 0c cc 5e 5e 00 00 28 5f 8f c8 f7 7f 00 00 e8 03 0c cc 5e 5e 00 00 88 5f 8f c8 f7 7f 00 00 e8 f3 0b cc 5e 5e 00 00 e8 5f 8f c8 f7 7f 00 00 e8 e3 0b cc 5e 5e 00 00 48 60 8f c8 f7 7f 00 00 e8 d3 0b cc 5e 5e 00 00 a8 60 8f c8 f7 7f 00 00 00 00 00 00 00 00 00 00
31        | 7ff7c85a4980h   | 256     | hex://root/bitconvert?ToUInt16#ToUInt16_(uspan8u,32i)                                                         | ushort ToUInt16(ReadOnlySpan<byte> src, int offset)                                                           | 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 15 2b ca 48 63 d2 48 03 c2 83 f9 02 7c 0e 0f b7 00 48 83 c4 28 c3 e8 b7 00 1c ff cc b9 28 00 00 00 e8 4c 01 1c ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 60 4b 8e c8 f7 7f 00 00 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 14 2b ca 48 63 d2 48 03 c2 83 f9 04 7c 0d 8b 00 48 83 c4 28 c3 e8 68 00 1c ff cc b9 28 00 00 00 e8 fd 00 1c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 02 00 00 00 00 00 00 00 e8 23 0c cc 5e 5e 00 00 c8 5e 8f c8 f7 7f 00 00 e8 13 0c cc 5e 5e 00 00 28 5f 8f c8 f7 7f 00 00 e8 03 0c cc 5e 5e 00 00 88 5f 8f c8 f7 7f 00 00 e8 f3 0b cc 5e 5e 00 00 e8 5f 8f c8 f7 7f 00 00 e8 e3 0b cc 5e 5e 00 00 48 60 8f c8 f7 7f 00 00 e8 d3 0b cc 5e 5e 00 00 a8 60 8f c8 f7 7f 00 00 00 00 00 00 00 00 00 00
32        | 7ff7c85a49d0h   | 176     | hex://root/bitconvert?ToInt32#ToInt32_(uspan8u,32i)                                                           | int ToInt32(ReadOnlySpan<byte> src, int offset)                                                               | 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 14 2b ca 48 63 d2 48 03 c2 83 f9 04 7c 0d 8b 00 48 83 c4 28 c3 e8 68 00 1c ff cc b9 28 00 00 00 e8 fd 00 1c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 02 00 00 00 00 00 00 00 e8 23 0c cc 5e 5e 00 00 c8 5e 8f c8 f7 7f 00 00 e8 13 0c cc 5e 5e 00 00 28 5f 8f c8 f7 7f 00 00 e8 03 0c cc 5e 5e 00 00 88 5f 8f c8 f7 7f 00 00 e8 f3 0b cc 5e 5e 00 00 e8 5f 8f c8 f7 7f 00 00 e8 e3 0b cc 5e 5e 00 00 48 60 8f c8 f7 7f 00 00 e8 d3 0b cc 5e 5e 00 00 a8 60 8f c8 f7 7f 00 00 00 00 00 00 00 00 00 00
33        | 7ff7c85a4e20h   | 71      | hex://root/bitconvert?ToUInt32#ToUInt32_(uspan8u,32i)                                                         | uint ToUInt32(ReadOnlySpan<byte> src, int offset)                                                             | 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 14 2b ca 48 63 d2 48 03 c2 83 f9 04 7c 0d 8b 00 48 83 c4 28 c3 e8 18 fc 1b ff cc b9 28 00 00 00 e8 ad fc 1b ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
34        | 7ff7c85a4e70h   | 295     | hex://root/bitconvert?ToInt64#ToInt64_(uspan8u,32i)                                                           | long ToInt64(ReadOnlySpan<byte> src, int offset)                                                              | 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 15 2b ca 48 63 d2 48 03 c2 83 f9 08 7c 0e 48 8b 00 48 83 c4 28 c3 e8 c7 fb 1b ff cc b9 28 00 00 00 e8 5c fc 1b ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 f8 4c 8e c8 f7 7f 00 00 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 15 2b ca 48 63 d2 48 03 c2 83 f9 08 7c 0e 48 8b 00 48 83 c4 28 c3 e8 77 fb 1b ff cc b9 28 00 00 00 e8 0c fc 1b ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 68 4d 8e c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 b8 4d 8e c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 20 4e 8e c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
35        | 7ff7c85a4ec0h   | 215     | hex://root/bitconvert?ToUInt64#ToUInt64_(uspan8u,32i)                                                         | ulong ToUInt64(ReadOnlySpan<byte> src, int offset)                                                            | 48 83 ec 28 90 48 8b 01 8b 49 08 3b d1 77 15 2b ca 48 63 d2 48 03 c2 83 f9 08 7c 0e 48 8b 00 48 83 c4 28 c3 e8 77 fb 1b ff cc b9 28 00 00 00 e8 0c fc 1b ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 68 4d 8e c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 b8 4d 8e c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 20 4e 8e c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
36        | 7ff7c85a4f10h   | 135     | hex://root/bitconvert?ToSingle#ToSingle_(32i)                                                                 | float ToSingle(int src)                                                                                       | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 b8 4d 8e c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 20 4e 8e c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
37        | 7ff7c85a4f40h   | 87      | hex://root/bitconvert?ToSingle#ToSingle_(32u)                                                                 | float ToSingle(uint src)                                                                                      | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 20 4e 8e c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
38        | 7ff7c85a4f70h   | 39      | hex://root/bitconvert?ToDouble#ToDouble_(64i)                                                                 | double ToDouble(long src)                                                                                     | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
39        | 7ff7c85a4fa0h   | 39      | hex://root/bitconvert?ToDouble#ToDouble_(64u)                                                                 | double ToDouble(ulong src)                                                                                    | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
40        | 7ff7c85a4fd0h   | 135     | hex://root/bitconvert?ToInt32#ToInt32_(32f)                                                                   | int ToInt32(float src)                                                                                        | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 28 4f 8e c8 f7 7f 00 00 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 90 4f 8e c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
41        | 7ff7c85a5000h   | 87      | hex://root/bitconvert?ToUInt32#ToUInt32_(32f)                                                                 | uint ToUInt32(float src)                                                                                      | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 90 4f 8e c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
42        | 7ff7c85a5030h   | 39      | hex://root/bitconvert?ToInt64#ToInt64_(64f)                                                                   | long ToInt64(double src)                                                                                      | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
43        | 7ff7c85a5060h   | 39      | hex://root/bitconvert?ToUInt64#ToUInt64_(64f)                                                                 | ulong ToUInt64(double src)                                                                                    | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
