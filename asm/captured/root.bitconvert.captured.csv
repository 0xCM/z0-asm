Sequence  | Address         | Length  | Uri                                                                                                           | OpSig                                                                                                         | Data
0         | 7ff7c86b28d0h   | 87      | hex://root/bitconvert?GetBytes#GetBytes_g[8u](8u~in)                                                          | Span<byte> GetBytes<byte>(in byte src)                                                                        | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 01 00 00 00 e8 f0 44 bb 5e 48 83 c0 10 ba 01 00 00 00 0f b6 0f 88 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
1         | 7ff7c86b2930h   | 87      | hex://root/bitconvert?GetBytes#GetBytes_g[8i](8i~in)                                                          | Span<byte> GetBytes<sbyte>(in sbyte src)                                                                      | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 01 00 00 00 e8 90 44 bb 5e 48 83 c0 10 ba 01 00 00 00 48 0f be 0f 88 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
2         | 7ff7c86b2990h   | 1112    | hex://root/bitconvert?GetBytes#GetBytes_g[16u](16u~in)                                                        | Span<byte> GetBytes<ushort>(in ushort src)                                                                    | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 02 00 00 00 e8 30 44 bb 5e 48 83 c0 10 ba 02 00 00 00 0f b7 0f 66 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 02 00 00 00 00 00 00 00 e8 53 2c bb 5e 5e 00 00 20 6b c3 c8 f7 7f 00 00 e8 43 2c bb 5e 5e 00 00 80 6b c3 c8 f7 7f 00 00 e8 33 2c bb 5e 5e 00 00 e0 6b c3 c8 f7 7f 00 00 e8 23 2c bb 5e 5e 00 00 40 6c c3 c8 f7 7f 00 00 e8 13 2c bb 5e 5e 00 00 a0 6c c3 c8 f7 7f 00 00 e8 03 2c bb 5e 5e 00 00 00 6d c3 c8 f7 7f 00 00 e8 f3 2b bb 5e 5e 00 00 60 6d c3 c8 f7 7f 00 00 e8 e3 2b bb 5e 5e 00 00 c0 6d c3 c8 f7 7f 00 00 e8 d3 2b bb 5e 5e 00 00 20 6e c3 c8 f7 7f 00 00 e8 c3 2b bb 5e 5e 00 00 80 6e c3 c8 f7 7f 00 00 e8 b3 2b bb 5e 5e 00 00 e0 6e c3 c8 f7 7f 00 00 e8 a3 2b bb 5e 5e 00 00 40 6f c3 c8 f7 7f 00 00 e8 93 2b bb 5e 5e 00 00 a0 6f c3 c8 f7 7f 00 00 e8 83 2b bb 5e 5e 00 00 00 70 c3 c8 f7 7f 00 00 e8 73 2b bb 5e 5e 00 00 60 70 c3 c8 f7 7f 00 00 e8 63 2b bb 5e 5e 00 00 c0 70 c3 c8 f7 7f 00 00 e8 53 2b bb 5e 5e 00 00 20 71 c3 c8 f7 7f 00 00 e8 43 2b bb 5e 5e 00 00 80 71 c3 c8 f7 7f 00 00 e8 33 2b bb 5e 5e 00 00 e0 71 c3 c8 f7 7f 00 00 e8 23 2b bb 5e 5e 00 01 e8 1b 2b bb 5e 5e 01 00 48 73 c3 c8 f7 7f 00 00 e8 0b 2b bb 5e 5e 00 18 e8 03 2b bb 5e 5e 01 17 e8 fb 2a bb 5e 5e 02 16 e8 f3 2a bb 5e 5e 03 15 e8 eb 2a bb 5e 5e 04 14 e8 e3 2a bb 5e 5e 05 13 e8 db 2a bb 5e 5e 06 12 e8 d3 2a bb 5e 5e 07 11 e8 cb 2a bb 5e 5e 08 10 e8 c3 2a bb 5e 5e 09 0f e8 bb 2a bb 5e 5e 0a 0e e8 b3 2a bb 5e 5e 0b 0d e8 ab 2a bb 5e 5e 0c 0c e8 a3 2a bb 5e 5e 0d 0b e8 9b 2a bb 5e 5e 0e 0a e8 93 2a bb 5e 5e 0f 09 e8 8b 2a bb 5e 5e 10 08 e8 83 2a bb 5e 5e 11 07 e8 7b 2a bb 5e 5e 12 06 e8 73 2a bb 5e 5e 13 05 e8 6b 2a bb 5e 5e 14 04 e8 63 2a bb 5e 5e 15 03 e8 5b 2a bb 5e 5e 16 02 e8 53 2a bb 5e 5e 17 01 e8 4b 2a bb 5e 5e 18 00 50 72 c3 c8 f7 7f 00 00 e8 3b 2a bb 5e 5e 00 00 48 75 c3 c8 f7 7f 00 00 e8 2b 2a bb 5e 5e 00 00 a8 75 c3 c8 f7 7f 00 00 e8 1b 2a bb 5e 5e 00 00 08 76 c3 c8 f7 7f 00 00 e8 0b 2a bb 5e 5e 00 00 68 76 c3 c8 f7 7f 00 00 e8 fb 29 bb 5e 5e 00 00 c8 76 c3 c8 f7 7f 00 00 e8 eb 29 bb 5e 5e 00 00 28 77 c3 c8 f7 7f 00 00 e8 db 29 bb 5e 5e 00 00 88 77 c3 c8 f7 7f 00 00 e8 cb 29 bb 5e 5e 00 00 e8 77 c3 c8 f7 7f 00 00 e8 bb 29 bb 5e 5e 00 00 48 78 c3 c8 f7 7f 00 00 e8 ab 29 bb 5e 5e 00 00 a8 78 c3 c8 f7 7f 00 00 e8 9b 29 bb 5e 5e 00 00 08 79 c3 c8 f7 7f 00 00 e8 8b 29 bb 5e 5e 00 00 68 79 c3 c8 f7 7f 00 00 e8 7b 29 bb 5e 5e 00 00 c8 79 c3 c8 f7 7f 00 00 e8 6b 29 bb 5e 5e 00 00 28 7a c3 c8 f7 7f 00 00 e8 5b 29 bb 5e 5e 00 00 88 7a c3 c8 f7 7f 00 00 e8 4b 29 bb 5e 5e 00 00 e8 7a c3 c8 f7 7f 00 00 e8 3b 29 bb 5e 5e 00 00 48 7b c3 c8 f7 7f 00 00 e8 2b 29 bb 5e 5e 00 00 a8 7b c3 c8 f7 7f 00 00 e8 1b 29 bb 5e 5e 00 00 08 7c c3 c8 f7 7f 00 00 e8 0b 29 bb 5e 5e 00 00 68 7c c3 c8 f7 7f 00 00 e8 fb 28 bb 5e 5e 00 00 c8 7c c3 c8 f7 7f 00 00 e8 eb 28 bb 5e 5e 00 00 28 7d c3 c8 f7 7f 00 00 e8 db 28 bb 5e 5e 00 00 88 7d c3 c8 f7 7f 00 00 e8 cb 28 bb 5e 5e 00 00 e8 7d c3 c8 f7 7f 00 00 e8 bb 28 bb 5e 5e 00 00 48 7e c3 c8 f7 7f 00 00 e8 ab 28 bb 5e 5e 00 00 a8 7e c3 c8 f7 7f 00 00 e8 9b 28 bb 5e 5e 00 00 08 7f c3 c8 f7 7f 00 00 e8 8b 28 bb 5e 5e 00 00 68 7f c3 c8 f7 7f 00 00 e8 7b 28 bb 5e 5e 00 00 c8 7f c3 c8 f7 7f 00 00 e8 6b 28 bb 5e 5e 00 00 28 80 c3 c8 f7 7f 00 00 00 00 00 00 00 00 00 00
3         | 7ff7c86b2df0h   | 87      | hex://root/bitconvert?GetBytes#GetBytes_g[16i](16i~in)                                                        | Span<byte> GetBytes<short>(in short src)                                                                      | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 02 00 00 00 e8 d0 3f bb 5e 48 83 c0 10 ba 02 00 00 00 48 0f bf 0f 66 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
4         | 7ff7c86b2e50h   | 87      | hex://root/bitconvert?GetBytes#GetBytes_g[32u](32u~in)                                                        | Span<byte> GetBytes<uint>(in uint src)                                                                        | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 04 00 00 00 e8 70 3f bb 5e 48 83 c0 10 ba 04 00 00 00 8b 0f 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
5         | 7ff7c86b2eb0h   | 87      | hex://root/bitconvert?GetBytes#GetBytes_g[32i](32i~in)                                                        | Span<byte> GetBytes<int>(in int src)                                                                          | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 04 00 00 00 e8 10 3f bb 5e 48 83 c0 10 ba 04 00 00 00 8b 0f 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
6         | 7ff7c86b2f10h   | 87      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](64u~in)                                                        | Span<byte> GetBytes<ulong>(in ulong src)                                                                      | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 08 00 00 00 e8 b0 3e bb 5e 48 83 c0 10 ba 08 00 00 00 48 8b 0f 48 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
7         | 7ff7c86b2f70h   | 87      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](64i~in)                                                        | Span<byte> GetBytes<long>(in long src)                                                                        | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 08 00 00 00 e8 50 3e bb 5e 48 83 c0 10 ba 08 00 00 00 48 8b 0f 48 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
8         | 7ff7c86b2fd0h   | 435     | hex://root/bitconvert?GetBytes#GetBytes_g[32f](32f~in)                                                        | Span<byte> GetBytes<float>(in float src)                                                                      | 57 56 48 83 ec 28 c5 f8 77 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 04 00 00 00 e8 ed 3d bb 5e 48 83 c0 10 ba 04 00 00 00 c5 fa 10 07 c5 fa 11 00 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 cc cc 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 18 d3 c2 c8 f7 7f 00 00 57 56 48 83 ec 28 c5 f8 77 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 08 00 00 00 e8 8d 3d bb 5e 48 83 c0 10 ba 08 00 00 00 c5 fb 10 07 c5 fb 11 00 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 cc cc 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 c0 d4 c2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 bc 21 0b ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 90 d5 c2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 6c 21 0b ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 18 d6 c2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 b6 ca cd 5e e8 11 21 0b ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
9         | 7ff7c86b3030h   | 339     | hex://root/bitconvert?GetBytes#GetBytes_g[64f](64f~in)                                                        | Span<byte> GetBytes<double>(in double src)                                                                    | 57 56 48 83 ec 28 c5 f8 77 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 08 00 00 00 e8 8d 3d bb 5e 48 83 c0 10 ba 08 00 00 00 c5 fb 10 07 c5 fb 11 00 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 cc cc 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 c0 d4 c2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 bc 21 0b ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 90 d5 c2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 6c 21 0b ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 18 d6 c2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 b6 ca cd 5e e8 11 21 0b ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
10        | 7ff7c86b3090h   | 243     | hex://root/bitconvert?GetBytes#GetBytes_g[8u](uspan8u,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<byte>(ReadOnlySpan<byte> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 bc 21 0b ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 90 d5 c2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 6c 21 0b ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 18 d6 c2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 b6 ca cd 5e e8 11 21 0b ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
11        | 7ff7c86b30e0h   | 163     | hex://root/bitconvert?GetBytes#GetBytes_g[8i](uspan8i,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<sbyte>(ReadOnlySpan<sbyte> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 6c 21 0b ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 18 d6 c2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 b6 ca cd 5e e8 11 21 0b ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
12        | 7ff7c86b3130h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[16u](uspan16u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ushort>(ReadOnlySpan<ushort> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 b6 ca cd 5e e8 11 21 0b ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
13        | 7ff7c86b3190h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[16i](uspan16i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<short>(ReadOnlySpan<short> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 56 ca cd 5e e8 b1 20 0b ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
14        | 7ff7c86b31f0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32u](uspan32u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<uint>(ReadOnlySpan<uint> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 f6 c9 cd 5e e8 51 20 0b ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
15        | 7ff7c86b3250h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32i](uspan32i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<int>(ReadOnlySpan<int> src, int offset, int count)                                | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 96 c9 cd 5e e8 f1 1f 0b ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
16        | 7ff7c86b32b0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](uspan64u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ulong>(ReadOnlySpan<ulong> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 36 c9 cd 5e e8 91 1f 0b ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
17        | 7ff7c86b3310h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](uspan64i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<long>(ReadOnlySpan<long> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 d6 c8 cd 5e e8 31 1f 0b ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
18        | 7ff7c86b3370h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](uspan32f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<float>(ReadOnlySpan<float> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 76 c8 cd 5e e8 d1 1e 0b ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
19        | 7ff7c86b33d0h   | 736     | hex://root/bitconvert?GetBytes#GetBytes_g[64f](uspan64f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<double>(ReadOnlySpan<double> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 16 c8 cd 5e e8 71 1e 0b ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 e8 13 22 bb 5e 5e 00 00 88 80 c3 c8 f7 7f 00 00 e8 03 22 bb 5e 5e 00 00 e8 80 c3 c8 f7 7f 00 00 e8 f3 21 bb 5e 5e 00 00 48 81 c3 c8 f7 7f 00 00 e8 e3 21 bb 5e 5e 00 00 a8 81 c3 c8 f7 7f 00 00 e8 d3 21 bb 5e 5e 00 00 08 82 c3 c8 f7 7f 00 00 e8 c3 21 bb 5e 5e 00 00 68 82 c3 c8 f7 7f 00 00 e8 b3 21 bb 5e 5e 00 00 c8 82 c3 c8 f7 7f 00 00 e8 a3 21 bb 5e 5e 00 00 28 83 c3 c8 f7 7f 00 00 e8 93 21 bb 5e 5e 00 00 88 83 c3 c8 f7 7f 00 00 e8 83 21 bb 5e 5e 00 00 e8 83 c3 c8 f7 7f 00 00 e8 73 21 bb 5e 5e 00 00 48 84 c3 c8 f7 7f 00 00 e8 63 21 bb 5e 5e 00 00 a8 84 c3 c8 f7 7f 00 00 e8 53 21 bb 5e 5e 00 00 08 85 c3 c8 f7 7f 00 00 e8 43 21 bb 5e 5e 00 00 68 85 c3 c8 f7 7f 00 00 e8 33 21 bb 5e 5e 00 00 c8 85 c3 c8 f7 7f 00 00 e8 23 21 bb 5e 5e 00 00 28 86 c3 c8 f7 7f 00 00 e8 13 21 bb 5e 5e 00 00 88 86 c3 c8 f7 7f 00 00 e8 03 21 bb 5e 5e 00 00 e8 86 c3 c8 f7 7f 00 00 e8 f3 20 bb 5e 5e 00 00 48 87 c3 c8 f7 7f 00 00 e8 e3 20 bb 5e 5e 00 00 a8 87 c3 c8 f7 7f 00 00 e8 d3 20 bb 5e 5e 00 00 08 88 c3 c8 f7 7f 00 00 e8 c3 20 bb 5e 5e 00 00 68 88 c3 c8 f7 7f 00 00 e8 b3 20 bb 5e 5e 00 00 c8 88 c3 c8 f7 7f 00 00 e8 a3 20 bb 5e 5e 00 00 28 89 c3 c8 f7 7f 00 00 e8 93 20 bb 5e 5e 00 00 88 89 c3 c8 f7 7f 00 00 e8 83 20 bb 5e 5e 00 00 e8 89 c3 c8 f7 7f 00 00 e8 73 20 bb 5e 5e 00 00 48 8a c3 c8 f7 7f 00 00 e8 63 20 bb 5e 5e 00 00 a8 8a c3 c8 f7 7f 00 00 e8 53 20 bb 5e 5e 00 00 08 8b c3 c8 f7 7f 00 00 e8 43 20 bb 5e 5e 00 00 68 8b c3 c8 f7 7f 00 00 e8 33 20 bb 5e 5e 00 00 c8 8b c3 c8 f7 7f 00 00 e8 23 20 bb 5e 5e 00 00 28 8c c3 c8 f7 7f 00 00 e8 13 20 bb 5e 5e 00 00 88 8c c3 c8 f7 7f 00 00 e8 03 20 bb 5e 5e 00 00 e8 8c c3 c8 f7 7f 00 00 e8 f3 1f bb 5e 5e 00 00 48 8d c3 c8 f7 7f 00 00 e8 e3 1f bb 5e 5e 00 00 a8 8d c3 c8 f7 7f 00 00 e8 d3 1f bb 5e 5e 00 00 08 8e c3 c8 f7 7f 00 00 e8 c3 1f bb 5e 5e 00 00 68 8e c3 c8 f7 7f 00 00 e8 b3 1f bb 5e 5e 00 00 c8 8e c3 c8 f7 7f 00 00 e8 a3 1f bb 5e 5e 00 00 28 8f c3 c8 f7 7f 00 00 00 00 00 00 00 00 00 00
20        | 7ff7c86b3830h   | 55      | hex://root/bitconvert?GetBytes#GetBytes_g[8u](8u~in,span8u)                                                   | void GetBytes<byte>(in byte src, Span<byte> dst)                                                              | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 0f b6 09 88 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
21        | 7ff7c86b3870h   | 247     | hex://root/bitconvert?GetBytes#GetBytes_g[8i](8i~in,span8u)                                                   | void GetBytes<sbyte>(in sbyte src, Span<byte> dst)                                                            | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f be 09 88 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 50 dd c2 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 0f b7 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 d8 dd c2 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f bf 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 60 de c2 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
22        | 7ff7c86b38b0h   | 183     | hex://root/bitconvert?GetBytes#GetBytes_g[16u](16u~in,span8u)                                                 | void GetBytes<ushort>(in ushort src, Span<byte> dst)                                                          | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 0f b7 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 d8 dd c2 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f bf 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 60 de c2 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
23        | 7ff7c86b38f0h   | 119     | hex://root/bitconvert?GetBytes#GetBytes_g[16i](16i~in,span8u)                                                 | void GetBytes<short>(in short src, Span<byte> dst)                                                            | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f bf 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 60 de c2 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
24        | 7ff7c86b3930h   | 55      | hex://root/bitconvert?GetBytes#GetBytes_g[32u](32u~in,span8u)                                                 | void GetBytes<uint>(in uint src, Span<byte> dst)                                                              | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
25        | 7ff7c86b3970h   | 55      | hex://root/bitconvert?GetBytes#GetBytes_g[32i](32i~in,span8u)                                                 | void GetBytes<int>(in int src, Span<byte> dst)                                                                | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
26        | 7ff7c86b39b0h   | 291     | hex://root/bitconvert?GetBytes#GetBytes_g[64u](64u~in,span8u)                                                 | void GetBytes<ulong>(in ulong src, Span<byte> dst)                                                            | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 8b 09 48 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 f8 df c2 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 8b 09 48 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 80 e0 c2 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fa 10 01 c5 fa 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 08 e1 c2 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 38 e2 c2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
27        | 7ff7c86b39f0h   | 227     | hex://root/bitconvert?GetBytes#GetBytes_g[64i](64i~in,span8u)                                                 | void GetBytes<long>(in long src, Span<byte> dst)                                                              | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 8b 09 48 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 80 e0 c2 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fa 10 01 c5 fa 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 08 e1 c2 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 38 e2 c2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
28        | 7ff7c86b3a30h   | 163     | hex://root/bitconvert?GetBytes#GetBytes_g[32f](32f~in,span8u)                                                 | void GetBytes<float>(in float src, Span<byte> dst)                                                            | 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fa 10 01 c5 fa 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 08 e1 c2 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 38 e2 c2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
29        | 7ff7c86b3a70h   | 99      | hex://root/bitconvert?GetBytes#GetBytes_g[64f](64f~in,span8u)                                                 | void GetBytes<double>(in double src, Span<byte> dst)                                                          | 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 38 e2 c2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
30        | 7ff7c86b3ab0h   | 35      | hex://root/bitconvert?ToInt16#ToInt16_(uspan8u,32i)                                                           | short ToInt16(ReadOnlySpan<byte> src, int offset)                                                             | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
31        | 7ff7c86b3ae0h   | 295     | hex://root/bitconvert?ToUInt16#ToUInt16_(uspan8u,32i)                                                         | ushort ToUInt16(ReadOnlySpan<byte> src, int offset)                                                           | 0f 1f 44 00 00 48 8b 01 48 63 d2 0f b7 04 10 c3 19 00 00 00 40 00 00 00 38 e3 c2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 b8 e3 c2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 38 e4 c2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 b8 e4 c2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 20 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 70 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
32        | 7ff7c86b3b00h   | 263     | hex://root/bitconvert?ToInt32#ToInt32_(uspan8u,32i)                                                           | int ToInt32(ReadOnlySpan<byte> src, int offset)                                                               | 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 b8 e3 c2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 38 e4 c2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 b8 e4 c2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 20 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 70 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
33        | 7ff7c86b3b20h   | 231     | hex://root/bitconvert?ToUInt32#ToUInt32_(uspan8u,32i)                                                         | uint ToUInt32(ReadOnlySpan<byte> src, int offset)                                                             | 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 38 e4 c2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 b8 e4 c2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 20 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 70 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
34        | 7ff7c86b3b40h   | 199     | hex://root/bitconvert?ToInt64#ToInt64_(uspan8u,32i)                                                           | long ToInt64(ReadOnlySpan<byte> src, int offset)                                                              | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 b8 e4 c2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 20 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 70 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
35        | 7ff7c86b3b60h   | 167     | hex://root/bitconvert?ToUInt64#ToUInt64_(uspan8u,32i)                                                         | ulong ToUInt64(ReadOnlySpan<byte> src, int offset)                                                            | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 20 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 70 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
36        | 7ff7c86b3b80h   | 135     | hex://root/bitconvert?ToSingle#ToSingle_(32i)                                                                 | float ToSingle(int src)                                                                                       | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 70 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
37        | 7ff7c86b3bb0h   | 87      | hex://root/bitconvert?ToSingle#ToSingle_(32u)                                                                 | float ToSingle(uint src)                                                                                      | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 e5 c2 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
38        | 7ff7c86b3be0h   | 39      | hex://root/bitconvert?ToDouble#ToDouble_(64i)                                                                 | double ToDouble(long src)                                                                                     | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
39        | 7ff7c86b3c10h   | 39      | hex://root/bitconvert?ToDouble#ToDouble_(64u)                                                                 | double ToDouble(ulong src)                                                                                    | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
40        | 7ff7c86b3c40h   | 135     | hex://root/bitconvert?ToInt32#ToInt32_(32f)                                                                   | int ToInt32(float src)                                                                                        | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 c8 e6 c2 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 18 e7 c2 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
41        | 7ff7c86b3c70h   | 87      | hex://root/bitconvert?ToUInt32#ToUInt32_(32f)                                                                 | uint ToUInt32(float src)                                                                                      | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 18 e7 c2 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
42        | 7ff7c86b3ca0h   | 39      | hex://root/bitconvert?ToInt64#ToInt64_(64f)                                                                   | long ToInt64(double src)                                                                                      | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
43        | 7ff7c86b3cd0h   | 39      | hex://root/bitconvert?ToUInt64#ToUInt64_(64f)                                                                 | ulong ToUInt64(double src)                                                                                    | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
