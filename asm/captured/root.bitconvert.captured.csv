Sequence  | Address         | Length  | Uri                                                                                                           | OpSig                                                                                                         | Data
0         | 7ff7c86aaf60h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[8u](8u~in)                                                          | Span<byte> GetBytes<byte>(in byte src)                                                                        | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 01 00 00 00 e8 60 be bb 5e 48 83 c0 10 ba 01 00 00 00 0f b6 0f 88 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
1         | 7ff7c86aafc0h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[8i](8i~in)                                                          | Span<byte> GetBytes<sbyte>(in sbyte src)                                                                      | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 01 00 00 00 e8 00 be bb 5e 48 83 c0 10 ba 01 00 00 00 48 0f be 0f 88 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
2         | 7ff7c86ab020h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[16u](16u~in)                                                        | Span<byte> GetBytes<ushort>(in ushort src)                                                                    | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 02 00 00 00 e8 a0 bd bb 5e 48 83 c0 10 ba 02 00 00 00 0f b7 0f 66 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
3         | 7ff7c86ab080h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[16i](16i~in)                                                        | Span<byte> GetBytes<short>(in short src)                                                                      | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 02 00 00 00 e8 40 bd bb 5e 48 83 c0 10 ba 02 00 00 00 48 0f bf 0f 66 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
4         | 7ff7c86ab0e0h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[32u](32u~in)                                                        | Span<byte> GetBytes<uint>(in uint src)                                                                        | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 04 00 00 00 e8 e0 bc bb 5e 48 83 c0 10 ba 04 00 00 00 8b 0f 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
5         | 7ff7c86ab140h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[32i](32i~in)                                                        | Span<byte> GetBytes<int>(in int src)                                                                          | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 04 00 00 00 e8 80 bc bb 5e 48 83 c0 10 ba 04 00 00 00 8b 0f 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
6         | 7ff7c86ab1a0h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[64u](64u~in)                                                        | Span<byte> GetBytes<ulong>(in ulong src)                                                                      | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 08 00 00 00 e8 20 bc bb 5e 48 83 c0 10 ba 08 00 00 00 48 8b 0f 48 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
7         | 7ff7c86ab200h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[64i](64i~in)                                                        | Span<byte> GetBytes<long>(in long src)                                                                        | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 08 00 00 00 e8 c0 bb bb 5e 48 83 c0 10 ba 08 00 00 00 48 8b 0f 48 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
8         | 7ff7c86ab260h   | 1224    | hex://root/BitConvert?GetBytes#GetBytes_g[32f](32f~in)                                                        | Span<byte> GetBytes<float>(in float src)                                                                      | 57 56 48 83 ec 28 c5 f8 77 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 04 00 00 00 e8 5d bb bb 5e 48 83 c0 10 ba 04 00 00 00 c5 fa 10 07 c5 fa 11 00 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 cc cc 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 68 8a c4 c8 f7 7f 00 00 57 56 48 83 ec 28 c5 f8 77 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 08 00 00 00 e8 fd ba bb 5e 48 83 c0 10 ba 08 00 00 00 c5 fb 10 07 c5 fb 11 00 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 cc cc 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 02 00 00 00 00 00 00 00 e8 1b a3 bb 5e 5e 00 00 e8 0b c5 c8 f7 7f 00 00 e8 0b a3 bb 5e 5e 00 00 48 0c c5 c8 f7 7f 00 00 e8 fb a2 bb 5e 5e 00 00 a8 0c c5 c8 f7 7f 00 00 e8 eb a2 bb 5e 5e 00 00 08 0d c5 c8 f7 7f 00 00 e8 db a2 bb 5e 5e 00 00 68 0d c5 c8 f7 7f 00 00 e8 cb a2 bb 5e 5e 00 00 c8 0d c5 c8 f7 7f 00 00 e8 bb a2 bb 5e 5e 00 00 28 0e c5 c8 f7 7f 00 00 e8 ab a2 bb 5e 5e 00 00 88 0e c5 c8 f7 7f 00 00 e8 9b a2 bb 5e 5e 00 00 e8 0e c5 c8 f7 7f 00 00 e8 8b a2 bb 5e 5e 00 00 48 0f c5 c8 f7 7f 00 00 e8 7b a2 bb 5e 5e 00 00 a8 0f c5 c8 f7 7f 00 00 e8 6b a2 bb 5e 5e 00 00 08 10 c5 c8 f7 7f 00 00 e8 5b a2 bb 5e 5e 00 00 68 10 c5 c8 f7 7f 00 00 e8 4b a2 bb 5e 5e 00 00 c8 10 c5 c8 f7 7f 00 00 e8 3b a2 bb 5e 5e 00 00 28 11 c5 c8 f7 7f 00 00 e8 2b a2 bb 5e 5e 00 00 88 11 c5 c8 f7 7f 00 00 e8 1b a2 bb 5e 5e 00 00 e8 11 c5 c8 f7 7f 00 00 e8 0b a2 bb 5e 5e 00 00 48 12 c5 c8 f7 7f 00 00 e8 fb a1 bb 5e 5e 00 00 a8 12 c5 c8 f7 7f 00 00 e8 eb a1 bb 5e 5e 00 00 08 13 c5 c8 f7 7f 00 00 e8 db a1 bb 5e 5e 00 00 68 13 c5 c8 f7 7f 00 00 e8 cb a1 bb 5e 5e 00 00 c8 13 c5 c8 f7 7f 00 00 e8 bb a1 bb 5e 5e 00 00 28 14 c5 c8 f7 7f 00 00 e8 ab a1 bb 5e 5e 00 00 88 14 c5 c8 f7 7f 00 00 e8 9b a1 bb 5e 5e 00 00 e8 14 c5 c8 f7 7f 00 00 e8 8b a1 bb 5e 5e 00 00 48 15 c5 c8 f7 7f 00 00 e8 7b a1 bb 5e 5e 00 00 a8 15 c5 c8 f7 7f 00 00 e8 6b a1 bb 5e 5e 00 00 08 16 c5 c8 f7 7f 00 00 e8 5b a1 bb 5e 5e 00 00 68 16 c5 c8 f7 7f 00 00 e8 4b a1 bb 5e 5e 00 00 c8 16 c5 c8 f7 7f 00 00 e8 3b a1 bb 5e 5e 00 00 28 17 c5 c8 f7 7f 00 00 e8 2b a1 bb 5e 5e 00 00 88 17 c5 c8 f7 7f 00 00 e8 1b a1 bb 5e 5e 00 00 e8 17 c5 c8 f7 7f 00 00 e8 0b a1 bb 5e 5e 00 00 48 18 c5 c8 f7 7f 00 00 e8 fb a0 bb 5e 5e 00 00 a8 18 c5 c8 f7 7f 00 00 e8 eb a0 bb 5e 5e 00 00 08 19 c5 c8 f7 7f 00 00 e8 db a0 bb 5e 5e 00 00 68 19 c5 c8 f7 7f 00 00 e8 cb a0 bb 5e 5e 00 00 c8 19 c5 c8 f7 7f 00 00 e8 bb a0 bb 5e 5e 00 00 28 1a c5 c8 f7 7f 00 00 e8 ab a0 bb 5e 5e 00 00 88 1a c5 c8 f7 7f 00 00 e8 9b a0 bb 5e 5e 00 00 e8 1a c5 c8 f7 7f 00 00 e8 8b a0 bb 5e 5e 00 00 48 1b c5 c8 f7 7f 00 00 e8 7b a0 bb 5e 5e 00 00 a8 1b c5 c8 f7 7f 00 00 e8 6b a0 bb 5e 5e 00 00 08 1c c5 c8 f7 7f 00 00 e8 5b a0 bb 5e 5e 00 00 68 1c c5 c8 f7 7f 00 00 e8 4b a0 bb 5e 5e 00 00 c8 1c c5 c8 f7 7f 00 00 e8 3b a0 bb 5e 5e 00 00 28 1d c5 c8 f7 7f 00 00 e8 2b a0 bb 5e 5e 00 00 88 1d c5 c8 f7 7f 00 00 e8 1b a0 bb 5e 5e 00 00 e8 1d c5 c8 f7 7f 00 00 e8 0b a0 bb 5e 5e 00 00 48 1e c5 c8 f7 7f 00 00 e8 fb 9f bb 5e 5e 00 00 a8 1e c5 c8 f7 7f 00 00 e8 eb 9f bb 5e 5e 00 00 08 1f c5 c8 f7 7f 00 00 e8 db 9f bb 5e 5e 00 00 68 1f c5 c8 f7 7f 00 00 e8 cb 9f bb 5e 5e 00 00 c8 1f c5 c8 f7 7f 00 00 e8 bb 9f bb 5e 5e 00 00 28 20 c5 c8 f7 7f 00 00 e8 ab 9f bb 5e 5e 00 00 88 20 c5 c8 f7 7f 00 00 e8 9b 9f bb 5e 5e 00 00 e8 20 c5 c8 f7 7f 00 00 e8 8b 9f bb 5e 5e 00 00 48 21 c5 c8 f7 7f 00 00 e8 7b 9f bb 5e 5e 00 00 a8 21 c5 c8 f7 7f 00 00 e8 6b 9f bb 5e 5e 00 00 08 22 c5 c8 f7 7f 00 00 e8 5b 9f bb 5e 5e 00 00 68 22 c5 c8 f7 7f 00 00 e8 4b 9f bb 5e 5e 00 00 c8 22 c5 c8 f7 7f 00 00 e8 3b 9f bb 5e 5e 00 00 28 23 c5 c8 f7 7f 00 00 e8 2b 9f bb 5e 5e 00 00 88 23 c5 c8 f7 7f 00 00 00 00 00 00 00 00 00 00
9         | 7ff7c86ab2c0h   | 1128    | hex://root/BitConvert?GetBytes#GetBytes_g[64f](64f~in)                                                        | Span<byte> GetBytes<double>(in double src)                                                                    | 57 56 48 83 ec 28 c5 f8 77 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 08 00 00 00 e8 fd ba bb 5e 48 83 c0 10 ba 08 00 00 00 c5 fb 10 07 c5 fb 11 00 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 cc cc 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 02 00 00 00 00 00 00 00 e8 1b a3 bb 5e 5e 00 00 e8 0b c5 c8 f7 7f 00 00 e8 0b a3 bb 5e 5e 00 00 48 0c c5 c8 f7 7f 00 00 e8 fb a2 bb 5e 5e 00 00 a8 0c c5 c8 f7 7f 00 00 e8 eb a2 bb 5e 5e 00 00 08 0d c5 c8 f7 7f 00 00 e8 db a2 bb 5e 5e 00 00 68 0d c5 c8 f7 7f 00 00 e8 cb a2 bb 5e 5e 00 00 c8 0d c5 c8 f7 7f 00 00 e8 bb a2 bb 5e 5e 00 00 28 0e c5 c8 f7 7f 00 00 e8 ab a2 bb 5e 5e 00 00 88 0e c5 c8 f7 7f 00 00 e8 9b a2 bb 5e 5e 00 00 e8 0e c5 c8 f7 7f 00 00 e8 8b a2 bb 5e 5e 00 00 48 0f c5 c8 f7 7f 00 00 e8 7b a2 bb 5e 5e 00 00 a8 0f c5 c8 f7 7f 00 00 e8 6b a2 bb 5e 5e 00 00 08 10 c5 c8 f7 7f 00 00 e8 5b a2 bb 5e 5e 00 00 68 10 c5 c8 f7 7f 00 00 e8 4b a2 bb 5e 5e 00 00 c8 10 c5 c8 f7 7f 00 00 e8 3b a2 bb 5e 5e 00 00 28 11 c5 c8 f7 7f 00 00 e8 2b a2 bb 5e 5e 00 00 88 11 c5 c8 f7 7f 00 00 e8 1b a2 bb 5e 5e 00 00 e8 11 c5 c8 f7 7f 00 00 e8 0b a2 bb 5e 5e 00 00 48 12 c5 c8 f7 7f 00 00 e8 fb a1 bb 5e 5e 00 00 a8 12 c5 c8 f7 7f 00 00 e8 eb a1 bb 5e 5e 00 00 08 13 c5 c8 f7 7f 00 00 e8 db a1 bb 5e 5e 00 00 68 13 c5 c8 f7 7f 00 00 e8 cb a1 bb 5e 5e 00 00 c8 13 c5 c8 f7 7f 00 00 e8 bb a1 bb 5e 5e 00 00 28 14 c5 c8 f7 7f 00 00 e8 ab a1 bb 5e 5e 00 00 88 14 c5 c8 f7 7f 00 00 e8 9b a1 bb 5e 5e 00 00 e8 14 c5 c8 f7 7f 00 00 e8 8b a1 bb 5e 5e 00 00 48 15 c5 c8 f7 7f 00 00 e8 7b a1 bb 5e 5e 00 00 a8 15 c5 c8 f7 7f 00 00 e8 6b a1 bb 5e 5e 00 00 08 16 c5 c8 f7 7f 00 00 e8 5b a1 bb 5e 5e 00 00 68 16 c5 c8 f7 7f 00 00 e8 4b a1 bb 5e 5e 00 00 c8 16 c5 c8 f7 7f 00 00 e8 3b a1 bb 5e 5e 00 00 28 17 c5 c8 f7 7f 00 00 e8 2b a1 bb 5e 5e 00 00 88 17 c5 c8 f7 7f 00 00 e8 1b a1 bb 5e 5e 00 00 e8 17 c5 c8 f7 7f 00 00 e8 0b a1 bb 5e 5e 00 00 48 18 c5 c8 f7 7f 00 00 e8 fb a0 bb 5e 5e 00 00 a8 18 c5 c8 f7 7f 00 00 e8 eb a0 bb 5e 5e 00 00 08 19 c5 c8 f7 7f 00 00 e8 db a0 bb 5e 5e 00 00 68 19 c5 c8 f7 7f 00 00 e8 cb a0 bb 5e 5e 00 00 c8 19 c5 c8 f7 7f 00 00 e8 bb a0 bb 5e 5e 00 00 28 1a c5 c8 f7 7f 00 00 e8 ab a0 bb 5e 5e 00 00 88 1a c5 c8 f7 7f 00 00 e8 9b a0 bb 5e 5e 00 00 e8 1a c5 c8 f7 7f 00 00 e8 8b a0 bb 5e 5e 00 00 48 1b c5 c8 f7 7f 00 00 e8 7b a0 bb 5e 5e 00 00 a8 1b c5 c8 f7 7f 00 00 e8 6b a0 bb 5e 5e 00 00 08 1c c5 c8 f7 7f 00 00 e8 5b a0 bb 5e 5e 00 00 68 1c c5 c8 f7 7f 00 00 e8 4b a0 bb 5e 5e 00 00 c8 1c c5 c8 f7 7f 00 00 e8 3b a0 bb 5e 5e 00 00 28 1d c5 c8 f7 7f 00 00 e8 2b a0 bb 5e 5e 00 00 88 1d c5 c8 f7 7f 00 00 e8 1b a0 bb 5e 5e 00 00 e8 1d c5 c8 f7 7f 00 00 e8 0b a0 bb 5e 5e 00 00 48 1e c5 c8 f7 7f 00 00 e8 fb 9f bb 5e 5e 00 00 a8 1e c5 c8 f7 7f 00 00 e8 eb 9f bb 5e 5e 00 00 08 1f c5 c8 f7 7f 00 00 e8 db 9f bb 5e 5e 00 00 68 1f c5 c8 f7 7f 00 00 e8 cb 9f bb 5e 5e 00 00 c8 1f c5 c8 f7 7f 00 00 e8 bb 9f bb 5e 5e 00 00 28 20 c5 c8 f7 7f 00 00 e8 ab 9f bb 5e 5e 00 00 88 20 c5 c8 f7 7f 00 00 e8 9b 9f bb 5e 5e 00 00 e8 20 c5 c8 f7 7f 00 00 e8 8b 9f bb 5e 5e 00 00 48 21 c5 c8 f7 7f 00 00 e8 7b 9f bb 5e 5e 00 00 a8 21 c5 c8 f7 7f 00 00 e8 6b 9f bb 5e 5e 00 00 08 22 c5 c8 f7 7f 00 00 e8 5b 9f bb 5e 5e 00 00 68 22 c5 c8 f7 7f 00 00 e8 4b 9f bb 5e 5e 00 00 c8 22 c5 c8 f7 7f 00 00 e8 3b 9f bb 5e 5e 00 00 28 23 c5 c8 f7 7f 00 00 e8 2b 9f bb 5e 5e 00 00 88 23 c5 c8 f7 7f 00 00 00 00 00 00 00 00 00 00
10        | 7ff7c86ab730h   | 243     | hex://root/BitConvert?GetBytes#GetBytes_g[8u](uspan8u,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<byte>(ReadOnlySpan<byte> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 64 99 09 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 e0 8c c4 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 14 99 09 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 68 8d c4 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 16 44 ce 5e e8 b9 98 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
11        | 7ff7c86ab780h   | 163     | hex://root/BitConvert?GetBytes#GetBytes_g[8i](uspan8i,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<sbyte>(ReadOnlySpan<sbyte> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 14 99 09 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 68 8d c4 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 16 44 ce 5e e8 b9 98 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
12        | 7ff7c86ab7d0h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[16u](uspan16u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ushort>(ReadOnlySpan<ushort> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 16 44 ce 5e e8 b9 98 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
13        | 7ff7c86ab830h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[16i](uspan16i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<short>(ReadOnlySpan<short> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 b6 43 ce 5e e8 59 98 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
14        | 7ff7c86ab890h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[32u](uspan32u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<uint>(ReadOnlySpan<uint> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 56 43 ce 5e e8 f9 97 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
15        | 7ff7c86ab8f0h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[32i](uspan32i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<int>(ReadOnlySpan<int> src, int offset, int count)                                | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 f6 42 ce 5e e8 99 97 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
16        | 7ff7c86ab950h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[64u](uspan64u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ulong>(ReadOnlySpan<ulong> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 96 42 ce 5e e8 39 97 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
17        | 7ff7c86ab9b0h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[64i](uspan64i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<long>(ReadOnlySpan<long> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 36 42 ce 5e e8 d9 96 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
18        | 7ff7c86aba10h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[32f](uspan32f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<float>(ReadOnlySpan<float> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 d6 41 ce 5e e8 79 96 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
19        | 7ff7c86aba70h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[64f](uspan64f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<double>(ReadOnlySpan<double> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 76 41 ce 5e e8 19 96 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
20        | 7ff7c86abad0h   | 55      | hex://root/BitConvert?GetBytes#GetBytes_g[8u](8u~in,span8u)                                                   | void GetBytes<byte>(in byte src, Span<byte> dst)                                                              | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 0f b6 09 88 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
21        | 7ff7c86abb10h   | 247     | hex://root/BitConvert?GetBytes#GetBytes_g[8i](8i~in,span8u)                                                   | void GetBytes<sbyte>(in sbyte src, Span<byte> dst)                                                            | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f be 09 88 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 a0 94 c4 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 0f b7 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 28 95 c4 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f bf 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 b0 95 c4 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
22        | 7ff7c86abb50h   | 183     | hex://root/BitConvert?GetBytes#GetBytes_g[16u](16u~in,span8u)                                                 | void GetBytes<ushort>(in ushort src, Span<byte> dst)                                                          | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 0f b7 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 28 95 c4 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f bf 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 b0 95 c4 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
23        | 7ff7c86abb90h   | 119     | hex://root/BitConvert?GetBytes#GetBytes_g[16i](16i~in,span8u)                                                 | void GetBytes<short>(in short src, Span<byte> dst)                                                            | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f bf 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 b0 95 c4 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
24        | 7ff7c86abbd0h   | 55      | hex://root/BitConvert?GetBytes#GetBytes_g[32u](32u~in,span8u)                                                 | void GetBytes<uint>(in uint src, Span<byte> dst)                                                              | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
25        | 7ff7c86abc10h   | 55      | hex://root/BitConvert?GetBytes#GetBytes_g[32i](32i~in,span8u)                                                 | void GetBytes<int>(in int src, Span<byte> dst)                                                                | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
26        | 7ff7c86abc50h   | 291     | hex://root/BitConvert?GetBytes#GetBytes_g[64u](64u~in,span8u)                                                 | void GetBytes<ulong>(in ulong src, Span<byte> dst)                                                            | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 8b 09 48 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 48 97 c4 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 8b 09 48 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 d0 97 c4 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fa 10 01 c5 fa 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 58 98 c4 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 f8 98 c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
27        | 7ff7c86abc90h   | 227     | hex://root/BitConvert?GetBytes#GetBytes_g[64i](64i~in,span8u)                                                 | void GetBytes<long>(in long src, Span<byte> dst)                                                              | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 8b 09 48 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 d0 97 c4 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fa 10 01 c5 fa 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 58 98 c4 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 f8 98 c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
28        | 7ff7c86abcd0h   | 163     | hex://root/BitConvert?GetBytes#GetBytes_g[32f](32f~in,span8u)                                                 | void GetBytes<float>(in float src, Span<byte> dst)                                                            | 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fa 10 01 c5 fa 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 58 98 c4 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 f8 98 c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
29        | 7ff7c86abd10h   | 99      | hex://root/BitConvert?GetBytes#GetBytes_g[64f](64f~in,span8u)                                                 | void GetBytes<double>(in double src, Span<byte> dst)                                                          | 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 f8 98 c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
30        | 7ff7c86abd50h   | 35      | hex://root/BitConvert?ToInt16#ToInt16_(uspan8u,32i)                                                           | short ToInt16(ReadOnlySpan<byte> src, int offset)                                                             | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
31        | 7ff7c86abd80h   | 295     | hex://root/BitConvert?ToUInt16#ToUInt16_(uspan8u,32i)                                                         | ushort ToUInt16(ReadOnlySpan<byte> src, int offset)                                                           | 0f 1f 44 00 00 48 8b 01 48 63 d2 0f b7 04 10 c3 19 00 00 00 40 00 00 00 f8 99 c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 78 9a c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 f8 9a c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 78 9b c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 e0 9b c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
32        | 7ff7c86abda0h   | 263     | hex://root/BitConvert?ToInt32#ToInt32_(uspan8u,32i)                                                           | int ToInt32(ReadOnlySpan<byte> src, int offset)                                                               | 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 78 9a c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 f8 9a c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 78 9b c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 e0 9b c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
33        | 7ff7c86abdc0h   | 231     | hex://root/BitConvert?ToUInt32#ToUInt32_(uspan8u,32i)                                                         | uint ToUInt32(ReadOnlySpan<byte> src, int offset)                                                             | 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 f8 9a c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 78 9b c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 e0 9b c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
34        | 7ff7c86abde0h   | 199     | hex://root/BitConvert?ToInt64#ToInt64_(uspan8u,32i)                                                           | long ToInt64(ReadOnlySpan<byte> src, int offset)                                                              | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 78 9b c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 e0 9b c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
35        | 7ff7c86abe00h   | 167     | hex://root/BitConvert?ToUInt64#ToUInt64_(uspan8u,32i)                                                         | ulong ToUInt64(ReadOnlySpan<byte> src, int offset)                                                            | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 e0 9b c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
36        | 7ff7c86abe20h   | 135     | hex://root/BitConvert?ToSingle#ToSingle_(32i)                                                                 | float ToSingle(int src)                                                                                       | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
37        | 7ff7c86abe50h   | 87      | hex://root/BitConvert?ToSingle#ToSingle_(32u)                                                                 | float ToSingle(uint src)                                                                                      | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
38        | 7ff7c86abe80h   | 39      | hex://root/BitConvert?ToDouble#ToDouble_(64i)                                                                 | double ToDouble(long src)                                                                                     | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
39        | 7ff7c86abeb0h   | 39      | hex://root/BitConvert?ToDouble#ToDouble_(64u)                                                                 | double ToDouble(ulong src)                                                                                    | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
40        | 7ff7c86abee0h   | 135     | hex://root/BitConvert?ToInt32#ToInt32_(32f)                                                                   | int ToInt32(float src)                                                                                        | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 88 9d c4 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 9d c4 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
41        | 7ff7c86abf10h   | 87      | hex://root/BitConvert?ToUInt32#ToUInt32_(32f)                                                                 | uint ToUInt32(float src)                                                                                      | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 9d c4 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
42        | 7ff7c86abf40h   | 39      | hex://root/BitConvert?ToInt64#ToInt64_(64f)                                                                   | long ToInt64(double src)                                                                                      | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
43        | 7ff7c86abf70h   | 39      | hex://root/BitConvert?ToUInt64#ToUInt64_(64f)                                                                 | ulong ToUInt64(double src)                                                                                    | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
