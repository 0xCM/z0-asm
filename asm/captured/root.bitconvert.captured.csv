Sequence  | Address         | Length  | Uri                                                                                                           | OpSig                                                                                                         | Data
0         | 7ff7c86a4210h   | 87      | hex://root/bitconvert?GetBytes#GetBytes_g[8u](8u~in)                                                          | Span<byte> GetBytes<byte>(in byte src)                                                                        | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 01 00 00 00 e8 b0 2b bc 5e 48 83 c0 10 ba 01 00 00 00 0f b6 0f 88 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
1         | 7ff7c86a4270h   | 87      | hex://root/bitconvert?GetBytes#GetBytes_g[8i](8i~in)                                                          | Span<byte> GetBytes<sbyte>(in sbyte src)                                                                      | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 01 00 00 00 e8 50 2b bc 5e 48 83 c0 10 ba 01 00 00 00 48 0f be 0f 88 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
2         | 7ff7c86a42d0h   | 1112    | hex://root/bitconvert?GetBytes#GetBytes_g[16u](16u~in)                                                        | Span<byte> GetBytes<ushort>(in ushort src)                                                                    | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 02 00 00 00 e8 f0 2a bc 5e 48 83 c0 10 ba 02 00 00 00 0f b7 0f 66 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 02 00 00 00 00 00 00 00 e8 13 13 bc 5e 5e 00 00 90 bc c2 c8 f7 7f 00 00 e8 03 13 bc 5e 5e 00 00 f0 bc c2 c8 f7 7f 00 00 e8 f3 12 bc 5e 5e 00 00 50 bd c2 c8 f7 7f 00 00 e8 e3 12 bc 5e 5e 00 00 b0 bd c2 c8 f7 7f 00 00 e8 d3 12 bc 5e 5e 00 00 10 be c2 c8 f7 7f 00 00 e8 c3 12 bc 5e 5e 00 00 70 be c2 c8 f7 7f 00 00 e8 b3 12 bc 5e 5e 00 00 d0 be c2 c8 f7 7f 00 00 e8 a3 12 bc 5e 5e 00 00 30 bf c2 c8 f7 7f 00 00 e8 93 12 bc 5e 5e 00 00 90 bf c2 c8 f7 7f 00 00 e8 83 12 bc 5e 5e 00 00 f0 bf c2 c8 f7 7f 00 00 e8 73 12 bc 5e 5e 00 00 50 c0 c2 c8 f7 7f 00 00 e8 63 12 bc 5e 5e 00 00 b0 c0 c2 c8 f7 7f 00 00 e8 53 12 bc 5e 5e 00 00 10 c1 c2 c8 f7 7f 00 00 e8 43 12 bc 5e 5e 00 00 70 c1 c2 c8 f7 7f 00 00 e8 33 12 bc 5e 5e 00 00 d0 c1 c2 c8 f7 7f 00 00 e8 23 12 bc 5e 5e 00 00 30 c2 c2 c8 f7 7f 00 00 e8 13 12 bc 5e 5e 00 00 90 c2 c2 c8 f7 7f 00 00 e8 03 12 bc 5e 5e 00 00 f0 c2 c2 c8 f7 7f 00 00 e8 f3 11 bc 5e 5e 00 00 50 c3 c2 c8 f7 7f 00 00 e8 e3 11 bc 5e 5e 00 01 e8 db 11 bc 5e 5e 01 00 b8 c4 c2 c8 f7 7f 00 00 e8 cb 11 bc 5e 5e 00 18 e8 c3 11 bc 5e 5e 01 17 e8 bb 11 bc 5e 5e 02 16 e8 b3 11 bc 5e 5e 03 15 e8 ab 11 bc 5e 5e 04 14 e8 a3 11 bc 5e 5e 05 13 e8 9b 11 bc 5e 5e 06 12 e8 93 11 bc 5e 5e 07 11 e8 8b 11 bc 5e 5e 08 10 e8 83 11 bc 5e 5e 09 0f e8 7b 11 bc 5e 5e 0a 0e e8 73 11 bc 5e 5e 0b 0d e8 6b 11 bc 5e 5e 0c 0c e8 63 11 bc 5e 5e 0d 0b e8 5b 11 bc 5e 5e 0e 0a e8 53 11 bc 5e 5e 0f 09 e8 4b 11 bc 5e 5e 10 08 e8 43 11 bc 5e 5e 11 07 e8 3b 11 bc 5e 5e 12 06 e8 33 11 bc 5e 5e 13 05 e8 2b 11 bc 5e 5e 14 04 e8 23 11 bc 5e 5e 15 03 e8 1b 11 bc 5e 5e 16 02 e8 13 11 bc 5e 5e 17 01 e8 0b 11 bc 5e 5e 18 00 c0 c3 c2 c8 f7 7f 00 00 e8 fb 10 bc 5e 5e 00 00 b8 c6 c2 c8 f7 7f 00 00 e8 eb 10 bc 5e 5e 00 00 18 c7 c2 c8 f7 7f 00 00 e8 db 10 bc 5e 5e 00 00 78 c7 c2 c8 f7 7f 00 00 e8 cb 10 bc 5e 5e 00 00 d8 c7 c2 c8 f7 7f 00 00 e8 bb 10 bc 5e 5e 00 00 38 c8 c2 c8 f7 7f 00 00 e8 ab 10 bc 5e 5e 00 00 98 c8 c2 c8 f7 7f 00 00 e8 9b 10 bc 5e 5e 00 00 f8 c8 c2 c8 f7 7f 00 00 e8 8b 10 bc 5e 5e 00 00 58 c9 c2 c8 f7 7f 00 00 e8 7b 10 bc 5e 5e 00 00 b8 c9 c2 c8 f7 7f 00 00 e8 6b 10 bc 5e 5e 00 00 18 ca c2 c8 f7 7f 00 00 e8 5b 10 bc 5e 5e 00 00 78 ca c2 c8 f7 7f 00 00 e8 4b 10 bc 5e 5e 00 00 d8 ca c2 c8 f7 7f 00 00 e8 3b 10 bc 5e 5e 00 00 38 cb c2 c8 f7 7f 00 00 e8 2b 10 bc 5e 5e 00 00 98 cb c2 c8 f7 7f 00 00 e8 1b 10 bc 5e 5e 00 00 f8 cb c2 c8 f7 7f 00 00 e8 0b 10 bc 5e 5e 00 00 58 cc c2 c8 f7 7f 00 00 e8 fb 0f bc 5e 5e 00 00 b8 cc c2 c8 f7 7f 00 00 e8 eb 0f bc 5e 5e 00 00 18 cd c2 c8 f7 7f 00 00 e8 db 0f bc 5e 5e 00 00 78 cd c2 c8 f7 7f 00 00 e8 cb 0f bc 5e 5e 00 00 d8 cd c2 c8 f7 7f 00 00 e8 bb 0f bc 5e 5e 00 00 38 ce c2 c8 f7 7f 00 00 e8 ab 0f bc 5e 5e 00 00 98 ce c2 c8 f7 7f 00 00 e8 9b 0f bc 5e 5e 00 00 f8 ce c2 c8 f7 7f 00 00 e8 8b 0f bc 5e 5e 00 00 58 cf c2 c8 f7 7f 00 00 e8 7b 0f bc 5e 5e 00 00 b8 cf c2 c8 f7 7f 00 00 e8 6b 0f bc 5e 5e 00 00 18 d0 c2 c8 f7 7f 00 00 e8 5b 0f bc 5e 5e 00 00 78 d0 c2 c8 f7 7f 00 00 e8 4b 0f bc 5e 5e 00 00 d8 d0 c2 c8 f7 7f 00 00 e8 3b 0f bc 5e 5e 00 00 38 d1 c2 c8 f7 7f 00 00 e8 2b 0f bc 5e 5e 00 00 98 d1 c2 c8 f7 7f 00 00 00 00 00 00 00 00 00 00
3         | 7ff7c86a4730h   | 87      | hex://root/bitconvert?GetBytes#GetBytes_g[16i](16i~in)                                                        | Span<byte> GetBytes<short>(in short src)                                                                      | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 02 00 00 00 e8 90 26 bc 5e 48 83 c0 10 ba 02 00 00 00 48 0f bf 0f 66 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
4         | 7ff7c86a4790h   | 87      | hex://root/bitconvert?GetBytes#GetBytes_g[32u](32u~in)                                                        | Span<byte> GetBytes<uint>(in uint src)                                                                        | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 04 00 00 00 e8 30 26 bc 5e 48 83 c0 10 ba 04 00 00 00 8b 0f 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
5         | 7ff7c86a47f0h   | 87      | hex://root/bitconvert?GetBytes#GetBytes_g[32i](32i~in)                                                        | Span<byte> GetBytes<int>(in int src)                                                                          | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 04 00 00 00 e8 d0 25 bc 5e 48 83 c0 10 ba 04 00 00 00 8b 0f 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
6         | 7ff7c86a4850h   | 87      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](64u~in)                                                        | Span<byte> GetBytes<ulong>(in ulong src)                                                                      | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 08 00 00 00 e8 70 25 bc 5e 48 83 c0 10 ba 08 00 00 00 48 8b 0f 48 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
7         | 7ff7c86a48b0h   | 87      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](64i~in)                                                        | Span<byte> GetBytes<long>(in long src)                                                                        | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 08 00 00 00 e8 10 25 bc 5e 48 83 c0 10 ba 08 00 00 00 48 8b 0f 48 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
8         | 7ff7c86a4910h   | 435     | hex://root/bitconvert?GetBytes#GetBytes_g[32f](32f~in)                                                        | Span<byte> GetBytes<float>(in float src)                                                                      | 57 56 48 83 ec 28 c5 f8 77 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 04 00 00 00 e8 ad 24 bc 5e 48 83 c0 10 ba 04 00 00 00 c5 fa 10 07 c5 fa 11 00 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 cc cc 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 18 d3 c1 c8 f7 7f 00 00 57 56 48 83 ec 28 c5 f8 77 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 08 00 00 00 e8 4d 24 bc 5e 48 83 c0 10 ba 08 00 00 00 c5 fb 10 07 c5 fb 11 00 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 cc cc 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 c0 d4 c1 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 9c 08 0c ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 90 d5 c1 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 4c 08 0c ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 18 d6 c1 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 76 b1 ce 5e e8 f1 07 0c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
9         | 7ff7c86a4970h   | 339     | hex://root/bitconvert?GetBytes#GetBytes_g[64f](64f~in)                                                        | Span<byte> GetBytes<double>(in double src)                                                                    | 57 56 48 83 ec 28 c5 f8 77 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 08 00 00 00 e8 4d 24 bc 5e 48 83 c0 10 ba 08 00 00 00 c5 fb 10 07 c5 fb 11 00 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 cc cc 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 c0 d4 c1 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 9c 08 0c ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 90 d5 c1 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 4c 08 0c ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 18 d6 c1 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 76 b1 ce 5e e8 f1 07 0c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
10        | 7ff7c86a49d0h   | 243     | hex://root/bitconvert?GetBytes#GetBytes_g[8u](uspan8u,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<byte>(ReadOnlySpan<byte> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 9c 08 0c ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 90 d5 c1 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 4c 08 0c ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 18 d6 c1 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 76 b1 ce 5e e8 f1 07 0c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
11        | 7ff7c86a4a20h   | 163     | hex://root/bitconvert?GetBytes#GetBytes_g[8i](uspan8i,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<sbyte>(ReadOnlySpan<sbyte> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 4c 08 0c ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 18 d6 c1 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 76 b1 ce 5e e8 f1 07 0c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
12        | 7ff7c86a4a70h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[16u](uspan16u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ushort>(ReadOnlySpan<ushort> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 76 b1 ce 5e e8 f1 07 0c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
13        | 7ff7c86a4ad0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[16i](uspan16i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<short>(ReadOnlySpan<short> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 16 b1 ce 5e e8 91 07 0c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
14        | 7ff7c86a4b30h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32u](uspan32u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<uint>(ReadOnlySpan<uint> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 b6 b0 ce 5e e8 31 07 0c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
15        | 7ff7c86a4b90h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32i](uspan32i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<int>(ReadOnlySpan<int> src, int offset, int count)                                | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 56 b0 ce 5e e8 d1 06 0c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
16        | 7ff7c86a4bf0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](uspan64u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ulong>(ReadOnlySpan<ulong> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 f6 af ce 5e e8 71 06 0c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
17        | 7ff7c86a4c50h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](uspan64i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<long>(ReadOnlySpan<long> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 96 af ce 5e e8 11 06 0c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
18        | 7ff7c86a4cb0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](uspan32f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<float>(ReadOnlySpan<float> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 36 af ce 5e e8 b1 05 0c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
19        | 7ff7c86a4d10h   | 736     | hex://root/bitconvert?GetBytes#GetBytes_g[64f](uspan64f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<double>(ReadOnlySpan<double> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 d6 ae ce 5e e8 51 05 0c ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 e8 d3 08 bc 5e 5e 00 00 f8 d1 c2 c8 f7 7f 00 00 e8 c3 08 bc 5e 5e 00 00 58 d2 c2 c8 f7 7f 00 00 e8 b3 08 bc 5e 5e 00 00 b8 d2 c2 c8 f7 7f 00 00 e8 a3 08 bc 5e 5e 00 00 18 d3 c2 c8 f7 7f 00 00 e8 93 08 bc 5e 5e 00 00 78 d3 c2 c8 f7 7f 00 00 e8 83 08 bc 5e 5e 00 00 d8 d3 c2 c8 f7 7f 00 00 e8 73 08 bc 5e 5e 00 00 38 d4 c2 c8 f7 7f 00 00 e8 63 08 bc 5e 5e 00 00 98 d4 c2 c8 f7 7f 00 00 e8 53 08 bc 5e 5e 00 00 f8 d4 c2 c8 f7 7f 00 00 e8 43 08 bc 5e 5e 00 00 58 d5 c2 c8 f7 7f 00 00 e8 33 08 bc 5e 5e 00 00 b8 d5 c2 c8 f7 7f 00 00 e8 23 08 bc 5e 5e 00 00 18 d6 c2 c8 f7 7f 00 00 e8 13 08 bc 5e 5e 00 00 78 d6 c2 c8 f7 7f 00 00 e8 03 08 bc 5e 5e 00 00 d8 d6 c2 c8 f7 7f 00 00 e8 f3 07 bc 5e 5e 00 00 38 d7 c2 c8 f7 7f 00 00 e8 e3 07 bc 5e 5e 00 00 98 d7 c2 c8 f7 7f 00 00 e8 d3 07 bc 5e 5e 00 00 f8 d7 c2 c8 f7 7f 00 00 e8 c3 07 bc 5e 5e 00 00 58 d8 c2 c8 f7 7f 00 00 e8 b3 07 bc 5e 5e 00 00 b8 d8 c2 c8 f7 7f 00 00 e8 a3 07 bc 5e 5e 00 00 18 d9 c2 c8 f7 7f 00 00 e8 93 07 bc 5e 5e 00 00 78 d9 c2 c8 f7 7f 00 00 e8 83 07 bc 5e 5e 00 00 d8 d9 c2 c8 f7 7f 00 00 e8 73 07 bc 5e 5e 00 00 38 da c2 c8 f7 7f 00 00 e8 63 07 bc 5e 5e 00 00 98 da c2 c8 f7 7f 00 00 e8 53 07 bc 5e 5e 00 00 f8 da c2 c8 f7 7f 00 00 e8 43 07 bc 5e 5e 00 00 58 db c2 c8 f7 7f 00 00 e8 33 07 bc 5e 5e 00 00 b8 db c2 c8 f7 7f 00 00 e8 23 07 bc 5e 5e 00 00 18 dc c2 c8 f7 7f 00 00 e8 13 07 bc 5e 5e 00 00 78 dc c2 c8 f7 7f 00 00 e8 03 07 bc 5e 5e 00 00 d8 dc c2 c8 f7 7f 00 00 e8 f3 06 bc 5e 5e 00 00 38 dd c2 c8 f7 7f 00 00 e8 e3 06 bc 5e 5e 00 00 98 dd c2 c8 f7 7f 00 00 e8 d3 06 bc 5e 5e 00 00 f8 dd c2 c8 f7 7f 00 00 e8 c3 06 bc 5e 5e 00 00 58 de c2 c8 f7 7f 00 00 e8 b3 06 bc 5e 5e 00 00 b8 de c2 c8 f7 7f 00 00 e8 a3 06 bc 5e 5e 00 00 18 df c2 c8 f7 7f 00 00 e8 93 06 bc 5e 5e 00 00 78 df c2 c8 f7 7f 00 00 e8 83 06 bc 5e 5e 00 00 d8 df c2 c8 f7 7f 00 00 e8 73 06 bc 5e 5e 00 00 38 e0 c2 c8 f7 7f 00 00 e8 63 06 bc 5e 5e 00 00 98 e0 c2 c8 f7 7f 00 00 00 00 00 00 00 00 00 00
20        | 7ff7c86a5170h   | 55      | hex://root/bitconvert?GetBytes#GetBytes_g[8u](8u~in,span8u)                                                   | void GetBytes<byte>(in byte src, Span<byte> dst)                                                              | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 0f b6 09 88 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
21        | 7ff7c86a51b0h   | 247     | hex://root/bitconvert?GetBytes#GetBytes_g[8i](8i~in,span8u)                                                   | void GetBytes<sbyte>(in sbyte src, Span<byte> dst)                                                            | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f be 09 88 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 50 dd c1 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 0f b7 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 d8 dd c1 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f bf 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 60 de c1 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
22        | 7ff7c86a51f0h   | 183     | hex://root/bitconvert?GetBytes#GetBytes_g[16u](16u~in,span8u)                                                 | void GetBytes<ushort>(in ushort src, Span<byte> dst)                                                          | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 0f b7 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 d8 dd c1 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f bf 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 60 de c1 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
23        | 7ff7c86a5230h   | 119     | hex://root/bitconvert?GetBytes#GetBytes_g[16i](16i~in,span8u)                                                 | void GetBytes<short>(in short src, Span<byte> dst)                                                            | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f bf 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 60 de c1 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
24        | 7ff7c86a5270h   | 55      | hex://root/bitconvert?GetBytes#GetBytes_g[32u](32u~in,span8u)                                                 | void GetBytes<uint>(in uint src, Span<byte> dst)                                                              | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
25        | 7ff7c86a52b0h   | 55      | hex://root/bitconvert?GetBytes#GetBytes_g[32i](32i~in,span8u)                                                 | void GetBytes<int>(in int src, Span<byte> dst)                                                                | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
26        | 7ff7c86a52f0h   | 291     | hex://root/bitconvert?GetBytes#GetBytes_g[64u](64u~in,span8u)                                                 | void GetBytes<ulong>(in ulong src, Span<byte> dst)                                                            | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 8b 09 48 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 f8 df c1 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 8b 09 48 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 80 e0 c1 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fa 10 01 c5 fa 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 08 e1 c1 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 38 e2 c1 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
27        | 7ff7c86a5330h   | 227     | hex://root/bitconvert?GetBytes#GetBytes_g[64i](64i~in,span8u)                                                 | void GetBytes<long>(in long src, Span<byte> dst)                                                              | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 8b 09 48 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 80 e0 c1 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fa 10 01 c5 fa 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 08 e1 c1 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 38 e2 c1 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
28        | 7ff7c86a5370h   | 163     | hex://root/bitconvert?GetBytes#GetBytes_g[32f](32f~in,span8u)                                                 | void GetBytes<float>(in float src, Span<byte> dst)                                                            | 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fa 10 01 c5 fa 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 08 e1 c1 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 38 e2 c1 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
29        | 7ff7c86a53b0h   | 99      | hex://root/bitconvert?GetBytes#GetBytes_g[64f](64f~in,span8u)                                                 | void GetBytes<double>(in double src, Span<byte> dst)                                                          | 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 38 e2 c1 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
30        | 7ff7c86a53f0h   | 35      | hex://root/bitconvert?ToInt16#ToInt16_(uspan8u,32i)                                                           | short ToInt16(ReadOnlySpan<byte> src, int offset)                                                             | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
31        | 7ff7c86a5420h   | 295     | hex://root/bitconvert?ToUInt16#ToUInt16_(uspan8u,32i)                                                         | ushort ToUInt16(ReadOnlySpan<byte> src, int offset)                                                           | 0f 1f 44 00 00 48 8b 01 48 63 d2 0f b7 04 10 c3 19 00 00 00 40 00 00 00 38 e3 c1 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 b8 e3 c1 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 38 e4 c1 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 b8 e4 c1 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 20 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 70 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
32        | 7ff7c86a5440h   | 263     | hex://root/bitconvert?ToInt32#ToInt32_(uspan8u,32i)                                                           | int ToInt32(ReadOnlySpan<byte> src, int offset)                                                               | 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 b8 e3 c1 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 38 e4 c1 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 b8 e4 c1 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 20 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 70 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
33        | 7ff7c86a5460h   | 231     | hex://root/bitconvert?ToUInt32#ToUInt32_(uspan8u,32i)                                                         | uint ToUInt32(ReadOnlySpan<byte> src, int offset)                                                             | 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 38 e4 c1 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 b8 e4 c1 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 20 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 70 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
34        | 7ff7c86a5480h   | 199     | hex://root/bitconvert?ToInt64#ToInt64_(uspan8u,32i)                                                           | long ToInt64(ReadOnlySpan<byte> src, int offset)                                                              | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 b8 e4 c1 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 20 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 70 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
35        | 7ff7c86a54a0h   | 167     | hex://root/bitconvert?ToUInt64#ToUInt64_(uspan8u,32i)                                                         | ulong ToUInt64(ReadOnlySpan<byte> src, int offset)                                                            | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 20 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 70 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
36        | 7ff7c86a54c0h   | 135     | hex://root/bitconvert?ToSingle#ToSingle_(32i)                                                                 | float ToSingle(int src)                                                                                       | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 70 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
37        | 7ff7c86a54f0h   | 87      | hex://root/bitconvert?ToSingle#ToSingle_(32u)                                                                 | float ToSingle(uint src)                                                                                      | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 e5 c1 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
38        | 7ff7c86a5520h   | 39      | hex://root/bitconvert?ToDouble#ToDouble_(64i)                                                                 | double ToDouble(long src)                                                                                     | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
39        | 7ff7c86a5550h   | 39      | hex://root/bitconvert?ToDouble#ToDouble_(64u)                                                                 | double ToDouble(ulong src)                                                                                    | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
40        | 7ff7c86a5580h   | 135     | hex://root/bitconvert?ToInt32#ToInt32_(32f)                                                                   | int ToInt32(float src)                                                                                        | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 c8 e6 c1 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 18 e7 c1 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
41        | 7ff7c86a55b0h   | 87      | hex://root/bitconvert?ToUInt32#ToUInt32_(32f)                                                                 | uint ToUInt32(float src)                                                                                      | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 18 e7 c1 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
42        | 7ff7c86a55e0h   | 39      | hex://root/bitconvert?ToInt64#ToInt64_(64f)                                                                   | long ToInt64(double src)                                                                                      | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
43        | 7ff7c86a5610h   | 39      | hex://root/bitconvert?ToUInt64#ToUInt64_(64f)                                                                 | ulong ToUInt64(double src)                                                                                    | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
