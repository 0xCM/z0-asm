Sequence  | Address         | Length  | Uri                                                                                                           | OpSig                                                                                                         | Data
0         | 7ff7c864d330h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[8u](8u~in)                                                          | Span<byte> GetBytes<byte>(in byte src)                                                                        | 0f 1f 44 00 00 48 89 11 c7 41 08 01 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
1         | 7ff7c864d360h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[8i](8i~in)                                                          | Span<byte> GetBytes<sbyte>(in sbyte src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 01 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
2         | 7ff7c864d390h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[16u](16u~in)                                                        | Span<byte> GetBytes<ushort>(in ushort src)                                                                    | 0f 1f 44 00 00 48 89 11 c7 41 08 02 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
3         | 7ff7c864d3c0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[16i](16i~in)                                                        | Span<byte> GetBytes<short>(in short src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 02 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
4         | 7ff7c864d3f0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32u](32u~in)                                                        | Span<byte> GetBytes<uint>(in uint src)                                                                        | 0f 1f 44 00 00 48 89 11 c7 41 08 04 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
5         | 7ff7c864d420h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32i](32i~in)                                                        | Span<byte> GetBytes<int>(in int src)                                                                          | 0f 1f 44 00 00 48 89 11 c7 41 08 04 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
6         | 7ff7c864d450h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](64u~in)                                                        | Span<byte> GetBytes<ulong>(in ulong src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 08 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
7         | 7ff7c864d480h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](64i~in)                                                        | Span<byte> GetBytes<long>(in long src)                                                                        | 0f 1f 44 00 00 48 89 11 c7 41 08 08 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
8         | 7ff7c864d4b0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](32f~in)                                                        | Span<byte> GetBytes<float>(in float src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 04 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
9         | 7ff7c864d4e0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64f](64f~in)                                                        | Span<byte> GetBytes<double>(in double src)                                                                    | 0f 1f 44 00 00 48 89 11 c7 41 08 08 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
10        | 7ff7c864d510h   | 1048    | hex://root/bitconvert?GetBytes#GetBytes_g[8u](uspan8u,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<byte>(ReadOnlySpan<byte> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 c4 75 0f ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 78 2e b5 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 74 75 0f ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 e8 8b 80 c1 5e 5e 00 00 58 f7 b4 c8 f7 7f 00 00 e8 7b 80 c1 5e 5e 00 00 b8 f7 b4 c8 f7 7f 00 00 e8 6b 80 c1 5e 5e 00 00 18 f8 b4 c8 f7 7f 00 00 e8 5b 80 c1 5e 5e 00 00 78 f8 b4 c8 f7 7f 00 00 e8 4b 80 c1 5e 5e 00 00 d8 f8 b4 c8 f7 7f 00 00 e8 3b 80 c1 5e 5e 00 00 38 f9 b4 c8 f7 7f 00 00 e8 2b 80 c1 5e 5e 00 00 98 f9 b4 c8 f7 7f 00 00 e8 1b 80 c1 5e 5e 00 00 f8 f9 b4 c8 f7 7f 00 00 e8 0b 80 c1 5e 5e 00 00 58 fa b4 c8 f7 7f 00 00 e8 fb 7f c1 5e 5e 00 00 b8 fa b4 c8 f7 7f 00 00 e8 eb 7f c1 5e 5e 00 00 18 fb b4 c8 f7 7f 00 00 e8 db 7f c1 5e 5e 00 00 78 fb b4 c8 f7 7f 00 00 e8 cb 7f c1 5e 5e 00 00 d8 fb b4 c8 f7 7f 00 00 e8 bb 7f c1 5e 5e 00 00 38 fc b4 c8 f7 7f 00 00 e8 ab 7f c1 5e 5e 00 00 98 fc b4 c8 f7 7f 00 00 e8 9b 7f c1 5e 5e 00 00 f8 fc b4 c8 f7 7f 00 00 e8 8b 7f c1 5e 5e 00 00 58 fd b4 c8 f7 7f 00 00 e8 7b 7f c1 5e 5e 00 00 b8 fd b4 c8 f7 7f 00 00 e8 6b 7f c1 5e 5e 00 00 18 fe b4 c8 f7 7f 00 00 e8 5b 7f c1 5e 5e 00 00 78 fe b4 c8 f7 7f 00 00 e8 4b 7f c1 5e 5e 00 00 d8 fe b4 c8 f7 7f 00 00 e8 3b 7f c1 5e 5e 00 00 38 ff b4 c8 f7 7f 00 00 e8 2b 7f c1 5e 5e 00 00 98 ff b4 c8 f7 7f 00 00 e8 1b 7f c1 5e 5e 00 00 40 00 b6 c8 f7 7f 00 00 e8 0b 7f c1 5e 5e 00 00 a0 00 b6 c8 f7 7f 00 00 e8 fb 7e c1 5e 5e 00 00 00 01 b6 c8 f7 7f 00 00 e8 eb 7e c1 5e 5e 00 00 60 01 b6 c8 f7 7f 00 00 e8 db 7e c1 5e 5e 00 00 c0 01 b6 c8 f7 7f 00 00 e8 cb 7e c1 5e 5e 00 00 20 02 b6 c8 f7 7f 00 00 e8 bb 7e c1 5e 5e 00 00 80 02 b6 c8 f7 7f 00 00 e8 ab 7e c1 5e 5e 00 00 e0 02 b6 c8 f7 7f 00 00 e8 9b 7e c1 5e 5e 00 00 40 03 b6 c8 f7 7f 00 00 e8 8b 7e c1 5e 5e 00 00 a0 03 b6 c8 f7 7f 00 00 e8 7b 7e c1 5e 5e 00 00 00 04 b6 c8 f7 7f 00 00 e8 6b 7e c1 5e 5e 00 00 60 04 b6 c8 f7 7f 00 00 e8 5b 7e c1 5e 5e 00 00 c0 04 b6 c8 f7 7f 00 00 e8 4b 7e c1 5e 5e 00 00 20 05 b6 c8 f7 7f 00 00 e8 3b 7e c1 5e 5e 00 00 80 05 b6 c8 f7 7f 00 00 e8 2b 7e c1 5e 5e 00 00 e0 05 b6 c8 f7 7f 00 00 e8 1b 7e c1 5e 5e 00 00 40 06 b6 c8 f7 7f 00 00 e8 0b 7e c1 5e 5e 00 00 a0 06 b6 c8 f7 7f 00 00 e8 fb 7d c1 5e 5e 00 00 00 07 b6 c8 f7 7f 00 00 e8 eb 7d c1 5e 5e 00 00 60 07 b6 c8 f7 7f 00 00 e8 db 7d c1 5e 5e 00 00 c0 07 b6 c8 f7 7f 00 00 e8 cb 7d c1 5e 5e 00 00 20 08 b6 c8 f7 7f 00 00 e8 bb 7d c1 5e 5e 00 00 80 08 b6 c8 f7 7f 00 00 e8 ab 7d c1 5e 5e 00 00 e0 08 b6 c8 f7 7f 00 00 e8 9b 7d c1 5e 5e 00 00 40 09 b6 c8 f7 7f 00 00 e8 8b 7d c1 5e 5e 00 00 a0 09 b6 c8 f7 7f 00 00 e8 7b 7d c1 5e 5e 00 00 00 0a b6 c8 f7 7f 00 00 e8 6b 7d c1 5e 5e 00 00 60 0a b6 c8 f7 7f 00 00 e8 5b 7d c1 5e 5e 00 00 c0 0a b6 c8 f7 7f 00 00 e8 4b 7d c1 5e 5e 00 00 20 0b b6 c8 f7 7f 00 00 e8 3b 7d c1 5e 5e 00 00 80 0b b6 c8 f7 7f 00 00 e8 2b 7d c1 5e 5e 00 00 e0 0b b6 c8 f7 7f 00 00 00 00 00 00 00 00 00 00
11        | 7ff7c864d560h   | 968     | hex://root/bitconvert?GetBytes#GetBytes_g[8i](uspan8i,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<sbyte>(ReadOnlySpan<sbyte> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 74 75 0f ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 e8 8b 80 c1 5e 5e 00 00 58 f7 b4 c8 f7 7f 00 00 e8 7b 80 c1 5e 5e 00 00 b8 f7 b4 c8 f7 7f 00 00 e8 6b 80 c1 5e 5e 00 00 18 f8 b4 c8 f7 7f 00 00 e8 5b 80 c1 5e 5e 00 00 78 f8 b4 c8 f7 7f 00 00 e8 4b 80 c1 5e 5e 00 00 d8 f8 b4 c8 f7 7f 00 00 e8 3b 80 c1 5e 5e 00 00 38 f9 b4 c8 f7 7f 00 00 e8 2b 80 c1 5e 5e 00 00 98 f9 b4 c8 f7 7f 00 00 e8 1b 80 c1 5e 5e 00 00 f8 f9 b4 c8 f7 7f 00 00 e8 0b 80 c1 5e 5e 00 00 58 fa b4 c8 f7 7f 00 00 e8 fb 7f c1 5e 5e 00 00 b8 fa b4 c8 f7 7f 00 00 e8 eb 7f c1 5e 5e 00 00 18 fb b4 c8 f7 7f 00 00 e8 db 7f c1 5e 5e 00 00 78 fb b4 c8 f7 7f 00 00 e8 cb 7f c1 5e 5e 00 00 d8 fb b4 c8 f7 7f 00 00 e8 bb 7f c1 5e 5e 00 00 38 fc b4 c8 f7 7f 00 00 e8 ab 7f c1 5e 5e 00 00 98 fc b4 c8 f7 7f 00 00 e8 9b 7f c1 5e 5e 00 00 f8 fc b4 c8 f7 7f 00 00 e8 8b 7f c1 5e 5e 00 00 58 fd b4 c8 f7 7f 00 00 e8 7b 7f c1 5e 5e 00 00 b8 fd b4 c8 f7 7f 00 00 e8 6b 7f c1 5e 5e 00 00 18 fe b4 c8 f7 7f 00 00 e8 5b 7f c1 5e 5e 00 00 78 fe b4 c8 f7 7f 00 00 e8 4b 7f c1 5e 5e 00 00 d8 fe b4 c8 f7 7f 00 00 e8 3b 7f c1 5e 5e 00 00 38 ff b4 c8 f7 7f 00 00 e8 2b 7f c1 5e 5e 00 00 98 ff b4 c8 f7 7f 00 00 e8 1b 7f c1 5e 5e 00 00 40 00 b6 c8 f7 7f 00 00 e8 0b 7f c1 5e 5e 00 00 a0 00 b6 c8 f7 7f 00 00 e8 fb 7e c1 5e 5e 00 00 00 01 b6 c8 f7 7f 00 00 e8 eb 7e c1 5e 5e 00 00 60 01 b6 c8 f7 7f 00 00 e8 db 7e c1 5e 5e 00 00 c0 01 b6 c8 f7 7f 00 00 e8 cb 7e c1 5e 5e 00 00 20 02 b6 c8 f7 7f 00 00 e8 bb 7e c1 5e 5e 00 00 80 02 b6 c8 f7 7f 00 00 e8 ab 7e c1 5e 5e 00 00 e0 02 b6 c8 f7 7f 00 00 e8 9b 7e c1 5e 5e 00 00 40 03 b6 c8 f7 7f 00 00 e8 8b 7e c1 5e 5e 00 00 a0 03 b6 c8 f7 7f 00 00 e8 7b 7e c1 5e 5e 00 00 00 04 b6 c8 f7 7f 00 00 e8 6b 7e c1 5e 5e 00 00 60 04 b6 c8 f7 7f 00 00 e8 5b 7e c1 5e 5e 00 00 c0 04 b6 c8 f7 7f 00 00 e8 4b 7e c1 5e 5e 00 00 20 05 b6 c8 f7 7f 00 00 e8 3b 7e c1 5e 5e 00 00 80 05 b6 c8 f7 7f 00 00 e8 2b 7e c1 5e 5e 00 00 e0 05 b6 c8 f7 7f 00 00 e8 1b 7e c1 5e 5e 00 00 40 06 b6 c8 f7 7f 00 00 e8 0b 7e c1 5e 5e 00 00 a0 06 b6 c8 f7 7f 00 00 e8 fb 7d c1 5e 5e 00 00 00 07 b6 c8 f7 7f 00 00 e8 eb 7d c1 5e 5e 00 00 60 07 b6 c8 f7 7f 00 00 e8 db 7d c1 5e 5e 00 00 c0 07 b6 c8 f7 7f 00 00 e8 cb 7d c1 5e 5e 00 00 20 08 b6 c8 f7 7f 00 00 e8 bb 7d c1 5e 5e 00 00 80 08 b6 c8 f7 7f 00 00 e8 ab 7d c1 5e 5e 00 00 e0 08 b6 c8 f7 7f 00 00 e8 9b 7d c1 5e 5e 00 00 40 09 b6 c8 f7 7f 00 00 e8 8b 7d c1 5e 5e 00 00 a0 09 b6 c8 f7 7f 00 00 e8 7b 7d c1 5e 5e 00 00 00 0a b6 c8 f7 7f 00 00 e8 6b 7d c1 5e 5e 00 00 60 0a b6 c8 f7 7f 00 00 e8 5b 7d c1 5e 5e 00 00 c0 0a b6 c8 f7 7f 00 00 e8 4b 7d c1 5e 5e 00 00 20 0b b6 c8 f7 7f 00 00 e8 3b 7d c1 5e 5e 00 00 80 0b b6 c8 f7 7f 00 00 e8 2b 7d c1 5e 5e 00 00 e0 0b b6 c8 f7 7f 00 00 00 00 00 00 00 00 00 00
12        | 7ff7c864d9c0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[16u](uspan16u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ushort>(ReadOnlySpan<ushort> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 26 22 d4 5e e8 09 71 0f ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
13        | 7ff7c864da20h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[16i](uspan16i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<short>(ReadOnlySpan<short> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 c6 21 d4 5e e8 a9 70 0f ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
14        | 7ff7c864da80h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32u](uspan32u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<uint>(ReadOnlySpan<uint> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 66 21 d4 5e e8 49 70 0f ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
15        | 7ff7c864dae0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32i](uspan32i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<int>(ReadOnlySpan<int> src, int offset, int count)                                | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 06 21 d4 5e e8 e9 6f 0f ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
16        | 7ff7c864db40h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](uspan64u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ulong>(ReadOnlySpan<ulong> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 a6 20 d4 5e e8 89 6f 0f ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
17        | 7ff7c864dba0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](uspan64i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<long>(ReadOnlySpan<long> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 46 20 d4 5e e8 29 6f 0f ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
18        | 7ff7c864dc00h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](uspan32f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<float>(ReadOnlySpan<float> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 e6 1f d4 5e e8 c9 6e 0f ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
19        | 7ff7c864dc60h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64f](uspan64f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<double>(ReadOnlySpan<double> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 86 1f d4 5e e8 69 6e 0f ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
20        | 7ff7c864dcc0h   | 291     | hex://root/bitconvert?GetBytes#GetBytes_g[8u](8u~in,span8u)                                                   | void GetBytes<byte>(in byte src, Span<byte> dst)                                                              | 0f 1f 44 00 00 48 8b 02 0f b6 11 88 10 c3 00 00 19 00 00 00 40 00 00 00 b0 35 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f be 11 88 10 c3 00 19 00 00 00 40 00 00 00 38 36 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 0f b7 11 66 89 10 c3 00 19 00 00 00 40 00 00 00 c0 36 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 48 37 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 d0 37 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 58 38 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 e0 38 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 68 39 b5 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
21        | 7ff7c864dce0h   | 259     | hex://root/bitconvert?GetBytes#GetBytes_g[8i](8i~in,span8u)                                                   | void GetBytes<sbyte>(in sbyte src, Span<byte> dst)                                                            | 0f 1f 44 00 00 48 8b 02 48 0f be 11 88 10 c3 00 19 00 00 00 40 00 00 00 38 36 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 0f b7 11 66 89 10 c3 00 19 00 00 00 40 00 00 00 c0 36 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 48 37 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 d0 37 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 58 38 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 e0 38 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 68 39 b5 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
22        | 7ff7c864dd00h   | 227     | hex://root/bitconvert?GetBytes#GetBytes_g[16u](16u~in,span8u)                                                 | void GetBytes<ushort>(in ushort src, Span<byte> dst)                                                          | 0f 1f 44 00 00 48 8b 02 0f b7 11 66 89 10 c3 00 19 00 00 00 40 00 00 00 c0 36 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 48 37 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 d0 37 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 58 38 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 e0 38 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 68 39 b5 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
23        | 7ff7c864dd20h   | 195     | hex://root/bitconvert?GetBytes#GetBytes_g[16i](16i~in,span8u)                                                 | void GetBytes<short>(in short src, Span<byte> dst)                                                            | 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 48 37 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 d0 37 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 58 38 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 e0 38 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 68 39 b5 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
24        | 7ff7c864dd40h   | 163     | hex://root/bitconvert?GetBytes#GetBytes_g[32u](32u~in,span8u)                                                 | void GetBytes<uint>(in uint src, Span<byte> dst)                                                              | 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 d0 37 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 58 38 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 e0 38 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 68 39 b5 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
25        | 7ff7c864dd60h   | 131     | hex://root/bitconvert?GetBytes#GetBytes_g[32i](32i~in,span8u)                                                 | void GetBytes<int>(in int src, Span<byte> dst)                                                                | 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 58 38 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 e0 38 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 68 39 b5 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
26        | 7ff7c864dd80h   | 99      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](64u~in,span8u)                                                 | void GetBytes<ulong>(in ulong src, Span<byte> dst)                                                            | 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 e0 38 b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 68 39 b5 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
27        | 7ff7c864dda0h   | 67      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](64i~in,span8u)                                                 | void GetBytes<long>(in long src, Span<byte> dst)                                                              | 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 68 39 b5 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
28        | 7ff7c864ddc0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](32f~in,span8u)                                                 | void GetBytes<float>(in float src, Span<byte> dst)                                                            | c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
29        | 7ff7c864ddf0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64f](64f~in,span8u)                                                 | void GetBytes<double>(in double src, Span<byte> dst)                                                          | c5 f8 77 66 90 48 8b 02 c5 fb 10 01 c5 fb 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
30        | 7ff7c864de20h   | 35      | hex://root/bitconvert?ToInt16#ToInt16_(uspan8u,32i)                                                           | short ToInt16(ReadOnlySpan<byte> src, int offset)                                                             | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
31        | 7ff7c864de50h   | 295     | hex://root/bitconvert?ToUInt16#ToUInt16_(uspan8u,32i)                                                         | ushort ToUInt16(ReadOnlySpan<byte> src, int offset)                                                           | 0f 1f 44 00 00 48 8b 01 48 63 d2 0f b7 04 10 c3 19 00 00 00 40 00 00 00 78 3b b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 f8 3b b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 78 3c b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 c8 3c b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 30 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 80 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 e8 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
32        | 7ff7c864de70h   | 263     | hex://root/bitconvert?ToInt32#ToInt32_(uspan8u,32i)                                                           | int ToInt32(ReadOnlySpan<byte> src, int offset)                                                               | 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 f8 3b b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 78 3c b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 c8 3c b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 30 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 80 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 e8 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
33        | 7ff7c864de90h   | 231     | hex://root/bitconvert?ToUInt32#ToUInt32_(uspan8u,32i)                                                         | uint ToUInt32(ReadOnlySpan<byte> src, int offset)                                                             | 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 78 3c b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 c8 3c b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 30 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 80 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 e8 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
34        | 7ff7c864deb0h   | 199     | hex://root/bitconvert?ToInt64#ToInt64_(uspan8u,32i)                                                           | long ToInt64(ReadOnlySpan<byte> src, int offset)                                                              | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 c8 3c b5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 30 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 80 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 e8 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
35        | 7ff7c864ded0h   | 167     | hex://root/bitconvert?ToUInt64#ToUInt64_(uspan8u,32i)                                                         | ulong ToUInt64(ReadOnlySpan<byte> src, int offset)                                                            | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 30 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 80 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 e8 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
36        | 7ff7c864def0h   | 135     | hex://root/bitconvert?ToSingle#ToSingle_(32i)                                                                 | float ToSingle(int src)                                                                                       | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 80 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 e8 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
37        | 7ff7c864df20h   | 87      | hex://root/bitconvert?ToSingle#ToSingle_(32u)                                                                 | float ToSingle(uint src)                                                                                      | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 e8 3d b5 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
38        | 7ff7c864df50h   | 39      | hex://root/bitconvert?ToDouble#ToDouble_(64i)                                                                 | double ToDouble(long src)                                                                                     | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
39        | 7ff7c864df80h   | 39      | hex://root/bitconvert?ToDouble#ToDouble_(64u)                                                                 | double ToDouble(ulong src)                                                                                    | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
40        | 7ff7c864dfb0h   | 135     | hex://root/bitconvert?ToInt32#ToInt32_(32f)                                                                   | int ToInt32(float src)                                                                                        | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 f0 3e b5 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 58 3f b5 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
41        | 7ff7c864dfe0h   | 87      | hex://root/bitconvert?ToUInt32#ToUInt32_(32f)                                                                 | uint ToUInt32(float src)                                                                                      | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 58 3f b5 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
42        | 7ff7c864e010h   | 39      | hex://root/bitconvert?ToInt64#ToInt64_(64f)                                                                   | long ToInt64(double src)                                                                                      | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
43        | 7ff7c864e040h   | 39      | hex://root/bitconvert?ToUInt64#ToUInt64_(64f)                                                                 | ulong ToUInt64(double src)                                                                                    | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
