Sequence  | Address         | Length  | Uri                                                                                                           | OpSig                                                                                                         | Data
0         | 7ff7c86acf00h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[8u](8u~in)                                                          | Span<byte> GetBytes<byte>(in byte src)                                                                        | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 01 00 00 00 e8 c0 9e bb 5e 48 83 c0 10 ba 01 00 00 00 0f b6 0f 88 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
1         | 7ff7c86acf60h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[8i](8i~in)                                                          | Span<byte> GetBytes<sbyte>(in sbyte src)                                                                      | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 01 00 00 00 e8 60 9e bb 5e 48 83 c0 10 ba 01 00 00 00 48 0f be 0f 88 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
2         | 7ff7c86acfc0h   | 1112    | hex://root/BitConvert?GetBytes#GetBytes_g[16u](16u~in)                                                        | Span<byte> GetBytes<ushort>(in ushort src)                                                                    | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 02 00 00 00 e8 00 9e bb 5e 48 83 c0 10 ba 02 00 00 00 0f b7 0f 66 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 02 00 00 00 00 00 00 00 e8 23 86 bb 5e 5e 00 00 60 37 c5 c8 f7 7f 00 00 e8 13 86 bb 5e 5e 00 00 c0 37 c5 c8 f7 7f 00 00 e8 03 86 bb 5e 5e 00 00 20 38 c5 c8 f7 7f 00 00 e8 f3 85 bb 5e 5e 00 00 80 38 c5 c8 f7 7f 00 00 e8 e3 85 bb 5e 5e 00 00 e0 38 c5 c8 f7 7f 00 00 e8 d3 85 bb 5e 5e 00 00 40 39 c5 c8 f7 7f 00 00 e8 c3 85 bb 5e 5e 00 00 a0 39 c5 c8 f7 7f 00 00 e8 b3 85 bb 5e 5e 00 00 00 3a c5 c8 f7 7f 00 00 e8 a3 85 bb 5e 5e 00 00 60 3a c5 c8 f7 7f 00 00 e8 93 85 bb 5e 5e 00 00 c0 3a c5 c8 f7 7f 00 00 e8 83 85 bb 5e 5e 00 00 20 3b c5 c8 f7 7f 00 00 e8 73 85 bb 5e 5e 00 00 80 3b c5 c8 f7 7f 00 00 e8 63 85 bb 5e 5e 00 00 e0 3b c5 c8 f7 7f 00 00 e8 53 85 bb 5e 5e 00 00 40 3c c5 c8 f7 7f 00 00 e8 43 85 bb 5e 5e 00 00 a0 3c c5 c8 f7 7f 00 00 e8 33 85 bb 5e 5e 00 00 00 3d c5 c8 f7 7f 00 00 e8 23 85 bb 5e 5e 00 00 60 3d c5 c8 f7 7f 00 00 e8 13 85 bb 5e 5e 00 00 c0 3d c5 c8 f7 7f 00 00 e8 03 85 bb 5e 5e 00 00 20 3e c5 c8 f7 7f 00 00 e8 f3 84 bb 5e 5e 00 01 e8 eb 84 bb 5e 5e 01 00 88 3f c5 c8 f7 7f 00 00 e8 db 84 bb 5e 5e 00 18 e8 d3 84 bb 5e 5e 01 17 e8 cb 84 bb 5e 5e 02 16 e8 c3 84 bb 5e 5e 03 15 e8 bb 84 bb 5e 5e 04 14 e8 b3 84 bb 5e 5e 05 13 e8 ab 84 bb 5e 5e 06 12 e8 a3 84 bb 5e 5e 07 11 e8 9b 84 bb 5e 5e 08 10 e8 93 84 bb 5e 5e 09 0f e8 8b 84 bb 5e 5e 0a 0e e8 83 84 bb 5e 5e 0b 0d e8 7b 84 bb 5e 5e 0c 0c e8 73 84 bb 5e 5e 0d 0b e8 6b 84 bb 5e 5e 0e 0a e8 63 84 bb 5e 5e 0f 09 e8 5b 84 bb 5e 5e 10 08 e8 53 84 bb 5e 5e 11 07 e8 4b 84 bb 5e 5e 12 06 e8 43 84 bb 5e 5e 13 05 e8 3b 84 bb 5e 5e 14 04 e8 33 84 bb 5e 5e 15 03 e8 2b 84 bb 5e 5e 16 02 e8 23 84 bb 5e 5e 17 01 e8 1b 84 bb 5e 5e 18 00 90 3e c5 c8 f7 7f 00 00 e8 0b 84 bb 5e 5e 00 00 88 41 c5 c8 f7 7f 00 00 e8 fb 83 bb 5e 5e 00 00 e8 41 c5 c8 f7 7f 00 00 e8 eb 83 bb 5e 5e 00 00 48 42 c5 c8 f7 7f 00 00 e8 db 83 bb 5e 5e 00 00 a8 42 c5 c8 f7 7f 00 00 e8 cb 83 bb 5e 5e 00 00 08 43 c5 c8 f7 7f 00 00 e8 bb 83 bb 5e 5e 00 00 68 43 c5 c8 f7 7f 00 00 e8 ab 83 bb 5e 5e 00 00 c8 43 c5 c8 f7 7f 00 00 e8 9b 83 bb 5e 5e 00 00 28 44 c5 c8 f7 7f 00 00 e8 8b 83 bb 5e 5e 00 00 88 44 c5 c8 f7 7f 00 00 e8 7b 83 bb 5e 5e 00 00 e8 44 c5 c8 f7 7f 00 00 e8 6b 83 bb 5e 5e 00 00 48 45 c5 c8 f7 7f 00 00 e8 5b 83 bb 5e 5e 00 00 a8 45 c5 c8 f7 7f 00 00 e8 4b 83 bb 5e 5e 00 00 08 46 c5 c8 f7 7f 00 00 e8 3b 83 bb 5e 5e 00 00 68 46 c5 c8 f7 7f 00 00 e8 2b 83 bb 5e 5e 00 00 c8 46 c5 c8 f7 7f 00 00 e8 1b 83 bb 5e 5e 00 00 28 47 c5 c8 f7 7f 00 00 e8 0b 83 bb 5e 5e 00 00 88 47 c5 c8 f7 7f 00 00 e8 fb 82 bb 5e 5e 00 00 e8 47 c5 c8 f7 7f 00 00 e8 eb 82 bb 5e 5e 00 00 48 48 c5 c8 f7 7f 00 00 e8 db 82 bb 5e 5e 00 00 a8 48 c5 c8 f7 7f 00 00 e8 cb 82 bb 5e 5e 00 00 08 49 c5 c8 f7 7f 00 00 e8 bb 82 bb 5e 5e 00 00 68 49 c5 c8 f7 7f 00 00 e8 ab 82 bb 5e 5e 00 00 c8 49 c5 c8 f7 7f 00 00 e8 9b 82 bb 5e 5e 00 00 28 4a c5 c8 f7 7f 00 00 e8 8b 82 bb 5e 5e 00 00 88 4a c5 c8 f7 7f 00 00 e8 7b 82 bb 5e 5e 00 00 e8 4a c5 c8 f7 7f 00 00 e8 6b 82 bb 5e 5e 00 00 48 4b c5 c8 f7 7f 00 00 e8 5b 82 bb 5e 5e 00 00 a8 4b c5 c8 f7 7f 00 00 e8 4b 82 bb 5e 5e 00 00 08 4c c5 c8 f7 7f 00 00 e8 3b 82 bb 5e 5e 00 00 68 4c c5 c8 f7 7f 00 00 00 00 00 00 00 00 00 00
3         | 7ff7c86ad420h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[16i](16i~in)                                                        | Span<byte> GetBytes<short>(in short src)                                                                      | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 02 00 00 00 e8 a0 99 bb 5e 48 83 c0 10 ba 02 00 00 00 48 0f bf 0f 66 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
4         | 7ff7c86ad480h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[32u](32u~in)                                                        | Span<byte> GetBytes<uint>(in uint src)                                                                        | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 04 00 00 00 e8 40 99 bb 5e 48 83 c0 10 ba 04 00 00 00 8b 0f 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
5         | 7ff7c86ad4e0h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[32i](32i~in)                                                        | Span<byte> GetBytes<int>(in int src)                                                                          | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 04 00 00 00 e8 e0 98 bb 5e 48 83 c0 10 ba 04 00 00 00 8b 0f 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
6         | 7ff7c86ad540h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[64u](64u~in)                                                        | Span<byte> GetBytes<ulong>(in ulong src)                                                                      | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 08 00 00 00 e8 80 98 bb 5e 48 83 c0 10 ba 08 00 00 00 48 8b 0f 48 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
7         | 7ff7c86ad5a0h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[64i](64i~in)                                                        | Span<byte> GetBytes<long>(in long src)                                                                        | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 08 00 00 00 e8 20 98 bb 5e 48 83 c0 10 ba 08 00 00 00 48 8b 0f 48 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
8         | 7ff7c86ad600h   | 435     | hex://root/BitConvert?GetBytes#GetBytes_g[32f](32f~in)                                                        | Span<byte> GetBytes<float>(in float src)                                                                      | 57 56 48 83 ec 28 c5 f8 77 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 04 00 00 00 e8 bd 97 bb 5e 48 83 c0 10 ba 04 00 00 00 c5 fa 10 07 c5 fa 11 00 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 cc cc 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 68 8a c4 c8 f7 7f 00 00 57 56 48 83 ec 28 c5 f8 77 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 08 00 00 00 e8 5d 97 bb 5e 48 83 c0 10 ba 08 00 00 00 c5 fb 10 07 c5 fb 11 00 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 cc cc 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 10 8c c4 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 d4 79 09 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 e0 8c c4 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 84 79 09 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 68 8d c4 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 86 24 ce 5e e8 29 79 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
9         | 7ff7c86ad660h   | 339     | hex://root/BitConvert?GetBytes#GetBytes_g[64f](64f~in)                                                        | Span<byte> GetBytes<double>(in double src)                                                                    | 57 56 48 83 ec 28 c5 f8 77 48 8b f1 48 8b fa 48 b9 10 ea 70 c7 f7 7f 00 00 ba 08 00 00 00 e8 5d 97 bb 5e 48 83 c0 10 ba 08 00 00 00 c5 fb 10 07 c5 fb 11 00 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 cc cc 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 10 8c c4 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 d4 79 09 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 e0 8c c4 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 84 79 09 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 68 8d c4 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 86 24 ce 5e e8 29 79 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
10        | 7ff7c86ad6c0h   | 243     | hex://root/BitConvert?GetBytes#GetBytes_g[8u](uspan8u,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<byte>(ReadOnlySpan<byte> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 d4 79 09 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 e0 8c c4 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 84 79 09 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 68 8d c4 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 86 24 ce 5e e8 29 79 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
11        | 7ff7c86ad710h   | 163     | hex://root/BitConvert?GetBytes#GetBytes_g[8i](uspan8i,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<sbyte>(ReadOnlySpan<sbyte> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 84 79 09 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 68 8d c4 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 86 24 ce 5e e8 29 79 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
12        | 7ff7c86ad760h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[16u](uspan16u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ushort>(ReadOnlySpan<ushort> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 86 24 ce 5e e8 29 79 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
13        | 7ff7c86ad7c0h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[16i](uspan16i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<short>(ReadOnlySpan<short> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 26 24 ce 5e e8 c9 78 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
14        | 7ff7c86ad820h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[32u](uspan32u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<uint>(ReadOnlySpan<uint> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 c6 23 ce 5e e8 69 78 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
15        | 7ff7c86ad880h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[32i](uspan32i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<int>(ReadOnlySpan<int> src, int offset, int count)                                | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 66 23 ce 5e e8 09 78 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
16        | 7ff7c86ad8e0h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[64u](uspan64u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ulong>(ReadOnlySpan<ulong> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 06 23 ce 5e e8 a9 77 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
17        | 7ff7c86ad940h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[64i](uspan64i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<long>(ReadOnlySpan<long> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 a6 22 ce 5e e8 49 77 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
18        | 7ff7c86ad9a0h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[32f](uspan32f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<float>(ReadOnlySpan<float> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 46 22 ce 5e e8 e9 76 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
19        | 7ff7c86ada00h   | 640     | hex://root/BitConvert?GetBytes#GetBytes_g[64f](uspan64f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<double>(ReadOnlySpan<double> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 e6 21 ce 5e e8 89 76 09 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 e8 e3 7b bb 5e 5e 00 00 c8 4c c5 c8 f7 7f 00 00 e8 d3 7b bb 5e 5e 00 00 28 4d c5 c8 f7 7f 00 00 e8 c3 7b bb 5e 5e 00 00 88 4d c5 c8 f7 7f 00 00 e8 b3 7b bb 5e 5e 00 00 e8 4d c5 c8 f7 7f 00 00 e8 a3 7b bb 5e 5e 00 00 48 4e c5 c8 f7 7f 00 00 e8 93 7b bb 5e 5e 00 00 a8 4e c5 c8 f7 7f 00 00 e8 83 7b bb 5e 5e 00 00 08 4f c5 c8 f7 7f 00 00 e8 73 7b bb 5e 5e 00 00 68 4f c5 c8 f7 7f 00 00 e8 63 7b bb 5e 5e 00 00 c8 4f c5 c8 f7 7f 00 00 e8 53 7b bb 5e 5e 00 00 28 50 c5 c8 f7 7f 00 00 e8 43 7b bb 5e 5e 00 00 88 50 c5 c8 f7 7f 00 00 e8 33 7b bb 5e 5e 00 00 e8 50 c5 c8 f7 7f 00 00 e8 23 7b bb 5e 5e 00 00 48 51 c5 c8 f7 7f 00 00 e8 13 7b bb 5e 5e 00 00 a8 51 c5 c8 f7 7f 00 00 e8 03 7b bb 5e 5e 00 00 08 52 c5 c8 f7 7f 00 00 e8 f3 7a bb 5e 5e 00 00 68 52 c5 c8 f7 7f 00 00 e8 e3 7a bb 5e 5e 00 00 c8 52 c5 c8 f7 7f 00 00 e8 d3 7a bb 5e 5e 00 00 28 53 c5 c8 f7 7f 00 00 e8 c3 7a bb 5e 5e 00 00 88 53 c5 c8 f7 7f 00 00 e8 b3 7a bb 5e 5e 00 00 e8 53 c5 c8 f7 7f 00 00 e8 a3 7a bb 5e 5e 00 00 48 54 c5 c8 f7 7f 00 00 e8 93 7a bb 5e 5e 00 00 a8 54 c5 c8 f7 7f 00 00 e8 83 7a bb 5e 5e 00 00 08 55 c5 c8 f7 7f 00 00 e8 73 7a bb 5e 5e 00 00 68 55 c5 c8 f7 7f 00 00 e8 63 7a bb 5e 5e 00 00 c8 55 c5 c8 f7 7f 00 00 e8 53 7a bb 5e 5e 00 00 28 56 c5 c8 f7 7f 00 00 e8 43 7a bb 5e 5e 00 00 88 56 c5 c8 f7 7f 00 00 e8 33 7a bb 5e 5e 00 00 e8 56 c5 c8 f7 7f 00 00 e8 23 7a bb 5e 5e 00 00 48 57 c5 c8 f7 7f 00 00 e8 13 7a bb 5e 5e 00 00 a8 57 c5 c8 f7 7f 00 00 e8 03 7a bb 5e 5e 00 00 08 58 c5 c8 f7 7f 00 00 e8 f3 79 bb 5e 5e 00 00 68 58 c5 c8 f7 7f 00 00 e8 e3 79 bb 5e 5e 00 00 c8 58 c5 c8 f7 7f 00 00 e8 d3 79 bb 5e 5e 00 00 28 59 c5 c8 f7 7f 00 00 00 00 00 00 00 00 00 00
20        | 7ff7c86ade60h   | 55      | hex://root/BitConvert?GetBytes#GetBytes_g[8u](8u~in,span8u)                                                   | void GetBytes<byte>(in byte src, Span<byte> dst)                                                              | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 0f b6 09 88 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
21        | 7ff7c86adea0h   | 247     | hex://root/BitConvert?GetBytes#GetBytes_g[8i](8i~in,span8u)                                                   | void GetBytes<sbyte>(in sbyte src, Span<byte> dst)                                                            | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f be 09 88 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 a0 94 c4 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 0f b7 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 28 95 c4 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f bf 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 b0 95 c4 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
22        | 7ff7c86adee0h   | 183     | hex://root/BitConvert?GetBytes#GetBytes_g[16u](16u~in,span8u)                                                 | void GetBytes<ushort>(in ushort src, Span<byte> dst)                                                          | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 0f b7 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 28 95 c4 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f bf 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 b0 95 c4 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
23        | 7ff7c86adf20h   | 119     | hex://root/BitConvert?GetBytes#GetBytes_g[16i](16i~in,span8u)                                                 | void GetBytes<short>(in short src, Span<byte> dst)                                                            | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f bf 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 b0 95 c4 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
24        | 7ff7c86adf60h   | 55      | hex://root/BitConvert?GetBytes#GetBytes_g[32u](32u~in,span8u)                                                 | void GetBytes<uint>(in uint src, Span<byte> dst)                                                              | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
25        | 7ff7c86adfa0h   | 55      | hex://root/BitConvert?GetBytes#GetBytes_g[32i](32i~in,span8u)                                                 | void GetBytes<int>(in int src, Span<byte> dst)                                                                | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
26        | 7ff7c86adfe0h   | 291     | hex://root/BitConvert?GetBytes#GetBytes_g[64u](64u~in,span8u)                                                 | void GetBytes<ulong>(in ulong src, Span<byte> dst)                                                            | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 8b 09 48 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 48 97 c4 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 8b 09 48 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 d0 97 c4 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fa 10 01 c5 fa 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 58 98 c4 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 f8 98 c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
27        | 7ff7c86ae020h   | 227     | hex://root/BitConvert?GetBytes#GetBytes_g[64i](64i~in,span8u)                                                 | void GetBytes<long>(in long src, Span<byte> dst)                                                              | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 8b 09 48 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 d0 97 c4 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fa 10 01 c5 fa 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 58 98 c4 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 f8 98 c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
28        | 7ff7c86ae060h   | 163     | hex://root/BitConvert?GetBytes#GetBytes_g[32f](32f~in,span8u)                                                 | void GetBytes<float>(in float src, Span<byte> dst)                                                            | 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fa 10 01 c5 fa 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 58 98 c4 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 f8 98 c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
29        | 7ff7c86ae0a0h   | 99      | hex://root/BitConvert?GetBytes#GetBytes_g[64f](64f~in,span8u)                                                 | void GetBytes<double>(in double src, Span<byte> dst)                                                          | 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 f8 98 c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
30        | 7ff7c86ae0e0h   | 35      | hex://root/BitConvert?ToInt16#ToInt16_(uspan8u,32i)                                                           | short ToInt16(ReadOnlySpan<byte> src, int offset)                                                             | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
31        | 7ff7c86ae110h   | 295     | hex://root/BitConvert?ToUInt16#ToUInt16_(uspan8u,32i)                                                         | ushort ToUInt16(ReadOnlySpan<byte> src, int offset)                                                           | 0f 1f 44 00 00 48 8b 01 48 63 d2 0f b7 04 10 c3 19 00 00 00 40 00 00 00 f8 99 c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 78 9a c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 f8 9a c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 78 9b c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 e0 9b c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
32        | 7ff7c86ae130h   | 263     | hex://root/BitConvert?ToInt32#ToInt32_(uspan8u,32i)                                                           | int ToInt32(ReadOnlySpan<byte> src, int offset)                                                               | 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 78 9a c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 f8 9a c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 78 9b c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 e0 9b c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
33        | 7ff7c86ae150h   | 231     | hex://root/BitConvert?ToUInt32#ToUInt32_(uspan8u,32i)                                                         | uint ToUInt32(ReadOnlySpan<byte> src, int offset)                                                             | 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 f8 9a c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 78 9b c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 e0 9b c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
34        | 7ff7c86ae170h   | 199     | hex://root/BitConvert?ToInt64#ToInt64_(uspan8u,32i)                                                           | long ToInt64(ReadOnlySpan<byte> src, int offset)                                                              | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 78 9b c4 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 e0 9b c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
35        | 7ff7c86ae190h   | 167     | hex://root/BitConvert?ToUInt64#ToUInt64_(uspan8u,32i)                                                         | ulong ToUInt64(ReadOnlySpan<byte> src, int offset)                                                            | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 e0 9b c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
36        | 7ff7c86ae1b0h   | 135     | hex://root/BitConvert?ToSingle#ToSingle_(32i)                                                                 | float ToSingle(int src)                                                                                       | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
37        | 7ff7c86ae1e0h   | 87      | hex://root/BitConvert?ToSingle#ToSingle_(32u)                                                                 | float ToSingle(uint src)                                                                                      | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 9c c4 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
38        | 7ff7c86ae210h   | 39      | hex://root/BitConvert?ToDouble#ToDouble_(64i)                                                                 | double ToDouble(long src)                                                                                     | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
39        | 7ff7c86ae240h   | 39      | hex://root/BitConvert?ToDouble#ToDouble_(64u)                                                                 | double ToDouble(ulong src)                                                                                    | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
40        | 7ff7c86ae270h   | 135     | hex://root/BitConvert?ToInt32#ToInt32_(32f)                                                                   | int ToInt32(float src)                                                                                        | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 88 9d c4 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 9d c4 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
41        | 7ff7c86ae2a0h   | 87      | hex://root/BitConvert?ToUInt32#ToUInt32_(32f)                                                                 | uint ToUInt32(float src)                                                                                      | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 9d c4 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
42        | 7ff7c86ae2d0h   | 39      | hex://root/BitConvert?ToInt64#ToInt64_(64f)                                                                   | long ToInt64(double src)                                                                                      | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
43        | 7ff7c86ae300h   | 39      | hex://root/BitConvert?ToUInt64#ToUInt64_(64f)                                                                 | ulong ToUInt64(double src)                                                                                    | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
