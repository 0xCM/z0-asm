Sequence  | Address         | Length  | Uri                                                                                                           | OpSig                                                                                                         | Data
0         | 7ff7c86cea30h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[8u](8u~in)                                                          | Span<byte> GetBytes<byte>(in byte src)                                                                        | 0f 1f 44 00 00 48 89 11 c7 41 08 01 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
1         | 7ff7c86cea60h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[8i](8i~in)                                                          | Span<byte> GetBytes<sbyte>(in sbyte src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 01 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
2         | 7ff7c86cea90h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[16u](16u~in)                                                        | Span<byte> GetBytes<ushort>(in ushort src)                                                                    | 0f 1f 44 00 00 48 89 11 c7 41 08 02 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
3         | 7ff7c86ceac0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[16i](16i~in)                                                        | Span<byte> GetBytes<short>(in short src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 02 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
4         | 7ff7c86ceaf0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32u](32u~in)                                                        | Span<byte> GetBytes<uint>(in uint src)                                                                        | 0f 1f 44 00 00 48 89 11 c7 41 08 04 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
5         | 7ff7c86ceb20h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32i](32i~in)                                                        | Span<byte> GetBytes<int>(in int src)                                                                          | 0f 1f 44 00 00 48 89 11 c7 41 08 04 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
6         | 7ff7c86ceb50h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](64u~in)                                                        | Span<byte> GetBytes<ulong>(in ulong src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 08 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
7         | 7ff7c86ceb80h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](64i~in)                                                        | Span<byte> GetBytes<long>(in long src)                                                                        | 0f 1f 44 00 00 48 89 11 c7 41 08 08 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
8         | 7ff7c86cebb0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](32f~in)                                                        | Span<byte> GetBytes<float>(in float src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 04 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
9         | 7ff7c86cebe0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64f](64f~in)                                                        | Span<byte> GetBytes<double>(in double src)                                                                    | 0f 1f 44 00 00 48 89 11 c7 41 08 08 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
10        | 7ff7c86cec10h   | 1032    | hex://root/bitconvert?GetBytes#GetBytes_g[8u](uspan8u,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<byte>(ReadOnlySpan<byte> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 f4 5d 08 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 e8 db 69 b9 5e 5e 00 00 98 b7 c6 c8 f7 7f 00 00 e8 cb 69 b9 5e 5e 00 00 f8 b7 c6 c8 f7 7f 00 00 e8 bb 69 b9 5e 5e 00 00 58 b8 c6 c8 f7 7f 00 00 e8 ab 69 b9 5e 5e 00 00 b8 b8 c6 c8 f7 7f 00 00 e8 9b 69 b9 5e 5e 00 00 18 b9 c6 c8 f7 7f 00 00 e8 8b 69 b9 5e 5e 00 00 78 b9 c6 c8 f7 7f 00 00 e8 7b 69 b9 5e 5e 00 00 d8 b9 c6 c8 f7 7f 00 00 e8 6b 69 b9 5e 5e 00 00 38 ba c6 c8 f7 7f 00 00 e8 5b 69 b9 5e 5e 00 00 98 ba c6 c8 f7 7f 00 00 e8 4b 69 b9 5e 5e 00 00 f8 ba c6 c8 f7 7f 00 00 e8 3b 69 b9 5e 5e 00 00 58 bb c6 c8 f7 7f 00 00 e8 2b 69 b9 5e 5e 00 00 b8 bb c6 c8 f7 7f 00 00 e8 1b 69 b9 5e 5e 00 00 18 bc c6 c8 f7 7f 00 00 e8 0b 69 b9 5e 5e 00 00 78 bc c6 c8 f7 7f 00 00 e8 fb 68 b9 5e 5e 00 00 d8 bc c6 c8 f7 7f 00 00 e8 eb 68 b9 5e 5e 00 00 38 bd c6 c8 f7 7f 00 00 e8 db 68 b9 5e 5e 00 00 98 bd c6 c8 f7 7f 00 00 e8 cb 68 b9 5e 5e 00 00 f8 bd c6 c8 f7 7f 00 00 e8 bb 68 b9 5e 5e 00 00 58 be c6 c8 f7 7f 00 00 e8 ab 68 b9 5e 5e 00 00 b8 be c6 c8 f7 7f 00 00 e8 9b 68 b9 5e 5e 00 00 18 bf c6 c8 f7 7f 00 00 e8 8b 68 b9 5e 5e 00 00 78 bf c6 c8 f7 7f 00 00 e8 7b 68 b9 5e 5e 00 00 d8 bf c6 c8 f7 7f 00 00 e8 6b 68 b9 5e 5e 00 00 38 c0 c6 c8 f7 7f 00 00 e8 5b 68 b9 5e 5e 00 00 98 c0 c6 c8 f7 7f 00 00 e8 4b 68 b9 5e 5e 00 00 f8 c0 c6 c8 f7 7f 00 00 e8 3b 68 b9 5e 5e 00 00 58 c1 c6 c8 f7 7f 00 00 e8 2b 68 b9 5e 5e 00 00 b8 c1 c6 c8 f7 7f 00 00 e8 1b 68 b9 5e 5e 00 00 18 c2 c6 c8 f7 7f 00 00 e8 0b 68 b9 5e 5e 00 00 78 c2 c6 c8 f7 7f 00 00 e8 fb 67 b9 5e 5e 00 00 d8 c2 c6 c8 f7 7f 00 00 e8 eb 67 b9 5e 5e 00 00 38 c3 c6 c8 f7 7f 00 00 e8 db 67 b9 5e 5e 00 00 98 c3 c6 c8 f7 7f 00 00 e8 cb 67 b9 5e 5e 00 00 f8 c3 c6 c8 f7 7f 00 00 e8 bb 67 b9 5e 5e 00 00 58 c4 c6 c8 f7 7f 00 00 e8 ab 67 b9 5e 5e 00 00 b8 c4 c6 c8 f7 7f 00 00 e8 9b 67 b9 5e 5e 00 00 18 c5 c6 c8 f7 7f 00 00 e8 8b 67 b9 5e 5e 00 00 78 c5 c6 c8 f7 7f 00 00 e8 7b 67 b9 5e 5e 00 00 d8 c5 c6 c8 f7 7f 00 00 e8 6b 67 b9 5e 5e 00 00 38 c6 c6 c8 f7 7f 00 00 e8 5b 67 b9 5e 5e 00 00 98 c6 c6 c8 f7 7f 00 00 e8 4b 67 b9 5e 5e 00 00 f8 c6 c6 c8 f7 7f 00 00 e8 3b 67 b9 5e 5e 00 00 58 c7 c6 c8 f7 7f 00 00 e8 2b 67 b9 5e 5e 00 00 b8 c7 c6 c8 f7 7f 00 00 e8 1b 67 b9 5e 5e 00 00 18 c8 c6 c8 f7 7f 00 00 e8 0b 67 b9 5e 5e 00 00 78 c8 c6 c8 f7 7f 00 00 e8 fb 66 b9 5e 5e 00 00 d8 c8 c6 c8 f7 7f 00 00 e8 eb 66 b9 5e 5e 00 00 38 c9 c6 c8 f7 7f 00 00 e8 db 66 b9 5e 5e 00 00 98 c9 c6 c8 f7 7f 00 00 e8 cb 66 b9 5e 5e 00 00 f8 c9 c6 c8 f7 7f 00 00 e8 bb 66 b9 5e 5e 00 00 58 ca c6 c8 f7 7f 00 00 e8 ab 66 b9 5e 5e 00 00 b8 ca c6 c8 f7 7f 00 00 e8 9b 66 b9 5e 5e 00 00 18 cb c6 c8 f7 7f 00 00 e8 8b 66 b9 5e 5e 00 00 78 cb c6 c8 f7 7f 00 00 e8 7b 66 b9 5e 5e 00 00 d8 cb c6 c8 f7 7f 00 00 e8 6b 66 b9 5e 5e 00 00 38 cc c6 c8 f7 7f 00 00 e8 5b 66 b9 5e 5e 00 00 98 cc c6 c8 f7 7f 00 00 e8 4b 66 b9 5e 5e 00 00 f8 cc c6 c8 f7 7f 00 00 e8 3b 66 b9 5e 5e 00 00 58 cd c6 c8 f7 7f 00 00 00 00 00 00 00 00 00 00
11        | 7ff7c86cf070h   | 163     | hex://root/bitconvert?GetBytes#GetBytes_g[8i](uspan8i,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<sbyte>(ReadOnlySpan<sbyte> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 94 59 08 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 68 83 c7 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 26 0b cc 5e e8 39 59 08 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
12        | 7ff7c86cf0c0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[16u](uspan16u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ushort>(ReadOnlySpan<ushort> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 26 0b cc 5e e8 39 59 08 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
13        | 7ff7c86cf120h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[16i](uspan16i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<short>(ReadOnlySpan<short> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 c6 0a cc 5e e8 d9 58 08 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
14        | 7ff7c86cf180h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32u](uspan32u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<uint>(ReadOnlySpan<uint> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 66 0a cc 5e e8 79 58 08 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
15        | 7ff7c86cf1e0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32i](uspan32i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<int>(ReadOnlySpan<int> src, int offset, int count)                                | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 06 0a cc 5e e8 19 58 08 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
16        | 7ff7c86cf240h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](uspan64u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ulong>(ReadOnlySpan<ulong> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 a6 09 cc 5e e8 b9 57 08 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
17        | 7ff7c86cf2a0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](uspan64i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<long>(ReadOnlySpan<long> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 46 09 cc 5e e8 59 57 08 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
18        | 7ff7c86cf300h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](uspan32f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<float>(ReadOnlySpan<float> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 e6 08 cc 5e e8 f9 56 08 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
19        | 7ff7c86cf360h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64f](uspan64f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<double>(ReadOnlySpan<double> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 86 08 cc 5e e8 99 56 08 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
20        | 7ff7c86cf3c0h   | 291     | hex://root/bitconvert?GetBytes#GetBytes_g[8u](8u~in,span8u)                                                   | void GetBytes<byte>(in byte src, Span<byte> dst)                                                              | 0f 1f 44 00 00 48 8b 02 0f b6 11 88 10 c3 00 00 19 00 00 00 40 00 00 00 18 8a c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f be 11 88 10 c3 00 19 00 00 00 40 00 00 00 a0 8a c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 0f b7 11 66 89 10 c3 00 19 00 00 00 40 00 00 00 28 8b c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 b0 8b c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 38 8c c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 c0 8c c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 48 8d c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 d0 8d c7 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
21        | 7ff7c86cf3e0h   | 259     | hex://root/bitconvert?GetBytes#GetBytes_g[8i](8i~in,span8u)                                                   | void GetBytes<sbyte>(in sbyte src, Span<byte> dst)                                                            | 0f 1f 44 00 00 48 8b 02 48 0f be 11 88 10 c3 00 19 00 00 00 40 00 00 00 a0 8a c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 0f b7 11 66 89 10 c3 00 19 00 00 00 40 00 00 00 28 8b c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 b0 8b c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 38 8c c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 c0 8c c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 48 8d c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 d0 8d c7 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
22        | 7ff7c86cf400h   | 227     | hex://root/bitconvert?GetBytes#GetBytes_g[16u](16u~in,span8u)                                                 | void GetBytes<ushort>(in ushort src, Span<byte> dst)                                                          | 0f 1f 44 00 00 48 8b 02 0f b7 11 66 89 10 c3 00 19 00 00 00 40 00 00 00 28 8b c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 b0 8b c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 38 8c c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 c0 8c c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 48 8d c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 d0 8d c7 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
23        | 7ff7c86cf420h   | 195     | hex://root/bitconvert?GetBytes#GetBytes_g[16i](16i~in,span8u)                                                 | void GetBytes<short>(in short src, Span<byte> dst)                                                            | 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 b0 8b c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 38 8c c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 c0 8c c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 48 8d c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 d0 8d c7 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
24        | 7ff7c86cf440h   | 163     | hex://root/bitconvert?GetBytes#GetBytes_g[32u](32u~in,span8u)                                                 | void GetBytes<uint>(in uint src, Span<byte> dst)                                                              | 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 38 8c c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 c0 8c c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 48 8d c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 d0 8d c7 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
25        | 7ff7c86cf460h   | 131     | hex://root/bitconvert?GetBytes#GetBytes_g[32i](32i~in,span8u)                                                 | void GetBytes<int>(in int src, Span<byte> dst)                                                                | 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 c0 8c c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 48 8d c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 d0 8d c7 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
26        | 7ff7c86cf480h   | 99      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](64u~in,span8u)                                                 | void GetBytes<ulong>(in ulong src, Span<byte> dst)                                                            | 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 48 8d c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 d0 8d c7 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
27        | 7ff7c86cf4a0h   | 67      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](64i~in,span8u)                                                 | void GetBytes<long>(in long src, Span<byte> dst)                                                              | 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 d0 8d c7 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
28        | 7ff7c86cf4c0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](32f~in,span8u)                                                 | void GetBytes<float>(in float src, Span<byte> dst)                                                            | c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
29        | 7ff7c86cf4f0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64f](64f~in,span8u)                                                 | void GetBytes<double>(in double src, Span<byte> dst)                                                          | c5 f8 77 66 90 48 8b 02 c5 fb 10 01 c5 fb 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
30        | 7ff7c86cf520h   | 35      | hex://root/bitconvert?ToInt16#ToInt16_(uspan8u,32i)                                                           | short ToInt16(ReadOnlySpan<byte> src, int offset)                                                             | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
31        | 7ff7c86cf550h   | 295     | hex://root/bitconvert?ToUInt16#ToUInt16_(uspan8u,32i)                                                         | ushort ToUInt16(ReadOnlySpan<byte> src, int offset)                                                           | 0f 1f 44 00 00 48 8b 01 48 63 d2 0f b7 04 10 c3 19 00 00 00 40 00 00 00 e0 8f c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 60 90 c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 e0 90 c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 30 91 c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 98 91 c7 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 e8 91 c7 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 50 92 c7 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
32        | 7ff7c86cf570h   | 263     | hex://root/bitconvert?ToInt32#ToInt32_(uspan8u,32i)                                                           | int ToInt32(ReadOnlySpan<byte> src, int offset)                                                               | 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 60 90 c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 e0 90 c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 30 91 c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 98 91 c7 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 e8 91 c7 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 50 92 c7 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
33        | 7ff7c86cf590h   | 231     | hex://root/bitconvert?ToUInt32#ToUInt32_(uspan8u,32i)                                                         | uint ToUInt32(ReadOnlySpan<byte> src, int offset)                                                             | 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 e0 90 c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 30 91 c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 98 91 c7 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 e8 91 c7 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 50 92 c7 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
34        | 7ff7c86cf5b0h   | 199     | hex://root/bitconvert?ToInt64#ToInt64_(uspan8u,32i)                                                           | long ToInt64(ReadOnlySpan<byte> src, int offset)                                                              | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 30 91 c7 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 98 91 c7 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 e8 91 c7 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 50 92 c7 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
35        | 7ff7c86cf5d0h   | 167     | hex://root/bitconvert?ToUInt64#ToUInt64_(uspan8u,32i)                                                         | ulong ToUInt64(ReadOnlySpan<byte> src, int offset)                                                            | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 98 91 c7 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 e8 91 c7 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 50 92 c7 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
36        | 7ff7c86cf5f0h   | 135     | hex://root/bitconvert?ToSingle#ToSingle_(32i)                                                                 | float ToSingle(int src)                                                                                       | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 e8 91 c7 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 50 92 c7 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
37        | 7ff7c86cf620h   | 87      | hex://root/bitconvert?ToSingle#ToSingle_(32u)                                                                 | float ToSingle(uint src)                                                                                      | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 50 92 c7 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
38        | 7ff7c86cf650h   | 39      | hex://root/bitconvert?ToDouble#ToDouble_(64i)                                                                 | double ToDouble(long src)                                                                                     | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
39        | 7ff7c86cf680h   | 39      | hex://root/bitconvert?ToDouble#ToDouble_(64u)                                                                 | double ToDouble(ulong src)                                                                                    | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
40        | 7ff7c86cf6b0h   | 135     | hex://root/bitconvert?ToInt32#ToInt32_(32f)                                                                   | int ToInt32(float src)                                                                                        | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 40 93 c7 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 90 93 c7 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
41        | 7ff7c86cf6e0h   | 87      | hex://root/bitconvert?ToUInt32#ToUInt32_(32f)                                                                 | uint ToUInt32(float src)                                                                                      | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 90 93 c7 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
42        | 7ff7c86cf710h   | 39      | hex://root/bitconvert?ToInt64#ToInt64_(64f)                                                                   | long ToInt64(double src)                                                                                      | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
43        | 7ff7c86cf740h   | 39      | hex://root/bitconvert?ToUInt64#ToUInt64_(64f)                                                                 | ulong ToUInt64(double src)                                                                                    | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
