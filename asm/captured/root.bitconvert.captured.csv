Sequence  | Address         | Length  | Uri                                                                                                           | OpSig                                                                                                         | Data
0         | 7ff7c86d37e0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[8u](8u~in)                                                          | Span<byte> GetBytes<byte>(in byte src)                                                                        | 0f 1f 44 00 00 48 89 11 c7 41 08 01 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
1         | 7ff7c86d3810h   | 1064    | hex://root/bitconvert?GetBytes#GetBytes_g[8i](8i~in)                                                          | Span<byte> GetBytes<sbyte>(in sbyte src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 01 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 e8 03 1e b9 5e 5e 00 00 28 b6 c4 c8 f7 7f 00 00 e8 f3 1d b9 5e 5e 00 00 88 b6 c4 c8 f7 7f 00 00 e8 e3 1d b9 5e 5e 00 00 e8 b6 c4 c8 f7 7f 00 00 e8 d3 1d b9 5e 5e 00 00 48 b7 c4 c8 f7 7f 00 00 e8 c3 1d b9 5e 5e 00 00 a8 b7 c4 c8 f7 7f 00 00 e8 b3 1d b9 5e 5e 00 00 08 b8 c4 c8 f7 7f 00 00 e8 a3 1d b9 5e 5e 00 00 68 b8 c4 c8 f7 7f 00 00 e8 93 1d b9 5e 5e 00 00 c8 b8 c4 c8 f7 7f 00 00 e8 83 1d b9 5e 5e 00 00 28 b9 c4 c8 f7 7f 00 00 e8 73 1d b9 5e 5e 00 00 88 b9 c4 c8 f7 7f 00 00 e8 63 1d b9 5e 5e 00 00 e8 b9 c4 c8 f7 7f 00 00 e8 53 1d b9 5e 5e 00 00 48 ba c4 c8 f7 7f 00 00 e8 43 1d b9 5e 5e 00 00 a8 ba c4 c8 f7 7f 00 00 e8 33 1d b9 5e 5e 00 00 08 bb c4 c8 f7 7f 00 00 e8 23 1d b9 5e 5e 00 00 68 bb c4 c8 f7 7f 00 00 e8 13 1d b9 5e 5e 00 00 c8 bb c4 c8 f7 7f 00 00 e8 03 1d b9 5e 5e 00 00 28 bc c4 c8 f7 7f 00 00 e8 f3 1c b9 5e 5e 00 00 88 bc c4 c8 f7 7f 00 00 e8 e3 1c b9 5e 5e 00 00 e8 bc c4 c8 f7 7f 00 00 e8 d3 1c b9 5e 5e 00 00 48 bd c4 c8 f7 7f 00 00 e8 c3 1c b9 5e 5e 00 00 a8 bd c4 c8 f7 7f 00 00 e8 b3 1c b9 5e 5e 00 00 08 be c4 c8 f7 7f 00 00 e8 a3 1c b9 5e 5e 00 00 68 be c4 c8 f7 7f 00 00 e8 93 1c b9 5e 5e 00 00 c8 be c4 c8 f7 7f 00 00 e8 83 1c b9 5e 5e 00 00 28 bf c4 c8 f7 7f 00 00 e8 73 1c b9 5e 5e 00 00 88 bf c4 c8 f7 7f 00 00 e8 63 1c b9 5e 5e 00 00 e8 bf c4 c8 f7 7f 00 00 e8 53 1c b9 5e 5e 00 00 48 c0 c4 c8 f7 7f 00 00 e8 43 1c b9 5e 5e 00 00 a8 c0 c4 c8 f7 7f 00 00 e8 33 1c b9 5e 5e 00 00 08 c1 c4 c8 f7 7f 00 00 e8 23 1c b9 5e 5e 00 00 68 c1 c4 c8 f7 7f 00 00 e8 13 1c b9 5e 5e 00 00 c8 c1 c4 c8 f7 7f 00 00 e8 03 1c b9 5e 5e 00 00 28 c2 c4 c8 f7 7f 00 00 e8 f3 1b b9 5e 5e 00 00 88 c2 c4 c8 f7 7f 00 00 e8 e3 1b b9 5e 5e 00 00 e8 c2 c4 c8 f7 7f 00 00 e8 d3 1b b9 5e 5e 00 00 48 c3 c4 c8 f7 7f 00 00 e8 c3 1b b9 5e 5e 00 01 e8 bb 1b b9 5e 5e 01 00 b0 c4 c4 c8 f7 7f 00 00 e8 ab 1b b9 5e 5e 00 18 e8 a3 1b b9 5e 5e 01 17 e8 9b 1b b9 5e 5e 02 16 e8 93 1b b9 5e 5e 03 15 e8 8b 1b b9 5e 5e 04 14 e8 83 1b b9 5e 5e 05 13 e8 7b 1b b9 5e 5e 06 12 e8 73 1b b9 5e 5e 07 11 e8 6b 1b b9 5e 5e 08 10 e8 63 1b b9 5e 5e 09 0f e8 5b 1b b9 5e 5e 0a 0e e8 53 1b b9 5e 5e 0b 0d e8 4b 1b b9 5e 5e 0c 0c e8 43 1b b9 5e 5e 0d 0b e8 3b 1b b9 5e 5e 0e 0a e8 33 1b b9 5e 5e 0f 09 e8 2b 1b b9 5e 5e 10 08 e8 23 1b b9 5e 5e 11 07 e8 1b 1b b9 5e 5e 12 06 e8 13 1b b9 5e 5e 13 05 e8 0b 1b b9 5e 5e 14 04 e8 03 1b b9 5e 5e 15 03 e8 fb 1a b9 5e 5e 16 02 e8 f3 1a b9 5e 5e 17 01 e8 eb 1a b9 5e 5e 18 00 b8 c3 c4 c8 f7 7f 00 00 e8 db 1a b9 5e 5e 00 00 b0 c6 c4 c8 f7 7f 00 00 e8 cb 1a b9 5e 5e 00 00 10 c7 c4 c8 f7 7f 00 00 e8 bb 1a b9 5e 5e 00 00 70 c7 c4 c8 f7 7f 00 00 e8 ab 1a b9 5e 5e 00 00 d0 c7 c4 c8 f7 7f 00 00 e8 9b 1a b9 5e 5e 00 00 30 c8 c4 c8 f7 7f 00 00 e8 8b 1a b9 5e 5e 00 00 90 c8 c4 c8 f7 7f 00 00 e8 7b 1a b9 5e 5e 00 00 f0 c8 c4 c8 f7 7f 00 00 e8 6b 1a b9 5e 5e 00 00 50 c9 c4 c8 f7 7f 00 00 e8 5b 1a b9 5e 5e 00 00 b0 c9 c4 c8 f7 7f 00 00 e8 4b 1a b9 5e 5e 00 00 10 ca c4 c8 f7 7f 00 00 e8 3b 1a b9 5e 5e 00 00 70 ca c4 c8 f7 7f 00 00 e8 2b 1a b9 5e 5e 00 00 d0 ca c4 c8 f7 7f 00 00 e8 1b 1a b9 5e 5e 00 00 30 cb c4 c8 f7 7f 00 00 00 00 00 00 00 00 00 00
2         | 7ff7c86d3c40h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[16u](16u~in)                                                        | Span<byte> GetBytes<ushort>(in ushort src)                                                                    | 0f 1f 44 00 00 48 89 11 c7 41 08 02 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
3         | 7ff7c86d3c70h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[16i](16i~in)                                                        | Span<byte> GetBytes<short>(in short src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 02 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
4         | 7ff7c86d3ca0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32u](32u~in)                                                        | Span<byte> GetBytes<uint>(in uint src)                                                                        | 0f 1f 44 00 00 48 89 11 c7 41 08 04 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
5         | 7ff7c86d3cd0h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32i](32i~in)                                                        | Span<byte> GetBytes<int>(in int src)                                                                          | 0f 1f 44 00 00 48 89 11 c7 41 08 04 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
6         | 7ff7c86d3d00h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](64u~in)                                                        | Span<byte> GetBytes<ulong>(in ulong src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 08 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
7         | 7ff7c86d3d30h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](64i~in)                                                        | Span<byte> GetBytes<long>(in long src)                                                                        | 0f 1f 44 00 00 48 89 11 c7 41 08 08 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
8         | 7ff7c86d3d60h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](32f~in)                                                        | Span<byte> GetBytes<float>(in float src)                                                                      | 0f 1f 44 00 00 48 89 11 c7 41 08 04 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
9         | 7ff7c86d3d90h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64f](64f~in)                                                        | Span<byte> GetBytes<double>(in double src)                                                                    | 0f 1f 44 00 00 48 89 11 c7 41 08 08 00 00 00 48 8b c1 c3 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
10        | 7ff7c86d3dc0h   | 243     | hex://root/bitconvert?GetBytes#GetBytes_g[8u](uspan8u,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<byte>(ReadOnlySpan<byte> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 44 0c 0a ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 28 72 c5 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 f4 0b 0a ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 b0 72 c5 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 86 bd cb 5e e8 99 0b 0a ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
11        | 7ff7c86d3e10h   | 163     | hex://root/bitconvert?GetBytes#GetBytes_g[8i](uspan8i,32i,32i)                                                | ReadOnlySpan<byte> GetBytes<sbyte>(ReadOnlySpan<sbyte> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 f4 0b 0a ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 b0 72 c5 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 86 bd cb 5e e8 99 0b 0a ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
12        | 7ff7c86d3e60h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[16u](uspan16u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ushort>(ReadOnlySpan<ushort> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 86 bd cb 5e e8 99 0b 0a ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
13        | 7ff7c86d3ec0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[16i](uspan16i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<short>(ReadOnlySpan<short> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 26 bd cb 5e e8 39 0b 0a ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
14        | 7ff7c86d3f20h   | 864     | hex://root/bitconvert?GetBytes#GetBytes_g[32u](uspan32u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<uint>(ReadOnlySpan<uint> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 c6 bc cb 5e e8 d9 0a 0a ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 e8 c3 16 b9 5e 5e 00 00 90 cb c4 c8 f7 7f 00 00 e8 b3 16 b9 5e 5e 00 00 f0 cb c4 c8 f7 7f 00 00 e8 a3 16 b9 5e 5e 00 00 50 cc c4 c8 f7 7f 00 00 e8 93 16 b9 5e 5e 00 00 b0 cc c4 c8 f7 7f 00 00 e8 83 16 b9 5e 5e 00 00 10 cd c4 c8 f7 7f 00 00 e8 73 16 b9 5e 5e 00 00 70 cd c4 c8 f7 7f 00 00 e8 63 16 b9 5e 5e 00 00 d0 cd c4 c8 f7 7f 00 00 e8 53 16 b9 5e 5e 00 00 30 ce c4 c8 f7 7f 00 00 e8 43 16 b9 5e 5e 00 00 90 ce c4 c8 f7 7f 00 00 e8 33 16 b9 5e 5e 00 00 f0 ce c4 c8 f7 7f 00 00 e8 23 16 b9 5e 5e 00 00 50 cf c4 c8 f7 7f 00 00 e8 13 16 b9 5e 5e 00 00 b0 cf c4 c8 f7 7f 00 00 e8 03 16 b9 5e 5e 00 00 10 d0 c4 c8 f7 7f 00 00 e8 f3 15 b9 5e 5e 00 00 70 d0 c4 c8 f7 7f 00 00 e8 e3 15 b9 5e 5e 00 00 d0 d0 c4 c8 f7 7f 00 00 e8 d3 15 b9 5e 5e 00 00 30 d1 c4 c8 f7 7f 00 00 e8 c3 15 b9 5e 5e 00 00 90 d1 c4 c8 f7 7f 00 00 e8 b3 15 b9 5e 5e 00 00 f0 d1 c4 c8 f7 7f 00 00 e8 a3 15 b9 5e 5e 00 00 50 d2 c4 c8 f7 7f 00 00 e8 93 15 b9 5e 5e 00 00 b0 d2 c4 c8 f7 7f 00 00 e8 83 15 b9 5e 5e 00 00 10 d3 c4 c8 f7 7f 00 00 e8 73 15 b9 5e 5e 00 00 70 d3 c4 c8 f7 7f 00 00 e8 63 15 b9 5e 5e 00 00 d0 d3 c4 c8 f7 7f 00 00 e8 53 15 b9 5e 5e 00 00 30 d4 c4 c8 f7 7f 00 00 e8 43 15 b9 5e 5e 00 00 90 d4 c4 c8 f7 7f 00 00 e8 33 15 b9 5e 5e 00 00 f0 d4 c4 c8 f7 7f 00 00 e8 23 15 b9 5e 5e 00 00 50 d5 c4 c8 f7 7f 00 00 e8 13 15 b9 5e 5e 00 00 b0 d5 c4 c8 f7 7f 00 00 e8 03 15 b9 5e 5e 00 00 10 d6 c4 c8 f7 7f 00 00 e8 f3 14 b9 5e 5e 00 00 70 d6 c4 c8 f7 7f 00 00 e8 e3 14 b9 5e 5e 00 00 d0 d6 c4 c8 f7 7f 00 00 e8 d3 14 b9 5e 5e 00 00 30 d7 c4 c8 f7 7f 00 00 e8 c3 14 b9 5e 5e 00 00 90 d7 c4 c8 f7 7f 00 00 e8 b3 14 b9 5e 5e 00 00 f0 d7 c4 c8 f7 7f 00 00 e8 a3 14 b9 5e 5e 00 00 50 d8 c4 c8 f7 7f 00 00 e8 93 14 b9 5e 5e 00 00 b0 d8 c4 c8 f7 7f 00 00 e8 83 14 b9 5e 5e 00 00 10 d9 c4 c8 f7 7f 00 00 e8 73 14 b9 5e 5e 00 00 70 d9 c4 c8 f7 7f 00 00 e8 63 14 b9 5e 5e 00 00 d0 d9 c4 c8 f7 7f 00 00 e8 53 14 b9 5e 5e 00 00 30 da c4 c8 f7 7f 00 00 e8 43 14 b9 5e 5e 00 00 90 da c4 c8 f7 7f 00 00 e8 33 14 b9 5e 5e 00 00 f0 da c4 c8 f7 7f 00 00 e8 23 14 b9 5e 5e 00 00 50 db c4 c8 f7 7f 00 00 e8 13 14 b9 5e 5e 00 00 b0 db c4 c8 f7 7f 00 00 e8 03 14 b9 5e 5e 00 00 10 dc c4 c8 f7 7f 00 00 e8 f3 13 b9 5e 5e 00 00 70 dc c4 c8 f7 7f 00 00 e8 e3 13 b9 5e 5e 00 00 d0 dc c4 c8 f7 7f 00 00 e8 d3 13 b9 5e 5e 00 00 30 dd c4 c8 f7 7f 00 00 00 00 00 00 00 00 00 00
15        | 7ff7c86d4380h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32i](uspan32i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<int>(ReadOnlySpan<int> src, int offset, int count)                                | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 66 b8 cb 5e e8 79 06 0a ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
16        | 7ff7c86d43e0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](uspan64u,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<ulong>(ReadOnlySpan<ulong> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 06 b8 cb 5e e8 19 06 0a ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
17        | 7ff7c86d4440h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](uspan64i,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<long>(ReadOnlySpan<long> src, int offset, int count)                              | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 a6 b7 cb 5e e8 b9 05 0a ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
18        | 7ff7c86d44a0h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](uspan32f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<float>(ReadOnlySpan<float> src, int offset, int count)                            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 46 b7 cb 5e e8 59 05 0a ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
19        | 7ff7c86d4500h   | 83      | hex://root/bitconvert?GetBytes#GetBytes_g[64f](uspan64f,32i,32i)                                              | ReadOnlySpan<byte> GetBytes<double>(ReadOnlySpan<double> src, int offset, int count)                          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 e6 b6 cb 5e e8 f9 04 0a ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
20        | 7ff7c86d4560h   | 291     | hex://root/bitconvert?GetBytes#GetBytes_g[8u](8u~in,span8u)                                                   | void GetBytes<byte>(in byte src, Span<byte> dst)                                                              | 0f 1f 44 00 00 48 8b 02 0f b6 11 88 10 c3 00 00 19 00 00 00 40 00 00 00 60 79 c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f be 11 88 10 c3 00 19 00 00 00 40 00 00 00 e8 79 c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 0f b7 11 66 89 10 c3 00 19 00 00 00 40 00 00 00 70 7a c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 f8 7a c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 80 7b c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 08 7c c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 90 7c c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 18 7d c5 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
21        | 7ff7c86d4580h   | 259     | hex://root/bitconvert?GetBytes#GetBytes_g[8i](8i~in,span8u)                                                   | void GetBytes<sbyte>(in sbyte src, Span<byte> dst)                                                            | 0f 1f 44 00 00 48 8b 02 48 0f be 11 88 10 c3 00 19 00 00 00 40 00 00 00 e8 79 c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 0f b7 11 66 89 10 c3 00 19 00 00 00 40 00 00 00 70 7a c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 f8 7a c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 80 7b c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 08 7c c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 90 7c c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 18 7d c5 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
22        | 7ff7c86d45a0h   | 227     | hex://root/bitconvert?GetBytes#GetBytes_g[16u](16u~in,span8u)                                                 | void GetBytes<ushort>(in ushort src, Span<byte> dst)                                                          | 0f 1f 44 00 00 48 8b 02 0f b7 11 66 89 10 c3 00 19 00 00 00 40 00 00 00 70 7a c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 f8 7a c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 80 7b c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 08 7c c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 90 7c c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 18 7d c5 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
23        | 7ff7c86d45c0h   | 195     | hex://root/bitconvert?GetBytes#GetBytes_g[16i](16i~in,span8u)                                                 | void GetBytes<short>(in short src, Span<byte> dst)                                                            | 0f 1f 44 00 00 48 8b 02 48 0f bf 11 66 89 10 c3 19 00 00 00 40 00 00 00 f8 7a c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 80 7b c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 08 7c c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 90 7c c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 18 7d c5 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
24        | 7ff7c86d45e0h   | 163     | hex://root/bitconvert?GetBytes#GetBytes_g[32u](32u~in,span8u)                                                 | void GetBytes<uint>(in uint src, Span<byte> dst)                                                              | 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 80 7b c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 08 7c c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 90 7c c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 18 7d c5 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
25        | 7ff7c86d4600h   | 131     | hex://root/bitconvert?GetBytes#GetBytes_g[32i](32i~in,span8u)                                                 | void GetBytes<int>(in int src, Span<byte> dst)                                                                | 0f 1f 44 00 00 48 8b 02 8b 11 89 10 c3 00 00 00 19 00 00 00 40 00 00 00 08 7c c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 90 7c c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 18 7d c5 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
26        | 7ff7c86d4620h   | 99      | hex://root/bitconvert?GetBytes#GetBytes_g[64u](64u~in,span8u)                                                 | void GetBytes<ulong>(in ulong src, Span<byte> dst)                                                            | 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 90 7c c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 18 7d c5 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
27        | 7ff7c86d4640h   | 67      | hex://root/bitconvert?GetBytes#GetBytes_g[64i](64i~in,span8u)                                                 | void GetBytes<long>(in long src, Span<byte> dst)                                                              | 0f 1f 44 00 00 48 8b 02 48 8b 11 48 89 10 c3 00 19 00 00 00 40 00 00 00 18 7d c5 c8 f7 7f 00 00 c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
28        | 7ff7c86d4660h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[32f](32f~in,span8u)                                                 | void GetBytes<float>(in float src, Span<byte> dst)                                                            | c5 f8 77 66 90 48 8b 02 c5 fa 10 01 c5 fa 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
29        | 7ff7c86d4690h   | 35      | hex://root/bitconvert?GetBytes#GetBytes_g[64f](64f~in,span8u)                                                 | void GetBytes<double>(in double src, Span<byte> dst)                                                          | c5 f8 77 66 90 48 8b 02 c5 fb 10 01 c5 fb 11 00 c3 cc cc 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
30        | 7ff7c86d46c0h   | 35      | hex://root/bitconvert?ToInt16#ToInt16_(uspan8u,32i)                                                           | short ToInt16(ReadOnlySpan<byte> src, int offset)                                                             | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
31        | 7ff7c86d46f0h   | 295     | hex://root/bitconvert?ToUInt16#ToUInt16_(uspan8u,32i)                                                         | ushort ToUInt16(ReadOnlySpan<byte> src, int offset)                                                           | 0f 1f 44 00 00 48 8b 01 48 63 d2 0f b7 04 10 c3 19 00 00 00 40 00 00 00 28 7f c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 a8 7f c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 28 80 c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 78 80 c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 e0 80 c5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 81 c5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 81 c5 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
32        | 7ff7c86d4710h   | 263     | hex://root/bitconvert?ToInt32#ToInt32_(uspan8u,32i)                                                           | int ToInt32(ReadOnlySpan<byte> src, int offset)                                                               | 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 a8 7f c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 28 80 c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 78 80 c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 e0 80 c5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 81 c5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 81 c5 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
33        | 7ff7c86d4730h   | 231     | hex://root/bitconvert?ToUInt32#ToUInt32_(uspan8u,32i)                                                         | uint ToUInt32(ReadOnlySpan<byte> src, int offset)                                                             | 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 28 80 c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 78 80 c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 e0 80 c5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 81 c5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 81 c5 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
34        | 7ff7c86d4750h   | 199     | hex://root/bitconvert?ToInt64#ToInt64_(uspan8u,32i)                                                           | long ToInt64(ReadOnlySpan<byte> src, int offset)                                                              | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 78 80 c5 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 e0 80 c5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 81 c5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 81 c5 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
35        | 7ff7c86d4770h   | 167     | hex://root/bitconvert?ToUInt64#ToUInt64_(uspan8u,32i)                                                         | ulong ToUInt64(ReadOnlySpan<byte> src, int offset)                                                            | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 e0 80 c5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 81 c5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 81 c5 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
36        | 7ff7c86d4790h   | 135     | hex://root/bitconvert?ToSingle#ToSingle_(32i)                                                                 | float ToSingle(int src)                                                                                       | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 81 c5 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 81 c5 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
37        | 7ff7c86d47c0h   | 87      | hex://root/bitconvert?ToSingle#ToSingle_(32u)                                                                 | float ToSingle(uint src)                                                                                      | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 98 81 c5 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
38        | 7ff7c86d47f0h   | 39      | hex://root/bitconvert?ToDouble#ToDouble_(64i)                                                                 | double ToDouble(long src)                                                                                     | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
39        | 7ff7c86d4820h   | 39      | hex://root/bitconvert?ToDouble#ToDouble_(64u)                                                                 | double ToDouble(ulong src)                                                                                    | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
40        | 7ff7c86d4850h   | 135     | hex://root/bitconvert?ToInt32#ToInt32_(32f)                                                                   | int ToInt32(float src)                                                                                        | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 88 82 c5 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 82 c5 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
41        | 7ff7c86d4880h   | 87      | hex://root/bitconvert?ToUInt32#ToUInt32_(32f)                                                                 | uint ToUInt32(float src)                                                                                      | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 d8 82 c5 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
42        | 7ff7c86d48b0h   | 39      | hex://root/bitconvert?ToInt64#ToInt64_(64f)                                                                   | long ToInt64(double src)                                                                                      | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
43        | 7ff7c86d48e0h   | 39      | hex://root/bitconvert?ToUInt64#ToUInt64_(64f)                                                                 | ulong ToUInt64(double src)                                                                                    | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
