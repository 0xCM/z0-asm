Sequence  | Address         | Length  | Uri                                                                                       | OpSig                                                                                     | Data
0         | 7ff7c8646ed0h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[8u](8u~in)                                      | Span<byte> GetBytes<byte>(in byte src)                                                    | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 01 00 00 00 e8 f0 fe c1 5e 48 83 c0 10 ba 01 00 00 00 0f b6 0f 88 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
1         | 7ff7c8646f30h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[8i](8i~in)                                      | Span<byte> GetBytes<sbyte>(in sbyte src)                                                  | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 01 00 00 00 e8 90 fe c1 5e 48 83 c0 10 ba 01 00 00 00 48 0f be 0f 88 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
2         | 7ff7c8646f90h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[16u](16u~in)                                    | Span<byte> GetBytes<ushort>(in ushort src)                                                | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 02 00 00 00 e8 30 fe c1 5e 48 83 c0 10 ba 02 00 00 00 0f b7 0f 66 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
3         | 7ff7c8646ff0h   | 1112    | hex://root/BitConvert?GetBytes#GetBytes_g[16i](16i~in)                                    | Span<byte> GetBytes<short>(in short src)                                                  | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 02 00 00 00 e8 d0 fd c1 5e 48 83 c0 10 ba 02 00 00 00 48 0f bf 0f 66 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 02 00 00 00 00 00 00 00 e8 f3 e5 c1 5e 5e 00 00 00 67 b3 c8 f7 7f 00 00 e8 e3 e5 c1 5e 5e 00 00 60 67 b3 c8 f7 7f 00 00 e8 d3 e5 c1 5e 5e 00 00 c0 67 b3 c8 f7 7f 00 00 e8 c3 e5 c1 5e 5e 00 00 20 68 b3 c8 f7 7f 00 00 e8 b3 e5 c1 5e 5e 00 00 80 68 b3 c8 f7 7f 00 00 e8 a3 e5 c1 5e 5e 00 00 e0 68 b3 c8 f7 7f 00 00 e8 93 e5 c1 5e 5e 00 00 40 69 b3 c8 f7 7f 00 00 e8 83 e5 c1 5e 5e 00 00 a0 69 b3 c8 f7 7f 00 00 e8 73 e5 c1 5e 5e 00 00 00 6a b3 c8 f7 7f 00 00 e8 63 e5 c1 5e 5e 00 00 60 6a b3 c8 f7 7f 00 00 e8 53 e5 c1 5e 5e 00 00 c0 6a b3 c8 f7 7f 00 00 e8 43 e5 c1 5e 5e 00 00 20 6b b3 c8 f7 7f 00 00 e8 33 e5 c1 5e 5e 00 00 80 6b b3 c8 f7 7f 00 00 e8 23 e5 c1 5e 5e 00 00 e0 6b b3 c8 f7 7f 00 00 e8 13 e5 c1 5e 5e 00 00 40 6c b3 c8 f7 7f 00 00 e8 03 e5 c1 5e 5e 00 00 a0 6c b3 c8 f7 7f 00 00 e8 f3 e4 c1 5e 5e 00 01 e8 eb e4 c1 5e 5e 01 00 08 6e b3 c8 f7 7f 00 00 e8 db e4 c1 5e 5e 00 18 e8 d3 e4 c1 5e 5e 01 17 e8 cb e4 c1 5e 5e 02 16 e8 c3 e4 c1 5e 5e 03 15 e8 bb e4 c1 5e 5e 04 14 e8 b3 e4 c1 5e 5e 05 13 e8 ab e4 c1 5e 5e 06 12 e8 a3 e4 c1 5e 5e 07 11 e8 9b e4 c1 5e 5e 08 10 e8 93 e4 c1 5e 5e 09 0f e8 8b e4 c1 5e 5e 0a 0e e8 83 e4 c1 5e 5e 0b 0d e8 7b e4 c1 5e 5e 0c 0c e8 73 e4 c1 5e 5e 0d 0b e8 6b e4 c1 5e 5e 0e 0a e8 63 e4 c1 5e 5e 0f 09 e8 5b e4 c1 5e 5e 10 08 e8 53 e4 c1 5e 5e 11 07 e8 4b e4 c1 5e 5e 12 06 e8 43 e4 c1 5e 5e 13 05 e8 3b e4 c1 5e 5e 14 04 e8 33 e4 c1 5e 5e 15 03 e8 2b e4 c1 5e 5e 16 02 e8 23 e4 c1 5e 5e 17 01 e8 1b e4 c1 5e 5e 18 00 10 6d b3 c8 f7 7f 00 00 e8 0b e4 c1 5e 5e 00 00 08 70 b3 c8 f7 7f 00 00 e8 fb e3 c1 5e 5e 00 00 68 70 b3 c8 f7 7f 00 00 e8 eb e3 c1 5e 5e 00 00 c8 70 b3 c8 f7 7f 00 00 e8 db e3 c1 5e 5e 00 00 28 71 b3 c8 f7 7f 00 00 e8 cb e3 c1 5e 5e 00 00 88 71 b3 c8 f7 7f 00 00 e8 bb e3 c1 5e 5e 00 00 e8 71 b3 c8 f7 7f 00 00 e8 ab e3 c1 5e 5e 00 00 48 72 b3 c8 f7 7f 00 00 e8 9b e3 c1 5e 5e 00 00 a8 72 b3 c8 f7 7f 00 00 e8 8b e3 c1 5e 5e 00 00 08 73 b3 c8 f7 7f 00 00 e8 7b e3 c1 5e 5e 00 00 68 73 b3 c8 f7 7f 00 00 e8 6b e3 c1 5e 5e 00 00 c8 73 b3 c8 f7 7f 00 00 e8 5b e3 c1 5e 5e 00 00 28 74 b3 c8 f7 7f 00 00 e8 4b e3 c1 5e 5e 00 00 88 74 b3 c8 f7 7f 00 00 e8 3b e3 c1 5e 5e 00 00 e8 74 b3 c8 f7 7f 00 00 e8 2b e3 c1 5e 5e 00 00 48 75 b3 c8 f7 7f 00 00 e8 1b e3 c1 5e 5e 00 00 a8 75 b3 c8 f7 7f 00 00 e8 0b e3 c1 5e 5e 00 00 08 76 b3 c8 f7 7f 00 00 e8 fb e2 c1 5e 5e 00 00 68 76 b3 c8 f7 7f 00 00 e8 eb e2 c1 5e 5e 00 00 c8 76 b3 c8 f7 7f 00 00 e8 db e2 c1 5e 5e 00 00 28 77 b3 c8 f7 7f 00 00 e8 cb e2 c1 5e 5e 00 00 88 77 b3 c8 f7 7f 00 00 e8 bb e2 c1 5e 5e 00 00 e8 77 b3 c8 f7 7f 00 00 e8 ab e2 c1 5e 5e 00 00 48 78 b3 c8 f7 7f 00 00 e8 9b e2 c1 5e 5e 00 00 a8 78 b3 c8 f7 7f 00 00 e8 8b e2 c1 5e 5e 00 00 08 79 b3 c8 f7 7f 00 00 e8 7b e2 c1 5e 5e 00 00 68 79 b3 c8 f7 7f 00 00 e8 6b e2 c1 5e 5e 00 00 c8 79 b3 c8 f7 7f 00 00 e8 5b e2 c1 5e 5e 00 00 28 7a b3 c8 f7 7f 00 00 e8 4b e2 c1 5e 5e 00 00 88 7a b3 c8 f7 7f 00 00 e8 3b e2 c1 5e 5e 00 00 e8 7a b3 c8 f7 7f 00 00 e8 2b e2 c1 5e 5e 00 00 48 7b b3 c8 f7 7f 00 00 e8 1b e2 c1 5e 5e 00 00 a8 7b b3 c8 f7 7f 00 00 e8 0b e2 c1 5e 5e 00 00 08 7c b3 c8 f7 7f 00 00 00 00 00 00 00 00 00 00
4         | 7ff7c8647450h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[32u](32u~in)                                    | Span<byte> GetBytes<uint>(in uint src)                                                    | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 04 00 00 00 e8 70 f9 c1 5e 48 83 c0 10 ba 04 00 00 00 8b 0f 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
5         | 7ff7c86474b0h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[32i](32i~in)                                    | Span<byte> GetBytes<int>(in int src)                                                      | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 04 00 00 00 e8 10 f9 c1 5e 48 83 c0 10 ba 04 00 00 00 8b 0f 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
6         | 7ff7c8647510h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[64u](64u~in)                                    | Span<byte> GetBytes<ulong>(in ulong src)                                                  | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 08 00 00 00 e8 b0 f8 c1 5e 48 83 c0 10 ba 08 00 00 00 48 8b 0f 48 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
7         | 7ff7c8647570h   | 87      | hex://root/BitConvert?GetBytes#GetBytes_g[64i](64i~in)                                    | Span<byte> GetBytes<long>(in long src)                                                    | 57 56 48 83 ec 28 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 08 00 00 00 e8 50 f8 c1 5e 48 83 c0 10 ba 08 00 00 00 48 8b 0f 48 89 08 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 00 00 00
8         | 7ff7c86475d0h   | 435     | hex://root/BitConvert?GetBytes#GetBytes_g[32f](32f~in)                                    | Span<byte> GetBytes<float>(in float src)                                                  | 57 56 48 83 ec 28 c5 f8 77 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 04 00 00 00 e8 ed f7 c1 5e 48 83 c0 10 ba 04 00 00 00 c5 fa 10 07 c5 fa 11 00 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 cc cc 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 c0 8e b2 c8 f7 7f 00 00 57 56 48 83 ec 28 c5 f8 77 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 08 00 00 00 e8 8d f7 c1 5e 48 83 c0 10 ba 08 00 00 00 c5 fb 10 07 c5 fb 11 00 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 cc cc 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 68 90 b2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 d4 d9 11 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 38 91 b2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 84 d9 11 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 c0 91 b2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 b6 84 d4 5e e8 29 d9 11 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
9         | 7ff7c8647630h   | 339     | hex://root/BitConvert?GetBytes#GetBytes_g[64f](64f~in)                                    | Span<byte> GetBytes<double>(in double src)                                                | 57 56 48 83 ec 28 c5 f8 77 48 8b f1 48 8b fa 48 b9 10 ea 72 c7 f7 7f 00 00 ba 08 00 00 00 e8 8d f7 c1 5e 48 83 c0 10 ba 08 00 00 00 c5 fb 10 07 c5 fb 11 00 48 89 06 89 56 08 48 8b c6 48 83 c4 28 5e 5f c3 cc cc 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 68 90 b2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 d4 d9 11 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 38 91 b2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 84 d9 11 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 c0 91 b2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 b6 84 d4 5e e8 29 d9 11 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
10        | 7ff7c8647690h   | 243     | hex://root/BitConvert?GetBytes#GetBytes_g[8u](uspan8u,32i,32i)                            | ReadOnlySpan<byte> GetBytes<byte>(ReadOnlySpan<byte> src, int offset, int count)          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 d4 d9 11 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 38 91 b2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 84 d9 11 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 c0 91 b2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 b6 84 d4 5e e8 29 d9 11 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
11        | 7ff7c86476e0h   | 163     | hex://root/BitConvert?GetBytes#GetBytes_g[8i](uspan8i,32i,32i)                            | ReadOnlySpan<byte> GetBytes<sbyte>(ReadOnlySpan<sbyte> src, int offset, int count)        | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 18 48 8b 02 49 63 d0 48 03 c2 48 89 01 44 89 49 08 48 8b c1 48 83 c4 28 c3 e8 84 d9 11 ff cc 00 00 00 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 c0 91 b2 c8 f7 7f 00 00 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 b6 84 d4 5e e8 29 d9 11 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
12        | 7ff7c8647730h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[16u](uspan16u,32i,32i)                          | ReadOnlySpan<byte> GetBytes<ushort>(ReadOnlySpan<ushort> src, int offset, int count)      | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 b6 84 d4 5e e8 29 d9 11 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
13        | 7ff7c8647790h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[16i](uspan16i,32i,32i)                          | ReadOnlySpan<byte> GetBytes<short>(ReadOnlySpan<short> src, int offset, int count)        | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 50 41 6b d1 02 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 56 84 d4 5e e8 c9 d8 11 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
14        | 7ff7c86477f0h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[32u](uspan32u,32i,32i)                          | ReadOnlySpan<byte> GetBytes<uint>(ReadOnlySpan<uint> src, int offset, int count)          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 f6 83 d4 5e e8 69 d8 11 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
15        | 7ff7c8647850h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[32i](uspan32i,32i,32i)                          | ReadOnlySpan<byte> GetBytes<int>(ReadOnlySpan<int> src, int offset, int count)            | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 96 83 d4 5e e8 09 d8 11 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
16        | 7ff7c86478b0h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[64u](uspan64u,32i,32i)                          | ReadOnlySpan<byte> GetBytes<ulong>(ReadOnlySpan<ulong> src, int offset, int count)        | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 36 83 d4 5e e8 a9 d7 11 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
17        | 7ff7c8647910h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[64i](uspan64i,32i,32i)                          | ReadOnlySpan<byte> GetBytes<long>(ReadOnlySpan<long> src, int offset, int count)          | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 d6 82 d4 5e e8 49 d7 11 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
18        | 7ff7c8647970h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[32f](uspan32f,32i,32i)                          | ReadOnlySpan<byte> GetBytes<float>(ReadOnlySpan<float> src, int offset, int count)        | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 90 41 6b d1 04 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 76 82 d4 5e e8 e9 d6 11 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
19        | 7ff7c86479d0h   | 83      | hex://root/BitConvert?GetBytes#GetBytes_g[64f](uspan64f,32i,32i)                          | ReadOnlySpan<byte> GetBytes<double>(ReadOnlySpan<double> src, int offset, int count)      | 48 83 ec 28 90 41 8b c0 45 8b d1 49 03 c2 44 8b 52 08 49 3b c2 77 23 48 8b 02 49 63 d0 48 8d 04 d0 41 6b d1 08 70 0e 48 89 01 89 51 08 48 8b c1 48 83 c4 28 c3 e8 16 82 d4 5e e8 89 d6 11 ff cc 19 04 01 00 04 42 00 00 40 00 00 00 00 00 00 00 00 00 00
20        | 7ff7c8647a30h   | 560     | hex://root/BitConvert?GetBytes#GetBytes_g[8u](8u~in,span8u)                               | void GetBytes<byte>(in byte src, Span<byte> dst)                                          | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 0f b6 09 88 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 19 04 01 00 04 22 00 00 40 00 00 00 02 00 00 00 00 00 00 00 e8 d3 db c1 5e 5e 00 00 68 7c b3 c8 f7 7f 00 00 e8 c3 db c1 5e 5e 00 00 c8 7c b3 c8 f7 7f 00 00 e8 b3 db c1 5e 5e 00 00 28 7d b3 c8 f7 7f 00 00 e8 a3 db c1 5e 5e 00 00 88 7d b3 c8 f7 7f 00 00 e8 93 db c1 5e 5e 00 00 e8 7d b3 c8 f7 7f 00 00 e8 83 db c1 5e 5e 00 00 48 7e b3 c8 f7 7f 00 00 e8 73 db c1 5e 5e 00 00 a8 7e b3 c8 f7 7f 00 00 e8 63 db c1 5e 5e 00 00 08 7f b3 c8 f7 7f 00 00 e8 53 db c1 5e 5e 00 00 68 7f b3 c8 f7 7f 00 00 e8 43 db c1 5e 5e 00 00 c8 7f b3 c8 f7 7f 00 00 e8 33 db c1 5e 5e 00 00 28 80 b3 c8 f7 7f 00 00 e8 23 db c1 5e 5e 00 00 88 80 b3 c8 f7 7f 00 00 e8 13 db c1 5e 5e 00 00 e8 80 b3 c8 f7 7f 00 00 e8 03 db c1 5e 5e 00 00 48 81 b3 c8 f7 7f 00 00 e8 f3 da c1 5e 5e 00 00 a8 81 b3 c8 f7 7f 00 00 e8 e3 da c1 5e 5e 00 00 08 82 b3 c8 f7 7f 00 00 e8 d3 da c1 5e 5e 00 00 68 82 b3 c8 f7 7f 00 00 e8 c3 da c1 5e 5e 00 00 c8 82 b3 c8 f7 7f 00 00 e8 b3 da c1 5e 5e 00 00 28 83 b3 c8 f7 7f 00 00 e8 a3 da c1 5e 5e 00 00 88 83 b3 c8 f7 7f 00 00 e8 93 da c1 5e 5e 00 00 e8 83 b3 c8 f7 7f 00 00 e8 83 da c1 5e 5e 00 00 48 84 b3 c8 f7 7f 00 00 e8 73 da c1 5e 5e 00 00 a8 84 b3 c8 f7 7f 00 00 e8 63 da c1 5e 5e 00 00 08 85 b3 c8 f7 7f 00 00 e8 53 da c1 5e 5e 00 00 68 85 b3 c8 f7 7f 00 00 e8 43 da c1 5e 5e 00 00 c8 85 b3 c8 f7 7f 00 00 e8 33 da c1 5e 5e 00 00 28 86 b3 c8 f7 7f 00 00 e8 23 da c1 5e 5e 00 00 88 86 b3 c8 f7 7f 00 00 e8 13 da c1 5e 5e 00 00 e8 86 b3 c8 f7 7f 00 00 e8 03 da c1 5e 5e 00 00 48 87 b3 c8 f7 7f 00 00 e8 f3 d9 c1 5e 5e 00 00 a8 87 b3 c8 f7 7f 00 00 00 00 00 00 00 00 00 00
21        | 7ff7c8647e70h   | 247     | hex://root/BitConvert?GetBytes#GetBytes_g[8i](8i~in,span8u)                               | void GetBytes<sbyte>(in sbyte src, Span<byte> dst)                                        | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f be 09 88 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 f8 98 b2 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 0f b7 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 80 99 b2 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f bf 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 08 9a b2 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
22        | 7ff7c8647eb0h   | 183     | hex://root/BitConvert?GetBytes#GetBytes_g[16u](16u~in,span8u)                             | void GetBytes<ushort>(in ushort src, Span<byte> dst)                                      | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 0f b7 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 80 99 b2 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f bf 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 08 9a b2 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
23        | 7ff7c8647ef0h   | 119     | hex://root/BitConvert?GetBytes#GetBytes_g[16i](16i~in,span8u)                             | void GetBytes<short>(in short src, Span<byte> dst)                                        | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 0f bf 09 66 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 08 9a b2 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
24        | 7ff7c8647f30h   | 55      | hex://root/BitConvert?GetBytes#GetBytes_g[32u](32u~in,span8u)                             | void GetBytes<uint>(in uint src, Span<byte> dst)                                          | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
25        | 7ff7c8647f70h   | 55      | hex://root/BitConvert?GetBytes#GetBytes_g[32i](32i~in,span8u)                             | void GetBytes<int>(in int src, Span<byte> dst)                                            | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 8b 09 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 00 00 00
26        | 7ff7c8647fb0h   | 291     | hex://root/BitConvert?GetBytes#GetBytes_g[64u](64u~in,span8u)                             | void GetBytes<ulong>(in ulong src, Span<byte> dst)                                        | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 8b 09 48 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 a0 9b b2 c8 f7 7f 00 00 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 8b 09 48 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 28 9c b2 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fa 10 01 c5 fa 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 b0 9c b2 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 50 9d b2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
27        | 7ff7c8647ff0h   | 227     | hex://root/BitConvert?GetBytes#GetBytes_g[64i](64i~in,span8u)                             | void GetBytes<long>(in long src, Span<byte> dst)                                          | 48 83 ec 18 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 48 8b 09 48 89 08 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 00 00 00 19 04 01 00 04 22 00 00 40 00 00 00 00 00 00 00 28 9c b2 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fa 10 01 c5 fa 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 b0 9c b2 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 50 9d b2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
28        | 7ff7c8648030h   | 163     | hex://root/BitConvert?GetBytes#GetBytes_g[32f](32f~in,span8u)                             | void GetBytes<float>(in float src, Span<byte> dst)                                        | 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fa 10 01 c5 fa 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 b0 9c b2 c8 f7 7f 00 00 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 50 9d b2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
29        | 7ff7c8648070h   | 99      | hex://root/BitConvert?GetBytes#GetBytes_g[64f](64f~in,span8u)                             | void GetBytes<double>(in double src, Span<byte> dst)                                      | 48 83 ec 18 c5 f8 77 33 c0 48 89 44 24 08 48 8b 02 8b 52 08 c5 fb 10 01 c5 fb 11 00 48 89 44 24 08 89 54 24 10 48 83 c4 18 c3 cc cc 19 04 01 00 04 22 00 00 40 00 00 00 50 9d b2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
30        | 7ff7c86480b0h   | 35      | hex://root/BitConvert?ToInt16#ToInt16_(uspan8u,32i)                                       | short ToInt16(ReadOnlySpan<byte> src, int offset)                                         | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 0f bf 04 10 c3 00 00 00 19 00 00 00 40 00 00 00 00 00 00 00 00 00 00
31        | 7ff7c86480e0h   | 295     | hex://root/BitConvert?ToUInt16#ToUInt16_(uspan8u,32i)                                     | ushort ToUInt16(ReadOnlySpan<byte> src, int offset)                                       | 0f 1f 44 00 00 48 8b 01 48 63 d2 0f b7 04 10 c3 19 00 00 00 40 00 00 00 50 9e b2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 d0 9e b2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 50 9f b2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 d0 9f b2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 38 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 88 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 f0 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
32        | 7ff7c8648100h   | 263     | hex://root/BitConvert?ToInt32#ToInt32_(uspan8u,32i)                                       | int ToInt32(ReadOnlySpan<byte> src, int offset)                                           | 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 d0 9e b2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 50 9f b2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 d0 9f b2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 38 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 88 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 f0 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
33        | 7ff7c8648120h   | 231     | hex://root/BitConvert?ToUInt32#ToUInt32_(uspan8u,32i)                                     | uint ToUInt32(ReadOnlySpan<byte> src, int offset)                                         | 0f 1f 44 00 00 48 8b 01 48 63 d2 8b 04 10 c3 00 19 00 00 00 40 00 00 00 50 9f b2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 d0 9f b2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 38 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 88 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 f0 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
34        | 7ff7c8648140h   | 199     | hex://root/BitConvert?ToInt64#ToInt64_(uspan8u,32i)                                       | long ToInt64(ReadOnlySpan<byte> src, int offset)                                          | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 d0 9f b2 c8 f7 7f 00 00 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 38 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 88 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 f0 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
35        | 7ff7c8648160h   | 167     | hex://root/BitConvert?ToUInt64#ToUInt64_(uspan8u,32i)                                     | ulong ToUInt64(ReadOnlySpan<byte> src, int offset)                                        | 0f 1f 44 00 00 48 8b 01 48 63 d2 48 8b 04 10 c3 19 00 00 00 40 00 00 00 38 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 88 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 f0 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
36        | 7ff7c8648180h   | 135     | hex://root/BitConvert?ToSingle#ToSingle_(32i)                                             | float ToSingle(int src)                                                                   | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 88 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 f0 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
37        | 7ff7c86481b0h   | 87      | hex://root/BitConvert?ToSingle#ToSingle_(32u)                                             | float ToSingle(uint src)                                                                  | 50 c5 f8 77 90 89 4c 24 04 c5 fa 10 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 f0 a0 b2 c8 f7 7f 00 00 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
38        | 7ff7c86481e0h   | 39      | hex://root/BitConvert?ToDouble#ToDouble_(64i)                                             | double ToDouble(long src)                                                                 | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
39        | 7ff7c8648210h   | 39      | hex://root/BitConvert?ToDouble#ToDouble_(64u)                                             | double ToDouble(ulong src)                                                                | 50 c5 f8 77 90 48 89 0c 24 c5 fb 10 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
40        | 7ff7c8648240h   | 135     | hex://root/BitConvert?ToInt32#ToInt32_(32f)                                               | int ToInt32(float src)                                                                    | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 e0 a1 b2 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 a2 b2 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
41        | 7ff7c8648270h   | 87      | hex://root/BitConvert?ToUInt32#ToUInt32_(32f)                                             | uint ToUInt32(float src)                                                                  | 50 c5 f8 77 90 c5 fa 11 44 24 04 8b 44 24 04 48 83 c4 08 c3 cc 00 00 00 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 30 a2 b2 c8 f7 7f 00 00 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
42        | 7ff7c86482a0h   | 39      | hex://root/BitConvert?ToInt64#ToInt64_(64f)                                               | long ToInt64(double src)                                                                  | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
43        | 7ff7c86482d0h   | 39      | hex://root/BitConvert?ToUInt64#ToUInt64_(64f)                                             | ulong ToUInt64(double src)                                                                | 50 c5 f8 77 90 c5 fb 11 04 24 48 8b 04 24 48 83 c4 08 c3 cc 19 01 01 00 01 02 00 00 40 00 00 00 00 00 00 00 00 00 00
