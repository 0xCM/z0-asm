Sequence  | Address         | Length  | Host                          | OpId                                                        | OpName        | OpSig                                                                           | Data
0         | 7ff7c7e5a9d0h   | 67      | asmcore/AsmConstructs         | alloc_g[8u](32i)                                            | alloc         | Span<byte> alloc<byte>(int len)                                                 | 56 48 83 ec 20 48 8b f1 48 63 d2 48 b9 10 ea 70 c7 f7 7f 00 00 e8 f6 c3 40 5f 48 8d 50 10 8b 40 08 48 89 16 89 46 08 48 8b c6 48 83 c4 20 5e c3 19 05 02 00 05 32 01 60 40 00 00 00 00 00 00 00 00 00 00
1         | 7ff7c7e5d7b0h   | 67      | asmcore/AsmConstructs         | alloc_g[8i](32i)                                            | alloc         | Span<sbyte> alloc<sbyte>(int len)                                               | 56 48 83 ec 20 48 8b f1 48 63 d2 48 b9 98 f0 70 c7 f7 7f 00 00 e8 16 96 40 5f 48 8d 50 10 8b 40 08 48 89 16 89 46 08 48 8b c6 48 83 c4 20 5e c3 19 05 02 00 05 32 01 60 40 00 00 00 00 00 00 00 00 00 00
2         | 7ff7c7e5d800h   | 67      | asmcore/AsmConstructs         | alloc_g[16u](32i)                                           | alloc         | Span<ushort> alloc<ushort>(int len)                                             | 56 48 83 ec 20 48 8b f1 48 63 d2 48 b9 40 7b 05 c8 f7 7f 00 00 e8 c6 95 40 5f 48 8d 50 10 8b 40 08 48 89 16 89 46 08 48 8b c6 48 83 c4 20 5e c3 19 05 02 00 05 32 01 60 40 00 00 00 00 00 00 00 00 00 00
3         | 7ff7c7e5d850h   | 67      | asmcore/AsmConstructs         | alloc_g[16i](32i)                                           | alloc         | Span<short> alloc<short>(int len)                                               | 56 48 83 ec 20 48 8b f1 48 63 d2 48 b9 40 81 05 c8 f7 7f 00 00 e8 76 95 40 5f 48 8d 50 10 8b 40 08 48 89 16 89 46 08 48 8b c6 48 83 c4 20 5e c3 19 05 02 00 05 32 01 60 40 00 00 00 00 00 00 00 00 00 00
4         | 7ff7c7e5d8a0h   | 67      | asmcore/AsmConstructs         | alloc_g[32u](32i)                                           | alloc         | Span<uint> alloc<uint>(int len)                                                 | 56 48 83 ec 20 48 8b f1 48 63 d2 48 b9 20 84 05 c8 f7 7f 00 00 e8 26 95 40 5f 48 8d 50 10 8b 40 08 48 89 16 89 46 08 48 8b c6 48 83 c4 20 5e c3 19 05 02 00 05 32 01 60 40 00 00 00 00 00 00 00 00 00 00
5         | 7ff7c7e5da10h   | 67      | asmcore/AsmConstructs         | alloc_g[32i](32i)                                           | alloc         | Span<int> alloc<int>(int len)                                                   | 56 48 83 ec 20 48 8b f1 48 63 d2 48 b9 48 5f 7d c7 f7 7f 00 00 e8 b6 93 40 5f 48 8d 50 10 8b 40 08 48 89 16 89 46 08 48 8b c6 48 83 c4 20 5e c3 19 05 02 00 05 32 01 60 40 00 00 00 00 00 00 00 00 00 00
6         | 7ff7c7e5da60h   | 67      | asmcore/AsmConstructs         | alloc_g[64u](32i)                                           | alloc         | Span<ulong> alloc<ulong>(int len)                                               | 56 48 83 ec 20 48 8b f1 48 63 d2 48 b9 c8 70 a0 c7 f7 7f 00 00 e8 66 93 40 5f 48 8d 50 10 8b 40 08 48 89 16 89 46 08 48 8b c6 48 83 c4 20 5e c3 19 05 02 00 05 32 01 60 40 00 00 00 00 00 00 00 00 00 00
7         | 7ff7c7e5e0f0h   | 67      | asmcore/AsmConstructs         | alloc_g[64i](32i)                                           | alloc         | Span<long> alloc<long>(int len)                                                 | 56 48 83 ec 20 48 8b f1 48 63 d2 48 b9 c0 8c 05 c8 f7 7f 00 00 e8 d6 8c 40 5f 48 8d 50 10 8b 40 08 48 89 16 89 46 08 48 8b c6 48 83 c4 20 5e c3 19 05 02 00 05 32 01 60 40 00 00 00 00 00 00 00 00 00 00
8         | 7ff7c7e5e240h   | 67      | asmcore/AsmConstructs         | alloc_g[32f](32i)                                           | alloc         | Span<float> alloc<float>(int len)                                               | 56 48 83 ec 20 48 8b f1 48 63 d2 48 b9 00 ab b7 c7 f7 7f 00 00 e8 86 8b 40 5f 48 8d 50 10 8b 40 08 48 89 16 89 46 08 48 8b c6 48 83 c4 20 5e c3 19 05 02 00 05 32 01 60 40 00 00 00 00 00 00 00 00 00 00
9         | 7ff7c7e5e3b0h   | 67      | asmcore/AsmConstructs         | alloc_g[64f](32i)                                           | alloc         | Span<double> alloc<double>(int len)                                             | 56 48 83 ec 20 48 8b f1 48 63 d2 48 b9 08 ad b7 c7 f7 7f 00 00 e8 16 8a 40 5f 48 8d 50 10 8b 40 08 48 89 16 89 46 08 48 8b c6 48 83 c4 20 5e c3 19 05 02 00 05 32 01 60 40 00 00 00 00 00 00 00 00 00 00
10        | 7ff7c7e5e8d0h   | 67      | asmcore/AsmConstructs         | for_min_max_(32i,32i)                                       | for_min_max   | void for_min_max(int i0, int i1, Action<int> f)                                 | 57 56 53 48 83 ec 20 8b f2 49 8b f8 8b d9 3b de 7d 12 48 8b c7 48 8b 48 08 8b d3 ff 50 18 ff c3 3b de 7c ee 48 83 c4 20 5b 5e 5f c3 19 07 04 00 07 32 03 30 02 60 01 70 40 00 00 00 00 00 00 00 00 00 00
11        | 7ff7c7e5f080h   | 152     | asmcore/AsmConstructs         | for_min_max_()                                              | for_min_max   | int for_min_max()                                                               | 57 56 48 83 ec 28 48 b9 e8 f9 bb c7 f7 7f 00 00 e8 1b 7c 40 5f 48 8b f0 33 c9 89 4e 08 48 b9 08 98 05 c8 f7 7f 00 00 e8 04 7c 40 5f 48 8b f8 48 8d 4f 08 48 8b d6 e8 35 6d 40 5f 49 b8 c8 70 a2 c7 f7 7f 00 00 4c 89 47 18 4c 8b c7 33 c9 ba 08 00 00 00 e8 f8 f7 ff ff 8b 46 08 48 83 c4 28 5e 5f c3 00 00 19 06 03 00 06 42 02 60 01 70 00 00 40 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 8d 6d 08 2b f8 7f 00 00 d8 19 8c c7 f7 7f 00 00 00 00 00 00 00 00 00 00
12        | 7ff7c7e5f910h   | 903     | asmcore/AsmConstructs         | compute_32u_(BinaryBitLogicKind~8u,32u,32u)                 | compute_32u   | uint compute_32u(BinaryBitLogicKind:byte op, uint a, uint b)                    | 0f 1f 44 00 00 0f b6 c9 83 f9 0f 0f 87 89 00 00 00 8b c1 48 8d 0d 86 00 00 00 8b 0c 81 4c 8d 0d e1 ff ff ff 49 03 c9 ff e1 33 c0 eb 6f 8b c2 41 23 c0 eb 68 c4 e2 38 f2 c2 eb 61 8b c2 eb 5d c4 c2 68 f2 c0 eb 56 41 8b c0 eb 51 8b c2 41 33 c0 eb 4a 8b c2 41 0b c0 eb 43 8b c2 41 0b c0 f7 d0 eb 3a 8b c2 41 33 c0 f7 d0 eb 31 41 8b c0 f7 d0 eb 2a 41 8b c0 f7 d0 0b c2 eb 21 8b c2 f7 d0 eb 1b 8b c2 f7 d0 41 0b c0 eb 12 8b c2 41 23 c0 f7 d0 eb 09 b8 ff ff ff ff eb 02 33 c0 c3 00 00 00 24 00 00 00 28 00 00 00 2f 00 00 00 36 00 00 00 3a 00 00 00 41 00 00 00 46 00 00 00 4d 00 00 00 54 00 00 00 5d 00 00 00 66 00 00 00 6d 00 00 00 76 00 00 00 7c 00 00 00 85 00 00 00 8e 00 00 00 19 00 00 00 40 00 00 00 e0 28 06 c8 f7 7f 00 00 57 56 53 48 83 ec 40 c5 f8 77 33 c0 48 89 44 24 28 48 89 44 24 30 48 89 44 24 38 48 8b f9 48 8b f2 48 8b ce 48 8b 06 48 8b 40 70 ff 50 30 85 c0 75 31 48 b9 88 c7 7d c7 f7 7f 00 00 ba d8 00 00 00 e8 6a 76 40 5f 48 b9 60 59 00 10 9f 02 00 00 48 8b 09 48 83 c1 08 48 8b 19 48 8b 41 08 8b 49 10 eb 50 48 8b ce 48 8b 06 48 8b 40 40 ff 50 30 48 8b d8 48 8b ce 48 8b 06 48 8b 80 98 00 00 00 ff 50 38 48 8b c8 e8 35 36 8f ff 44 8b c0 33 c9 48 8d 54 24 28 c5 f8 57 c0 c5 fa 7f 02 48 89 4a 10 48 8d 4c 24 28 48 8b d3 e8 8a f3 8f ff 48 8b 5c 24 28 48 8b cb e8 45 c1 e9 4e 84 c0 75 1e 48 8b d3 b9 01 00 00 00 88 0f 48 8d 4f 08 e8 ee 62 40 5f 48 8b c7 48 83 c4 40 5b 5e 5f c3 33 c0 88 07 33 c0 48 89 47 08 48 8b c7 48 83 c4 40 5b 5e 5f c3 cc cc 19 07 04 00 07 72 03 30 02 60 01 70 40 00 00 00 00 00 00 00 68 29 06 c8 f7 7f 00 00 41 57 41 56 57 56 55 53 48 83 ec 48 33 c0 48 89 44 24 28 48 89 44 24 30 48 89 44 24 38 48 89 44 24 40 48 8b f1 41 8b f8 48 8d 4e 08 e8 7f 62 40 5f 89 7e 10 48 8b de 85 ff 75 12 48 b9 60 30 00 10 9f 02 00 00 48 8b 11 e9 02 01 00 00 48 b9 10 67 70 c7 f7 7f 00 00 e8 44 71 40 5f 48 8b e8 48 8b 5b 08 66 c7 45 08 7e 00 48 b9 08 8f 70 c7 f7 7f 00 00 e8 28 71 40 5f 4c 8b f0 0f b7 cf 41 89 4e 08 f7 c7 00 00 00 20 74 08 41 bf 75 00 00 00 eb 23 f7 c7 00 00 00 80 74 08 41 bf 69 00 00 00 eb 13 f7 c7 00 00 00 40 74 08 41 bf 66 00 00 00 eb 03 45 33 ff 45 85 ff 75 07 bf 65 00 00 00 eb 03 41 8b ff b9 01 00 00 00 e8 ca 48 8d ff 66 89 78 0c 45 33 c0 48 ba 90 13 00 10 9f 02 00 00 48 8b 12 48 b9 60 98 00 10 9f 02 00 00 48 8b 09 4c 8d 4c 24 28 4d 89 31 49 89 41 08 4d 89 41 10 49 89 51 18 4c 8d 44 24 28 48 8b d1 33 c9 e8 1e 60 ea 4e 49 b8 98 13 00 10 9f 02 00 00 4d 8b 00 48 ba 08 99 00 10 9f 02 00 00 48 8b 12 48 8d 4c 24 28 48 89 19 48 89 69 08 48 89 41 10 4c 89 41 18 4c 8d 44 24 28 33 c9 e8 e4 5f ea 4e 48 8b d0 48 8b ce e8 59 61 40 5f 90 48 83 c4 48 5b 5d 5e 5f 41 5e 41 5f c3 00 00 00 19 0c 07 00 0c 82 08 30 07 50 06 60 05 70 04 e0 02 f0 00 00 40 00 00 00 00 00 00 00 00 00 00
