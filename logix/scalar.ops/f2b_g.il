// T Z0.Logix.ScalarOps::f2b<T>(T,T,T)
// byte f2b<byte>(byte a, byte b, byte c)
// AggressiveInlining
byte f2b<byte>(byte a, byte b, byte c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.1
    IL_0002: ldarg.0
    IL_0003: call T Z0.Logix.ScalarOps::nand<T>(T,T)
    IL_0008: ldarg.1
    IL_0009: ldarg.0
    IL_000A: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_000F: call T Z0.Logix.ScalarOps::select<T>(T,T,T)
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// T Z0.Logix.ScalarOps::f2b<T>(T,T,T)
// sbyte f2b<sbyte>(sbyte a, sbyte b, sbyte c)
// AggressiveInlining
sbyte f2b<sbyte>(sbyte a, sbyte b, sbyte c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.1
    IL_0002: ldarg.0
    IL_0003: call T Z0.Logix.ScalarOps::nand<T>(T,T)
    IL_0008: ldarg.1
    IL_0009: ldarg.0
    IL_000A: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_000F: call T Z0.Logix.ScalarOps::select<T>(T,T,T)
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// T Z0.Logix.ScalarOps::f2b<T>(T,T,T)
// ushort f2b<ushort>(ushort a, ushort b, ushort c)
// AggressiveInlining
ushort f2b<ushort>(ushort a, ushort b, ushort c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.1
    IL_0002: ldarg.0
    IL_0003: call T Z0.Logix.ScalarOps::nand<T>(T,T)
    IL_0008: ldarg.1
    IL_0009: ldarg.0
    IL_000A: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_000F: call T Z0.Logix.ScalarOps::select<T>(T,T,T)
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// T Z0.Logix.ScalarOps::f2b<T>(T,T,T)
// short f2b<short>(short a, short b, short c)
// AggressiveInlining
short f2b<short>(short a, short b, short c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.1
    IL_0002: ldarg.0
    IL_0003: call T Z0.Logix.ScalarOps::nand<T>(T,T)
    IL_0008: ldarg.1
    IL_0009: ldarg.0
    IL_000A: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_000F: call T Z0.Logix.ScalarOps::select<T>(T,T,T)
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// T Z0.Logix.ScalarOps::f2b<T>(T,T,T)
// uint f2b<uint>(uint a, uint b, uint c)
// AggressiveInlining
uint f2b<uint>(uint a, uint b, uint c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.1
    IL_0002: ldarg.0
    IL_0003: call T Z0.Logix.ScalarOps::nand<T>(T,T)
    IL_0008: ldarg.1
    IL_0009: ldarg.0
    IL_000A: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_000F: call T Z0.Logix.ScalarOps::select<T>(T,T,T)
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// T Z0.Logix.ScalarOps::f2b<T>(T,T,T)
// int f2b<int>(int a, int b, int c)
// AggressiveInlining
int f2b<int>(int a, int b, int c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.1
    IL_0002: ldarg.0
    IL_0003: call T Z0.Logix.ScalarOps::nand<T>(T,T)
    IL_0008: ldarg.1
    IL_0009: ldarg.0
    IL_000A: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_000F: call T Z0.Logix.ScalarOps::select<T>(T,T,T)
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// T Z0.Logix.ScalarOps::f2b<T>(T,T,T)
// ulong f2b<ulong>(ulong a, ulong b, ulong c)
// AggressiveInlining
ulong f2b<ulong>(ulong a, ulong b, ulong c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.1
    IL_0002: ldarg.0
    IL_0003: call T Z0.Logix.ScalarOps::nand<T>(T,T)
    IL_0008: ldarg.1
    IL_0009: ldarg.0
    IL_000A: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_000F: call T Z0.Logix.ScalarOps::select<T>(T,T,T)
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
// T Z0.Logix.ScalarOps::f2b<T>(T,T,T)
// long f2b<long>(long a, long b, long c)
// AggressiveInlining
long f2b<long>(long a, long b, long c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.1
    IL_0002: ldarg.0
    IL_0003: call T Z0.Logix.ScalarOps::nand<T>(T,T)
    IL_0008: ldarg.1
    IL_0009: ldarg.0
    IL_000A: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_000F: call T Z0.Logix.ScalarOps::select<T>(T,T,T)
    IL_0014: ret
}
------------------------------------------------------------------------------------------------------------------------
