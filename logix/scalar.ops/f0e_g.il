// Id := 100664588, Name := T Z0.Logix.ScalarOps::f0e<T>(T,T,T)
// byte f0e<byte>(byte a, byte b, byte c)
// AggressiveInlining
byte f0e<byte>(byte a, byte b, byte c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664588, Name := T Z0.Logix.ScalarOps::f0e<T>(T,T,T)
// sbyte f0e<sbyte>(sbyte a, sbyte b, sbyte c)
// AggressiveInlining
sbyte f0e<sbyte>(sbyte a, sbyte b, sbyte c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664588, Name := T Z0.Logix.ScalarOps::f0e<T>(T,T,T)
// ushort f0e<ushort>(ushort a, ushort b, ushort c)
// AggressiveInlining
ushort f0e<ushort>(ushort a, ushort b, ushort c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664588, Name := T Z0.Logix.ScalarOps::f0e<T>(T,T,T)
// short f0e<short>(short a, short b, short c)
// AggressiveInlining
short f0e<short>(short a, short b, short c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664588, Name := T Z0.Logix.ScalarOps::f0e<T>(T,T,T)
// uint f0e<uint>(uint a, uint b, uint c)
// AggressiveInlining
uint f0e<uint>(uint a, uint b, uint c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664588, Name := T Z0.Logix.ScalarOps::f0e<T>(T,T,T)
// int f0e<int>(int a, int b, int c)
// AggressiveInlining
int f0e<int>(int a, int b, int c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664588, Name := T Z0.Logix.ScalarOps::f0e<T>(T,T,T)
// ulong f0e<ulong>(ulong a, ulong b, ulong c)
// AggressiveInlining
ulong f0e<ulong>(ulong a, ulong b, ulong c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664588, Name := T Z0.Logix.ScalarOps::f0e<T>(T,T,T)
// long f0e<long>(long a, long b, long c)
// AggressiveInlining
long f0e<long>(long a, long b, long c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
