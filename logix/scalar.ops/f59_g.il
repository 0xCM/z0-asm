// Id := 100664663, Name := T Z0.Logix.ScalarOps::f59<T>(T,T,T)
// byte f59<byte>(byte a, byte b, byte c)
// AggressiveInlining
byte f59<byte>(byte a, byte b, byte c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0008: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_000D: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664663, Name := T Z0.Logix.ScalarOps::f59<T>(T,T,T)
// sbyte f59<sbyte>(sbyte a, sbyte b, sbyte c)
// AggressiveInlining
sbyte f59<sbyte>(sbyte a, sbyte b, sbyte c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0008: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_000D: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664663, Name := T Z0.Logix.ScalarOps::f59<T>(T,T,T)
// ushort f59<ushort>(ushort a, ushort b, ushort c)
// AggressiveInlining
ushort f59<ushort>(ushort a, ushort b, ushort c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0008: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_000D: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664663, Name := T Z0.Logix.ScalarOps::f59<T>(T,T,T)
// short f59<short>(short a, short b, short c)
// AggressiveInlining
short f59<short>(short a, short b, short c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0008: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_000D: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664663, Name := T Z0.Logix.ScalarOps::f59<T>(T,T,T)
// uint f59<uint>(uint a, uint b, uint c)
// AggressiveInlining
uint f59<uint>(uint a, uint b, uint c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0008: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_000D: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664663, Name := T Z0.Logix.ScalarOps::f59<T>(T,T,T)
// int f59<int>(int a, int b, int c)
// AggressiveInlining
int f59<int>(int a, int b, int c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0008: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_000D: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664663, Name := T Z0.Logix.ScalarOps::f59<T>(T,T,T)
// ulong f59<ulong>(ulong a, ulong b, ulong c)
// AggressiveInlining
ulong f59<ulong>(ulong a, ulong b, ulong c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0008: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_000D: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664663, Name := T Z0.Logix.ScalarOps::f59<T>(T,T,T)
// long f59<long>(long a, long b, long c)
// AggressiveInlining
long f59<long>(long a, long b, long c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0008: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_000D: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
