// T Z0.Logix.ScalarOps::f19<T>(T,T,T)
// byte f19<byte>(byte a, byte b, byte c)
// AggressiveInlining
byte f19<byte>(byte a, byte b, byte c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: ldarg.2
    IL_000A: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000F: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0014: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0019: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_001E: ret
}
------------------------------------------------------------------------------------------------------------------------
// T Z0.Logix.ScalarOps::f19<T>(T,T,T)
// sbyte f19<sbyte>(sbyte a, sbyte b, sbyte c)
// AggressiveInlining
sbyte f19<sbyte>(sbyte a, sbyte b, sbyte c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: ldarg.2
    IL_000A: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000F: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0014: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0019: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_001E: ret
}
------------------------------------------------------------------------------------------------------------------------
// T Z0.Logix.ScalarOps::f19<T>(T,T,T)
// ushort f19<ushort>(ushort a, ushort b, ushort c)
// AggressiveInlining
ushort f19<ushort>(ushort a, ushort b, ushort c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: ldarg.2
    IL_000A: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000F: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0014: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0019: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_001E: ret
}
------------------------------------------------------------------------------------------------------------------------
// T Z0.Logix.ScalarOps::f19<T>(T,T,T)
// short f19<short>(short a, short b, short c)
// AggressiveInlining
short f19<short>(short a, short b, short c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: ldarg.2
    IL_000A: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000F: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0014: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0019: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_001E: ret
}
------------------------------------------------------------------------------------------------------------------------
// T Z0.Logix.ScalarOps::f19<T>(T,T,T)
// uint f19<uint>(uint a, uint b, uint c)
// AggressiveInlining
uint f19<uint>(uint a, uint b, uint c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: ldarg.2
    IL_000A: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000F: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0014: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0019: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_001E: ret
}
------------------------------------------------------------------------------------------------------------------------
// T Z0.Logix.ScalarOps::f19<T>(T,T,T)
// int f19<int>(int a, int b, int c)
// AggressiveInlining
int f19<int>(int a, int b, int c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: ldarg.2
    IL_000A: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000F: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0014: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0019: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_001E: ret
}
------------------------------------------------------------------------------------------------------------------------
// T Z0.Logix.ScalarOps::f19<T>(T,T,T)
// ulong f19<ulong>(ulong a, ulong b, ulong c)
// AggressiveInlining
ulong f19<ulong>(ulong a, ulong b, ulong c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: ldarg.2
    IL_000A: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000F: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0014: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0019: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_001E: ret
}
------------------------------------------------------------------------------------------------------------------------
// T Z0.Logix.ScalarOps::f19<T>(T,T,T)
// long f19<long>(long a, long b, long c)
// AggressiveInlining
long f19<long>(long a, long b, long c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: ldarg.2
    IL_000A: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000F: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0014: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0019: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_001E: ret
}
------------------------------------------------------------------------------------------------------------------------
