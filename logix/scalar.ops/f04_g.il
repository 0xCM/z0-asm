// Id := 100664578, Name := T Z0.Logix.ScalarOps::f04<T>(T,T,T)
// byte f04<byte>(byte a, byte b, byte c)
// AggressiveInlining
byte f04<byte>(byte a, byte b, byte c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldarg.2
    IL_0003: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664578, Name := T Z0.Logix.ScalarOps::f04<T>(T,T,T)
// sbyte f04<sbyte>(sbyte a, sbyte b, sbyte c)
// AggressiveInlining
sbyte f04<sbyte>(sbyte a, sbyte b, sbyte c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldarg.2
    IL_0003: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664578, Name := T Z0.Logix.ScalarOps::f04<T>(T,T,T)
// ushort f04<ushort>(ushort a, ushort b, ushort c)
// AggressiveInlining
ushort f04<ushort>(ushort a, ushort b, ushort c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldarg.2
    IL_0003: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664578, Name := T Z0.Logix.ScalarOps::f04<T>(T,T,T)
// short f04<short>(short a, short b, short c)
// AggressiveInlining
short f04<short>(short a, short b, short c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldarg.2
    IL_0003: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664578, Name := T Z0.Logix.ScalarOps::f04<T>(T,T,T)
// uint f04<uint>(uint a, uint b, uint c)
// AggressiveInlining
uint f04<uint>(uint a, uint b, uint c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldarg.2
    IL_0003: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664578, Name := T Z0.Logix.ScalarOps::f04<T>(T,T,T)
// int f04<int>(int a, int b, int c)
// AggressiveInlining
int f04<int>(int a, int b, int c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldarg.2
    IL_0003: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664578, Name := T Z0.Logix.ScalarOps::f04<T>(T,T,T)
// ulong f04<ulong>(ulong a, ulong b, ulong c)
// AggressiveInlining
ulong f04<ulong>(ulong a, ulong b, ulong c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldarg.2
    IL_0003: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664578, Name := T Z0.Logix.ScalarOps::f04<T>(T,T,T)
// long f04<long>(long a, long b, long c)
// AggressiveInlining
long f04<long>(long a, long b, long c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldarg.2
    IL_0003: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
