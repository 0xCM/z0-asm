// Id := 100664635, Name := T Z0.Logix.ScalarOps::f38<T>(T,T,T)
// byte f38<byte>(byte a, byte b, byte c)
// AggressiveInlining
byte f38<byte>(byte a, byte b, byte c)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664635, Name := T Z0.Logix.ScalarOps::f38<T>(T,T,T)
// sbyte f38<sbyte>(sbyte a, sbyte b, sbyte c)
// AggressiveInlining
sbyte f38<sbyte>(sbyte a, sbyte b, sbyte c)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664635, Name := T Z0.Logix.ScalarOps::f38<T>(T,T,T)
// ushort f38<ushort>(ushort a, ushort b, ushort c)
// AggressiveInlining
ushort f38<ushort>(ushort a, ushort b, ushort c)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664635, Name := T Z0.Logix.ScalarOps::f38<T>(T,T,T)
// short f38<short>(short a, short b, short c)
// AggressiveInlining
short f38<short>(short a, short b, short c)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664635, Name := T Z0.Logix.ScalarOps::f38<T>(T,T,T)
// uint f38<uint>(uint a, uint b, uint c)
// AggressiveInlining
uint f38<uint>(uint a, uint b, uint c)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664635, Name := T Z0.Logix.ScalarOps::f38<T>(T,T,T)
// int f38<int>(int a, int b, int c)
// AggressiveInlining
int f38<int>(int a, int b, int c)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664635, Name := T Z0.Logix.ScalarOps::f38<T>(T,T,T)
// ulong f38<ulong>(ulong a, ulong b, ulong c)
// AggressiveInlining
ulong f38<ulong>(ulong a, ulong b, ulong c)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664635, Name := T Z0.Logix.ScalarOps::f38<T>(T,T,T)
// long f38<long>(long a, long b, long c)
// AggressiveInlining
long f38<long>(long a, long b, long c)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
