// Id := 100664561, Name := T Z0.Logix.ScalarOps::neq<T>(T,T)
// byte neq<byte>(byte a, byte b)
// AggressiveInlining
byte neq<byte>(byte a, byte b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.bit Z0.gmath::neq<T>(T,T)
    IL_0007: call T Z0.Logix.ScalarOps::promote<T>(Z0.bit)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664561, Name := T Z0.Logix.ScalarOps::neq<T>(T,T)
// sbyte neq<sbyte>(sbyte a, sbyte b)
// AggressiveInlining
sbyte neq<sbyte>(sbyte a, sbyte b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.bit Z0.gmath::neq<T>(T,T)
    IL_0007: call T Z0.Logix.ScalarOps::promote<T>(Z0.bit)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664561, Name := T Z0.Logix.ScalarOps::neq<T>(T,T)
// ushort neq<ushort>(ushort a, ushort b)
// AggressiveInlining
ushort neq<ushort>(ushort a, ushort b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.bit Z0.gmath::neq<T>(T,T)
    IL_0007: call T Z0.Logix.ScalarOps::promote<T>(Z0.bit)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664561, Name := T Z0.Logix.ScalarOps::neq<T>(T,T)
// short neq<short>(short a, short b)
// AggressiveInlining
short neq<short>(short a, short b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.bit Z0.gmath::neq<T>(T,T)
    IL_0007: call T Z0.Logix.ScalarOps::promote<T>(Z0.bit)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664561, Name := T Z0.Logix.ScalarOps::neq<T>(T,T)
// uint neq<uint>(uint a, uint b)
// AggressiveInlining
uint neq<uint>(uint a, uint b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.bit Z0.gmath::neq<T>(T,T)
    IL_0007: call T Z0.Logix.ScalarOps::promote<T>(Z0.bit)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664561, Name := T Z0.Logix.ScalarOps::neq<T>(T,T)
// int neq<int>(int a, int b)
// AggressiveInlining
int neq<int>(int a, int b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.bit Z0.gmath::neq<T>(T,T)
    IL_0007: call T Z0.Logix.ScalarOps::promote<T>(Z0.bit)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664561, Name := T Z0.Logix.ScalarOps::neq<T>(T,T)
// ulong neq<ulong>(ulong a, ulong b)
// AggressiveInlining
ulong neq<ulong>(ulong a, ulong b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.bit Z0.gmath::neq<T>(T,T)
    IL_0007: call T Z0.Logix.ScalarOps::promote<T>(Z0.bit)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664561, Name := T Z0.Logix.ScalarOps::neq<T>(T,T)
// long neq<long>(long a, long b)
// AggressiveInlining
long neq<long>(long a, long b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.bit Z0.gmath::neq<T>(T,T)
    IL_0007: call T Z0.Logix.ScalarOps::promote<T>(Z0.bit)
    IL_000C: ret
}
------------------------------------------------------------------------------------------------------------------------
