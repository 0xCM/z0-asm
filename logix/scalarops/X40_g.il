// Id := 100664643, Name := T Z0.Logix.ScalarOps::f40<T>(T,T,T)
// byte f40<byte>(byte a, byte b, byte c)
// AggressiveInlining
byte f40<byte>(byte a, byte b, byte c)
{
    IL_0000: ldarg.2
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.0
    IL_0007: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664643, Name := T Z0.Logix.ScalarOps::f40<T>(T,T,T)
// sbyte f40<sbyte>(sbyte a, sbyte b, sbyte c)
// AggressiveInlining
sbyte f40<sbyte>(sbyte a, sbyte b, sbyte c)
{
    IL_0000: ldarg.2
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.0
    IL_0007: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664643, Name := T Z0.Logix.ScalarOps::f40<T>(T,T,T)
// ushort f40<ushort>(ushort a, ushort b, ushort c)
// AggressiveInlining
ushort f40<ushort>(ushort a, ushort b, ushort c)
{
    IL_0000: ldarg.2
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.0
    IL_0007: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664643, Name := T Z0.Logix.ScalarOps::f40<T>(T,T,T)
// Int16 f40<Int16>(Int16 a, Int16 b, Int16 c)
// AggressiveInlining
Int16 f40<Int16>(Int16 a, Int16 b, Int16 c)
{
    IL_0000: ldarg.2
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.0
    IL_0007: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664643, Name := T Z0.Logix.ScalarOps::f40<T>(T,T,T)
// uint f40<uint>(uint a, uint b, uint c)
// AggressiveInlining
uint f40<uint>(uint a, uint b, uint c)
{
    IL_0000: ldarg.2
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.0
    IL_0007: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664643, Name := T Z0.Logix.ScalarOps::f40<T>(T,T,T)
// int f40<int>(int a, int b, int c)
// AggressiveInlining
int f40<int>(int a, int b, int c)
{
    IL_0000: ldarg.2
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.0
    IL_0007: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664643, Name := T Z0.Logix.ScalarOps::f40<T>(T,T,T)
// ulong f40<ulong>(ulong a, ulong b, ulong c)
// AggressiveInlining
ulong f40<ulong>(ulong a, ulong b, ulong c)
{
    IL_0000: ldarg.2
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.0
    IL_0007: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664643, Name := T Z0.Logix.ScalarOps::f40<T>(T,T,T)
// long f40<long>(long a, long b, long c)
// AggressiveInlining
long f40<long>(long a, long b, long c)
{
    IL_0000: ldarg.2
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.0
    IL_0007: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: ret
}
------------------------------------------------------------------------------------------------------------------------
