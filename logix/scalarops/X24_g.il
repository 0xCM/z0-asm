// Id := 100664615, Name := T Z0.Logix.ScalarOps::f24<T>(T,T,T)
// byte f24<byte>(byte a, byte b, byte c)
// AggressiveInlining
byte f24<byte>(byte a, byte b, byte c)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0007: ldarg.1
    IL_0008: ldarg.2
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664615, Name := T Z0.Logix.ScalarOps::f24<T>(T,T,T)
// sbyte f24<sbyte>(sbyte a, sbyte b, sbyte c)
// AggressiveInlining
sbyte f24<sbyte>(sbyte a, sbyte b, sbyte c)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0007: ldarg.1
    IL_0008: ldarg.2
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664615, Name := T Z0.Logix.ScalarOps::f24<T>(T,T,T)
// ushort f24<ushort>(ushort a, ushort b, ushort c)
// AggressiveInlining
ushort f24<ushort>(ushort a, ushort b, ushort c)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0007: ldarg.1
    IL_0008: ldarg.2
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664615, Name := T Z0.Logix.ScalarOps::f24<T>(T,T,T)
// Int16 f24<Int16>(Int16 a, Int16 b, Int16 c)
// AggressiveInlining
Int16 f24<Int16>(Int16 a, Int16 b, Int16 c)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0007: ldarg.1
    IL_0008: ldarg.2
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664615, Name := T Z0.Logix.ScalarOps::f24<T>(T,T,T)
// uint f24<uint>(uint a, uint b, uint c)
// AggressiveInlining
uint f24<uint>(uint a, uint b, uint c)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0007: ldarg.1
    IL_0008: ldarg.2
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664615, Name := T Z0.Logix.ScalarOps::f24<T>(T,T,T)
// int f24<int>(int a, int b, int c)
// AggressiveInlining
int f24<int>(int a, int b, int c)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0007: ldarg.1
    IL_0008: ldarg.2
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664615, Name := T Z0.Logix.ScalarOps::f24<T>(T,T,T)
// ulong f24<ulong>(ulong a, ulong b, ulong c)
// AggressiveInlining
ulong f24<ulong>(ulong a, ulong b, ulong c)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0007: ldarg.1
    IL_0008: ldarg.2
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664615, Name := T Z0.Logix.ScalarOps::f24<T>(T,T,T)
// long f24<long>(long a, long b, long c)
// AggressiveInlining
long f24<long>(long a, long b, long c)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0007: ldarg.1
    IL_0008: ldarg.2
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
