// Id := 100664619, Name := T Z0.Logix.ScalarOps::f28<T>(T,T,T)
// byte f28<byte>(byte a, byte b, byte c)
// AggressiveInlining
byte f28<byte>(byte a, byte b, byte c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.1
    IL_0002: ldarg.0
    IL_0003: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664619, Name := T Z0.Logix.ScalarOps::f28<T>(T,T,T)
// sbyte f28<sbyte>(sbyte a, sbyte b, sbyte c)
// AggressiveInlining
sbyte f28<sbyte>(sbyte a, sbyte b, sbyte c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.1
    IL_0002: ldarg.0
    IL_0003: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664619, Name := T Z0.Logix.ScalarOps::f28<T>(T,T,T)
// ushort f28<ushort>(ushort a, ushort b, ushort c)
// AggressiveInlining
ushort f28<ushort>(ushort a, ushort b, ushort c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.1
    IL_0002: ldarg.0
    IL_0003: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664619, Name := T Z0.Logix.ScalarOps::f28<T>(T,T,T)
// short f28<short>(short a, short b, short c)
// AggressiveInlining
short f28<short>(short a, short b, short c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.1
    IL_0002: ldarg.0
    IL_0003: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664619, Name := T Z0.Logix.ScalarOps::f28<T>(T,T,T)
// uint f28<uint>(uint a, uint b, uint c)
// AggressiveInlining
uint f28<uint>(uint a, uint b, uint c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.1
    IL_0002: ldarg.0
    IL_0003: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664619, Name := T Z0.Logix.ScalarOps::f28<T>(T,T,T)
// int f28<int>(int a, int b, int c)
// AggressiveInlining
int f28<int>(int a, int b, int c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.1
    IL_0002: ldarg.0
    IL_0003: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664619, Name := T Z0.Logix.ScalarOps::f28<T>(T,T,T)
// ulong f28<ulong>(ulong a, ulong b, ulong c)
// AggressiveInlining
ulong f28<ulong>(ulong a, ulong b, ulong c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.1
    IL_0002: ldarg.0
    IL_0003: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664619, Name := T Z0.Logix.ScalarOps::f28<T>(T,T,T)
// long f28<long>(long a, long b, long c)
// AggressiveInlining
long f28<long>(long a, long b, long c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.1
    IL_0002: ldarg.0
    IL_0003: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
