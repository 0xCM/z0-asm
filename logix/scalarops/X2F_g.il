// Id := 100664626, Name := T Z0.Logix.ScalarOps::f2f<T>(T,T,T)
// byte f2f<byte>(byte a, byte b, byte c)
// AggressiveInlining
byte f2f<byte>(byte a, byte b, byte c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.1
    IL_0007: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_000C: ldarg.2
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664626, Name := T Z0.Logix.ScalarOps::f2f<T>(T,T,T)
// sbyte f2f<sbyte>(sbyte a, sbyte b, sbyte c)
// AggressiveInlining
sbyte f2f<sbyte>(sbyte a, sbyte b, sbyte c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.1
    IL_0007: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_000C: ldarg.2
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664626, Name := T Z0.Logix.ScalarOps::f2f<T>(T,T,T)
// ushort f2f<ushort>(ushort a, ushort b, ushort c)
// AggressiveInlining
ushort f2f<ushort>(ushort a, ushort b, ushort c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.1
    IL_0007: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_000C: ldarg.2
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664626, Name := T Z0.Logix.ScalarOps::f2f<T>(T,T,T)
// Int16 f2f<Int16>(Int16 a, Int16 b, Int16 c)
// AggressiveInlining
Int16 f2f<Int16>(Int16 a, Int16 b, Int16 c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.1
    IL_0007: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_000C: ldarg.2
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664626, Name := T Z0.Logix.ScalarOps::f2f<T>(T,T,T)
// uint f2f<uint>(uint a, uint b, uint c)
// AggressiveInlining
uint f2f<uint>(uint a, uint b, uint c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.1
    IL_0007: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_000C: ldarg.2
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664626, Name := T Z0.Logix.ScalarOps::f2f<T>(T,T,T)
// int f2f<int>(int a, int b, int c)
// AggressiveInlining
int f2f<int>(int a, int b, int c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.1
    IL_0007: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_000C: ldarg.2
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664626, Name := T Z0.Logix.ScalarOps::f2f<T>(T,T,T)
// ulong f2f<ulong>(ulong a, ulong b, ulong c)
// AggressiveInlining
ulong f2f<ulong>(ulong a, ulong b, ulong c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.1
    IL_0007: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_000C: ldarg.2
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664626, Name := T Z0.Logix.ScalarOps::f2f<T>(T,T,T)
// long f2f<long>(long a, long b, long c)
// AggressiveInlining
long f2f<long>(long a, long b, long c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.1
    IL_0007: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_000C: ldarg.2
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
