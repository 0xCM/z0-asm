// Id := 100664623, Name := T Z0.Logix.ScalarOps::f2c<T>(T,T,T)
// byte f2c<byte>(byte a, byte b, byte c)
// AggressiveInlining
byte f2c<byte>(byte a, byte b, byte c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664623, Name := T Z0.Logix.ScalarOps::f2c<T>(T,T,T)
// sbyte f2c<sbyte>(sbyte a, sbyte b, sbyte c)
// AggressiveInlining
sbyte f2c<sbyte>(sbyte a, sbyte b, sbyte c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664623, Name := T Z0.Logix.ScalarOps::f2c<T>(T,T,T)
// ushort f2c<ushort>(ushort a, ushort b, ushort c)
// AggressiveInlining
ushort f2c<ushort>(ushort a, ushort b, ushort c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664623, Name := T Z0.Logix.ScalarOps::f2c<T>(T,T,T)
// short f2c<short>(short a, short b, short c)
// AggressiveInlining
short f2c<short>(short a, short b, short c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664623, Name := T Z0.Logix.ScalarOps::f2c<T>(T,T,T)
// uint f2c<uint>(uint a, uint b, uint c)
// AggressiveInlining
uint f2c<uint>(uint a, uint b, uint c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664623, Name := T Z0.Logix.ScalarOps::f2c<T>(T,T,T)
// int f2c<int>(int a, int b, int c)
// AggressiveInlining
int f2c<int>(int a, int b, int c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664623, Name := T Z0.Logix.ScalarOps::f2c<T>(T,T,T)
// ulong f2c<ulong>(ulong a, ulong b, ulong c)
// AggressiveInlining
ulong f2c<ulong>(ulong a, ulong b, ulong c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664623, Name := T Z0.Logix.ScalarOps::f2c<T>(T,T,T)
// long f2c<long>(long a, long b, long c)
// AggressiveInlining
long f2c<long>(long a, long b, long c)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.2
    IL_0002: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0007: ldarg.0
    IL_0008: ldarg.1
    IL_0009: call T Z0.Logix.ScalarOps::xor<T>(T,T)
    IL_000E: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0013: ret
}
------------------------------------------------------------------------------------------------------------------------
