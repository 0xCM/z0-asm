// Id := 100664600, Name := T Z0.Logix.ScalarOps::f15<T>(T,T,T)
// byte f15<byte>(byte a, byte b, byte c)
// AggressiveInlining
byte f15<byte>(byte a, byte b, byte c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664600, Name := T Z0.Logix.ScalarOps::f15<T>(T,T,T)
// sbyte f15<sbyte>(sbyte a, sbyte b, sbyte c)
// AggressiveInlining
sbyte f15<sbyte>(sbyte a, sbyte b, sbyte c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664600, Name := T Z0.Logix.ScalarOps::f15<T>(T,T,T)
// ushort f15<ushort>(ushort a, ushort b, ushort c)
// AggressiveInlining
ushort f15<ushort>(ushort a, ushort b, ushort c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664600, Name := T Z0.Logix.ScalarOps::f15<T>(T,T,T)
// short f15<short>(short a, short b, short c)
// AggressiveInlining
short f15<short>(short a, short b, short c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664600, Name := T Z0.Logix.ScalarOps::f15<T>(T,T,T)
// uint f15<uint>(uint a, uint b, uint c)
// AggressiveInlining
uint f15<uint>(uint a, uint b, uint c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664600, Name := T Z0.Logix.ScalarOps::f15<T>(T,T,T)
// int f15<int>(int a, int b, int c)
// AggressiveInlining
int f15<int>(int a, int b, int c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664600, Name := T Z0.Logix.ScalarOps::f15<T>(T,T,T)
// ulong f15<ulong>(ulong a, ulong b, ulong c)
// AggressiveInlining
ulong f15<ulong>(ulong a, ulong b, ulong c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664600, Name := T Z0.Logix.ScalarOps::f15<T>(T,T,T)
// long f15<long>(long a, long b, long c)
// AggressiveInlining
long f15<long>(long a, long b, long c)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0008: call T Z0.Logix.ScalarOps::nor<T>(T,T)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
