// Id := 100664638, Name := T Z0.Logix.ScalarOps::f3b<T>(T,T,T)
// byte f3b<byte>(byte a, byte b, byte c)
// AggressiveInlining
byte f3b<byte>(byte a, byte b, byte c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.2
    IL_0007: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::xor1<T>(T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664638, Name := T Z0.Logix.ScalarOps::f3b<T>(T,T,T)
// sbyte f3b<sbyte>(sbyte a, sbyte b, sbyte c)
// AggressiveInlining
sbyte f3b<sbyte>(sbyte a, sbyte b, sbyte c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.2
    IL_0007: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::xor1<T>(T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664638, Name := T Z0.Logix.ScalarOps::f3b<T>(T,T,T)
// ushort f3b<ushort>(ushort a, ushort b, ushort c)
// AggressiveInlining
ushort f3b<ushort>(ushort a, ushort b, ushort c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.2
    IL_0007: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::xor1<T>(T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664638, Name := T Z0.Logix.ScalarOps::f3b<T>(T,T,T)
// Int16 f3b<Int16>(Int16 a, Int16 b, Int16 c)
// AggressiveInlining
Int16 f3b<Int16>(Int16 a, Int16 b, Int16 c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.2
    IL_0007: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::xor1<T>(T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664638, Name := T Z0.Logix.ScalarOps::f3b<T>(T,T,T)
// uint f3b<uint>(uint a, uint b, uint c)
// AggressiveInlining
uint f3b<uint>(uint a, uint b, uint c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.2
    IL_0007: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::xor1<T>(T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664638, Name := T Z0.Logix.ScalarOps::f3b<T>(T,T,T)
// int f3b<int>(int a, int b, int c)
// AggressiveInlining
int f3b<int>(int a, int b, int c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.2
    IL_0007: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::xor1<T>(T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664638, Name := T Z0.Logix.ScalarOps::f3b<T>(T,T,T)
// ulong f3b<ulong>(ulong a, ulong b, ulong c)
// AggressiveInlining
ulong f3b<ulong>(ulong a, ulong b, ulong c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.2
    IL_0007: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::xor1<T>(T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664638, Name := T Z0.Logix.ScalarOps::f3b<T>(T,T,T)
// long f3b<long>(long a, long b, long c)
// AggressiveInlining
long f3b<long>(long a, long b, long c)
{
    IL_0000: ldarg.0
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.2
    IL_0007: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::xor1<T>(T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
