// Id := 100664672, Name := T Z0.Logix.ScalarOps::f5d<T>(T,T,T)
// byte f5d<byte>(byte a, byte b, byte c)
// AggressiveInlining
byte f5d<byte>(byte a, byte b, byte c)
{
    IL_0000: ldarg.2
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.0
    IL_0007: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664672, Name := T Z0.Logix.ScalarOps::f5d<T>(T,T,T)
// sbyte f5d<sbyte>(sbyte a, sbyte b, sbyte c)
// AggressiveInlining
sbyte f5d<sbyte>(sbyte a, sbyte b, sbyte c)
{
    IL_0000: ldarg.2
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.0
    IL_0007: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664672, Name := T Z0.Logix.ScalarOps::f5d<T>(T,T,T)
// ushort f5d<ushort>(ushort a, ushort b, ushort c)
// AggressiveInlining
ushort f5d<ushort>(ushort a, ushort b, ushort c)
{
    IL_0000: ldarg.2
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.0
    IL_0007: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664672, Name := T Z0.Logix.ScalarOps::f5d<T>(T,T,T)
// short f5d<short>(short a, short b, short c)
// AggressiveInlining
short f5d<short>(short a, short b, short c)
{
    IL_0000: ldarg.2
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.0
    IL_0007: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664672, Name := T Z0.Logix.ScalarOps::f5d<T>(T,T,T)
// uint f5d<uint>(uint a, uint b, uint c)
// AggressiveInlining
uint f5d<uint>(uint a, uint b, uint c)
{
    IL_0000: ldarg.2
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.0
    IL_0007: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664672, Name := T Z0.Logix.ScalarOps::f5d<T>(T,T,T)
// int f5d<int>(int a, int b, int c)
// AggressiveInlining
int f5d<int>(int a, int b, int c)
{
    IL_0000: ldarg.2
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.0
    IL_0007: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664672, Name := T Z0.Logix.ScalarOps::f5d<T>(T,T,T)
// ulong f5d<ulong>(ulong a, ulong b, ulong c)
// AggressiveInlining
ulong f5d<ulong>(ulong a, ulong b, ulong c)
{
    IL_0000: ldarg.2
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.0
    IL_0007: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664672, Name := T Z0.Logix.ScalarOps::f5d<T>(T,T,T)
// long f5d<long>(long a, long b, long c)
// AggressiveInlining
long f5d<long>(long a, long b, long c)
{
    IL_0000: ldarg.2
    IL_0001: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_0006: ldarg.0
    IL_0007: call T Z0.Logix.ScalarOps::not<T>(T)
    IL_000C: ldarg.1
    IL_000D: call T Z0.Logix.ScalarOps::and<T>(T,T)
    IL_0012: call T Z0.Logix.ScalarOps::or<T>(T,T)
    IL_0017: ret
}
------------------------------------------------------------------------------------------------------------------------
