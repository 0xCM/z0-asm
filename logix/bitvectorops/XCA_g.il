// Id := 100664159, Name := Z0.BitVector`1<T> Z0.Logix.BitVectorOps::select<T>(Z0.BitVector`1<T>,Z0.BitVector`1<T>,Z0.BitVector`1<T>)
// BitVector<byte> select<byte>(BitVector<byte> x, BitVector<byte> y, BitVector<byte> z)
// AggressiveInlining
BitVector<byte> select<byte>(BitVector<byte> x, BitVector<byte> y, BitVector<byte> z)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call Z0.BitVector`1<T> Z0.BitVector::select<T>(Z0.BitVector`1<T>,Z0.BitVector`1<T>,Z0.BitVector`1<T>)
    IL_0008: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664159, Name := Z0.BitVector`1<T> Z0.Logix.BitVectorOps::select<T>(Z0.BitVector`1<T>,Z0.BitVector`1<T>,Z0.BitVector`1<T>)
// BitVector<sbyte> select<sbyte>(BitVector<sbyte> x, BitVector<sbyte> y, BitVector<sbyte> z)
// AggressiveInlining
BitVector<sbyte> select<sbyte>(BitVector<sbyte> x, BitVector<sbyte> y, BitVector<sbyte> z)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call Z0.BitVector`1<T> Z0.BitVector::select<T>(Z0.BitVector`1<T>,Z0.BitVector`1<T>,Z0.BitVector`1<T>)
    IL_0008: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664159, Name := Z0.BitVector`1<T> Z0.Logix.BitVectorOps::select<T>(Z0.BitVector`1<T>,Z0.BitVector`1<T>,Z0.BitVector`1<T>)
// BitVector<ushort> select<ushort>(BitVector<ushort> x, BitVector<ushort> y, BitVector<ushort> z)
// AggressiveInlining
BitVector<ushort> select<ushort>(BitVector<ushort> x, BitVector<ushort> y, BitVector<ushort> z)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call Z0.BitVector`1<T> Z0.BitVector::select<T>(Z0.BitVector`1<T>,Z0.BitVector`1<T>,Z0.BitVector`1<T>)
    IL_0008: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664159, Name := Z0.BitVector`1<T> Z0.Logix.BitVectorOps::select<T>(Z0.BitVector`1<T>,Z0.BitVector`1<T>,Z0.BitVector`1<T>)
// BitVector<Int16> select<Int16>(BitVector<Int16> x, BitVector<Int16> y, BitVector<Int16> z)
// AggressiveInlining
BitVector<Int16> select<Int16>(BitVector<Int16> x, BitVector<Int16> y, BitVector<Int16> z)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call Z0.BitVector`1<T> Z0.BitVector::select<T>(Z0.BitVector`1<T>,Z0.BitVector`1<T>,Z0.BitVector`1<T>)
    IL_0008: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664159, Name := Z0.BitVector`1<T> Z0.Logix.BitVectorOps::select<T>(Z0.BitVector`1<T>,Z0.BitVector`1<T>,Z0.BitVector`1<T>)
// BitVector<uint> select<uint>(BitVector<uint> x, BitVector<uint> y, BitVector<uint> z)
// AggressiveInlining
BitVector<uint> select<uint>(BitVector<uint> x, BitVector<uint> y, BitVector<uint> z)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call Z0.BitVector`1<T> Z0.BitVector::select<T>(Z0.BitVector`1<T>,Z0.BitVector`1<T>,Z0.BitVector`1<T>)
    IL_0008: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664159, Name := Z0.BitVector`1<T> Z0.Logix.BitVectorOps::select<T>(Z0.BitVector`1<T>,Z0.BitVector`1<T>,Z0.BitVector`1<T>)
// BitVector<int> select<int>(BitVector<int> x, BitVector<int> y, BitVector<int> z)
// AggressiveInlining
BitVector<int> select<int>(BitVector<int> x, BitVector<int> y, BitVector<int> z)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call Z0.BitVector`1<T> Z0.BitVector::select<T>(Z0.BitVector`1<T>,Z0.BitVector`1<T>,Z0.BitVector`1<T>)
    IL_0008: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664159, Name := Z0.BitVector`1<T> Z0.Logix.BitVectorOps::select<T>(Z0.BitVector`1<T>,Z0.BitVector`1<T>,Z0.BitVector`1<T>)
// BitVector<ulong> select<ulong>(BitVector<ulong> x, BitVector<ulong> y, BitVector<ulong> z)
// AggressiveInlining
BitVector<ulong> select<ulong>(BitVector<ulong> x, BitVector<ulong> y, BitVector<ulong> z)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call Z0.BitVector`1<T> Z0.BitVector::select<T>(Z0.BitVector`1<T>,Z0.BitVector`1<T>,Z0.BitVector`1<T>)
    IL_0008: ret
}
------------------------------------------------------------------------------------------------------------------------
// Id := 100664159, Name := Z0.BitVector`1<T> Z0.Logix.BitVectorOps::select<T>(Z0.BitVector`1<T>,Z0.BitVector`1<T>,Z0.BitVector`1<T>)
// BitVector<long> select<long>(BitVector<long> x, BitVector<long> y, BitVector<long> z)
// AggressiveInlining
BitVector<long> select<long>(BitVector<long> x, BitVector<long> y, BitVector<long> z)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call Z0.BitVector`1<T> Z0.BitVector::select<T>(Z0.BitVector`1<T>,Z0.BitVector`1<T>,Z0.BitVector`1<T>)
    IL_0008: ret
}
------------------------------------------------------------------------------------------------------------------------
