// Z0.BitGrid16`3<Z0.N1,Z0.N16,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N1,Z0.N16)
// BitGrid16<N1,N16,byte> load<byte>(in Block16<byte> src, N1 m, N16 n)
// AggressiveInlining
BitGrid16<N1,N16,byte> load<byte>(in Block16<byte> src, N1 m, N16 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N1,Z0.N16,T> Z0.BitGrid16`3<Z0.N1,Z0.N16,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N1,Z0.N16,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N1,Z0.N16)
// BitGrid16<N1,N16,ushort> load<ushort>(in Block16<ushort> src, N1 m, N16 n)
// AggressiveInlining
BitGrid16<N1,N16,ushort> load<ushort>(in Block16<ushort> src, N1 m, N16 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N1,Z0.N16,T> Z0.BitGrid16`3<Z0.N1,Z0.N16,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N1,Z0.N16,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N1,Z0.N16)
// BitGrid16<N1,N16,uint> load<uint>(in Block16<uint> src, N1 m, N16 n)
// AggressiveInlining
BitGrid16<N1,N16,uint> load<uint>(in Block16<uint> src, N1 m, N16 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N1,Z0.N16,T> Z0.BitGrid16`3<Z0.N1,Z0.N16,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N1,Z0.N16,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N1,Z0.N16)
// BitGrid16<N1,N16,ulong> load<ulong>(in Block16<ulong> src, N1 m, N16 n)
// AggressiveInlining
BitGrid16<N1,N16,ulong> load<ulong>(in Block16<ulong> src, N1 m, N16 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N1,Z0.N16,T> Z0.BitGrid16`3<Z0.N1,Z0.N16,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N16,Z0.N1,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N16,Z0.N1)
// BitGrid16<N16,N1,byte> load<byte>(in Block16<byte> src, N16 m, N1 n)
// AggressiveInlining
BitGrid16<N16,N1,byte> load<byte>(in Block16<byte> src, N16 m, N1 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N16,Z0.N1,T> Z0.BitGrid16`3<Z0.N16,Z0.N1,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N16,Z0.N1,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N16,Z0.N1)
// BitGrid16<N16,N1,ushort> load<ushort>(in Block16<ushort> src, N16 m, N1 n)
// AggressiveInlining
BitGrid16<N16,N1,ushort> load<ushort>(in Block16<ushort> src, N16 m, N1 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N16,Z0.N1,T> Z0.BitGrid16`3<Z0.N16,Z0.N1,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N16,Z0.N1,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N16,Z0.N1)
// BitGrid16<N16,N1,uint> load<uint>(in Block16<uint> src, N16 m, N1 n)
// AggressiveInlining
BitGrid16<N16,N1,uint> load<uint>(in Block16<uint> src, N16 m, N1 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N16,Z0.N1,T> Z0.BitGrid16`3<Z0.N16,Z0.N1,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N16,Z0.N1,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N16,Z0.N1)
// BitGrid16<N16,N1,ulong> load<ulong>(in Block16<ulong> src, N16 m, N1 n)
// AggressiveInlining
BitGrid16<N16,N1,ulong> load<ulong>(in Block16<ulong> src, N16 m, N1 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N16,Z0.N1,T> Z0.BitGrid16`3<Z0.N16,Z0.N1,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N8,Z0.N2,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N2,Z0.N8)
// BitGrid16<N8,N2,byte> load<byte>(in Block16<byte> src, N2 m, N8 n)
// AggressiveInlining
BitGrid16<N8,N2,byte> load<byte>(in Block16<byte> src, N2 m, N8 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N8,Z0.N2,T> Z0.BitGrid16`3<Z0.N8,Z0.N2,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N8,Z0.N2,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N2,Z0.N8)
// BitGrid16<N8,N2,ushort> load<ushort>(in Block16<ushort> src, N2 m, N8 n)
// AggressiveInlining
BitGrid16<N8,N2,ushort> load<ushort>(in Block16<ushort> src, N2 m, N8 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N8,Z0.N2,T> Z0.BitGrid16`3<Z0.N8,Z0.N2,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N8,Z0.N2,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N2,Z0.N8)
// BitGrid16<N8,N2,uint> load<uint>(in Block16<uint> src, N2 m, N8 n)
// AggressiveInlining
BitGrid16<N8,N2,uint> load<uint>(in Block16<uint> src, N2 m, N8 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N8,Z0.N2,T> Z0.BitGrid16`3<Z0.N8,Z0.N2,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N8,Z0.N2,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N2,Z0.N8)
// BitGrid16<N8,N2,ulong> load<ulong>(in Block16<ulong> src, N2 m, N8 n)
// AggressiveInlining
BitGrid16<N8,N2,ulong> load<ulong>(in Block16<ulong> src, N2 m, N8 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N8,Z0.N2,T> Z0.BitGrid16`3<Z0.N8,Z0.N2,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N8,Z0.N2,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N8,Z0.N2)
// BitGrid16<N8,N2,byte> load<byte>(in Block16<byte> src, N8 m, N2 n)
// AggressiveInlining
BitGrid16<N8,N2,byte> load<byte>(in Block16<byte> src, N8 m, N2 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N8,Z0.N2,T> Z0.BitGrid16`3<Z0.N8,Z0.N2,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N8,Z0.N2,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N8,Z0.N2)
// BitGrid16<N8,N2,ushort> load<ushort>(in Block16<ushort> src, N8 m, N2 n)
// AggressiveInlining
BitGrid16<N8,N2,ushort> load<ushort>(in Block16<ushort> src, N8 m, N2 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N8,Z0.N2,T> Z0.BitGrid16`3<Z0.N8,Z0.N2,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N8,Z0.N2,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N8,Z0.N2)
// BitGrid16<N8,N2,uint> load<uint>(in Block16<uint> src, N8 m, N2 n)
// AggressiveInlining
BitGrid16<N8,N2,uint> load<uint>(in Block16<uint> src, N8 m, N2 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N8,Z0.N2,T> Z0.BitGrid16`3<Z0.N8,Z0.N2,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N8,Z0.N2,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N8,Z0.N2)
// BitGrid16<N8,N2,ulong> load<ulong>(in Block16<ulong> src, N8 m, N2 n)
// AggressiveInlining
BitGrid16<N8,N2,ulong> load<ulong>(in Block16<ulong> src, N8 m, N2 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N8,Z0.N2,T> Z0.BitGrid16`3<Z0.N8,Z0.N2,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N4,Z0.N4,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N4,Z0.N4)
// BitGrid16<N4,N4,byte> load<byte>(in Block16<byte> src, N4 m, N4 n)
// AggressiveInlining
BitGrid16<N4,N4,byte> load<byte>(in Block16<byte> src, N4 m, N4 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N4,Z0.N4,T> Z0.BitGrid16`3<Z0.N4,Z0.N4,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N4,Z0.N4,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N4,Z0.N4)
// BitGrid16<N4,N4,ushort> load<ushort>(in Block16<ushort> src, N4 m, N4 n)
// AggressiveInlining
BitGrid16<N4,N4,ushort> load<ushort>(in Block16<ushort> src, N4 m, N4 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N4,Z0.N4,T> Z0.BitGrid16`3<Z0.N4,Z0.N4,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N4,Z0.N4,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N4,Z0.N4)
// BitGrid16<N4,N4,uint> load<uint>(in Block16<uint> src, N4 m, N4 n)
// AggressiveInlining
BitGrid16<N4,N4,uint> load<uint>(in Block16<uint> src, N4 m, N4 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N4,Z0.N4,T> Z0.BitGrid16`3<Z0.N4,Z0.N4,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid16`3<Z0.N4,Z0.N4,T> Z0.BitGrid::load<T>(Z0.Block16`1<T>&,Z0.N4,Z0.N4)
// BitGrid16<N4,N4,ulong> load<ulong>(in Block16<ulong> src, N4 m, N4 n)
// AggressiveInlining
BitGrid16<N4,N4,ulong> load<ulong>(in Block16<ulong> src, N4 m, N4 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid16`3<Z0.N4,Z0.N4,T> Z0.BitGrid16`3<Z0.N4,Z0.N4,T>::op_Implicit(Z0.Block16`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N1,Z0.N32,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N1,Z0.N32)
// BitGrid32<N1,N32,byte> load<byte>(in Block32<byte> src, N1 m, N32 n)
// AggressiveInlining
BitGrid32<N1,N32,byte> load<byte>(in Block32<byte> src, N1 m, N32 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N1,Z0.N32,T> Z0.BitGrid32`3<Z0.N1,Z0.N32,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N1,Z0.N32,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N1,Z0.N32)
// BitGrid32<N1,N32,ushort> load<ushort>(in Block32<ushort> src, N1 m, N32 n)
// AggressiveInlining
BitGrid32<N1,N32,ushort> load<ushort>(in Block32<ushort> src, N1 m, N32 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N1,Z0.N32,T> Z0.BitGrid32`3<Z0.N1,Z0.N32,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N1,Z0.N32,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N1,Z0.N32)
// BitGrid32<N1,N32,uint> load<uint>(in Block32<uint> src, N1 m, N32 n)
// AggressiveInlining
BitGrid32<N1,N32,uint> load<uint>(in Block32<uint> src, N1 m, N32 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N1,Z0.N32,T> Z0.BitGrid32`3<Z0.N1,Z0.N32,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N1,Z0.N32,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N1,Z0.N32)
// BitGrid32<N1,N32,ulong> load<ulong>(in Block32<ulong> src, N1 m, N32 n)
// AggressiveInlining
BitGrid32<N1,N32,ulong> load<ulong>(in Block32<ulong> src, N1 m, N32 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N1,Z0.N32,T> Z0.BitGrid32`3<Z0.N1,Z0.N32,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N32,Z0.N1,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N32,Z0.N1)
// BitGrid32<N32,N1,byte> load<byte>(in Block32<byte> src, N32 m, N1 n)
// AggressiveInlining
BitGrid32<N32,N1,byte> load<byte>(in Block32<byte> src, N32 m, N1 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N32,Z0.N1,T> Z0.BitGrid32`3<Z0.N32,Z0.N1,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N32,Z0.N1,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N32,Z0.N1)
// BitGrid32<N32,N1,ushort> load<ushort>(in Block32<ushort> src, N32 m, N1 n)
// AggressiveInlining
BitGrid32<N32,N1,ushort> load<ushort>(in Block32<ushort> src, N32 m, N1 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N32,Z0.N1,T> Z0.BitGrid32`3<Z0.N32,Z0.N1,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N32,Z0.N1,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N32,Z0.N1)
// BitGrid32<N32,N1,uint> load<uint>(in Block32<uint> src, N32 m, N1 n)
// AggressiveInlining
BitGrid32<N32,N1,uint> load<uint>(in Block32<uint> src, N32 m, N1 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N32,Z0.N1,T> Z0.BitGrid32`3<Z0.N32,Z0.N1,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N32,Z0.N1,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N32,Z0.N1)
// BitGrid32<N32,N1,ulong> load<ulong>(in Block32<ulong> src, N32 m, N1 n)
// AggressiveInlining
BitGrid32<N32,N1,ulong> load<ulong>(in Block32<ulong> src, N32 m, N1 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N32,Z0.N1,T> Z0.BitGrid32`3<Z0.N32,Z0.N1,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N2,Z0.N16,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N2,Z0.N16)
// BitGrid32<N2,N16,byte> load<byte>(in Block32<byte> src, N2 m, N16 n)
// AggressiveInlining
BitGrid32<N2,N16,byte> load<byte>(in Block32<byte> src, N2 m, N16 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N2,Z0.N16,T> Z0.BitGrid32`3<Z0.N2,Z0.N16,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N2,Z0.N16,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N2,Z0.N16)
// BitGrid32<N2,N16,ushort> load<ushort>(in Block32<ushort> src, N2 m, N16 n)
// AggressiveInlining
BitGrid32<N2,N16,ushort> load<ushort>(in Block32<ushort> src, N2 m, N16 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N2,Z0.N16,T> Z0.BitGrid32`3<Z0.N2,Z0.N16,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N2,Z0.N16,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N2,Z0.N16)
// BitGrid32<N2,N16,uint> load<uint>(in Block32<uint> src, N2 m, N16 n)
// AggressiveInlining
BitGrid32<N2,N16,uint> load<uint>(in Block32<uint> src, N2 m, N16 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N2,Z0.N16,T> Z0.BitGrid32`3<Z0.N2,Z0.N16,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N2,Z0.N16,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N2,Z0.N16)
// BitGrid32<N2,N16,ulong> load<ulong>(in Block32<ulong> src, N2 m, N16 n)
// AggressiveInlining
BitGrid32<N2,N16,ulong> load<ulong>(in Block32<ulong> src, N2 m, N16 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N2,Z0.N16,T> Z0.BitGrid32`3<Z0.N2,Z0.N16,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N16,Z0.N2,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N16,Z0.N2)
// BitGrid32<N16,N2,byte> load<byte>(in Block32<byte> src, N16 m, N2 n)
// AggressiveInlining
BitGrid32<N16,N2,byte> load<byte>(in Block32<byte> src, N16 m, N2 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N16,Z0.N2,T> Z0.BitGrid32`3<Z0.N16,Z0.N2,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N16,Z0.N2,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N16,Z0.N2)
// BitGrid32<N16,N2,ushort> load<ushort>(in Block32<ushort> src, N16 m, N2 n)
// AggressiveInlining
BitGrid32<N16,N2,ushort> load<ushort>(in Block32<ushort> src, N16 m, N2 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N16,Z0.N2,T> Z0.BitGrid32`3<Z0.N16,Z0.N2,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N16,Z0.N2,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N16,Z0.N2)
// BitGrid32<N16,N2,uint> load<uint>(in Block32<uint> src, N16 m, N2 n)
// AggressiveInlining
BitGrid32<N16,N2,uint> load<uint>(in Block32<uint> src, N16 m, N2 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N16,Z0.N2,T> Z0.BitGrid32`3<Z0.N16,Z0.N2,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N16,Z0.N2,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N16,Z0.N2)
// BitGrid32<N16,N2,ulong> load<ulong>(in Block32<ulong> src, N16 m, N2 n)
// AggressiveInlining
BitGrid32<N16,N2,ulong> load<ulong>(in Block32<ulong> src, N16 m, N2 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N16,Z0.N2,T> Z0.BitGrid32`3<Z0.N16,Z0.N2,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N4,Z0.N8,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N4,Z0.N8)
// BitGrid32<N4,N8,byte> load<byte>(in Block32<byte> src, N4 m, N8 n)
// AggressiveInlining
BitGrid32<N4,N8,byte> load<byte>(in Block32<byte> src, N4 m, N8 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N4,Z0.N8,T> Z0.BitGrid32`3<Z0.N4,Z0.N8,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N4,Z0.N8,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N4,Z0.N8)
// BitGrid32<N4,N8,ushort> load<ushort>(in Block32<ushort> src, N4 m, N8 n)
// AggressiveInlining
BitGrid32<N4,N8,ushort> load<ushort>(in Block32<ushort> src, N4 m, N8 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N4,Z0.N8,T> Z0.BitGrid32`3<Z0.N4,Z0.N8,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N4,Z0.N8,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N4,Z0.N8)
// BitGrid32<N4,N8,uint> load<uint>(in Block32<uint> src, N4 m, N8 n)
// AggressiveInlining
BitGrid32<N4,N8,uint> load<uint>(in Block32<uint> src, N4 m, N8 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N4,Z0.N8,T> Z0.BitGrid32`3<Z0.N4,Z0.N8,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N4,Z0.N8,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N4,Z0.N8)
// BitGrid32<N4,N8,ulong> load<ulong>(in Block32<ulong> src, N4 m, N8 n)
// AggressiveInlining
BitGrid32<N4,N8,ulong> load<ulong>(in Block32<ulong> src, N4 m, N8 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N4,Z0.N8,T> Z0.BitGrid32`3<Z0.N4,Z0.N8,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N8,Z0.N4,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N8,Z0.N4)
// BitGrid32<N8,N4,byte> load<byte>(in Block32<byte> src, N8 m, N4 n)
// AggressiveInlining
BitGrid32<N8,N4,byte> load<byte>(in Block32<byte> src, N8 m, N4 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N8,Z0.N4,T> Z0.BitGrid32`3<Z0.N8,Z0.N4,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N8,Z0.N4,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N8,Z0.N4)
// BitGrid32<N8,N4,ushort> load<ushort>(in Block32<ushort> src, N8 m, N4 n)
// AggressiveInlining
BitGrid32<N8,N4,ushort> load<ushort>(in Block32<ushort> src, N8 m, N4 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N8,Z0.N4,T> Z0.BitGrid32`3<Z0.N8,Z0.N4,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N8,Z0.N4,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N8,Z0.N4)
// BitGrid32<N8,N4,uint> load<uint>(in Block32<uint> src, N8 m, N4 n)
// AggressiveInlining
BitGrid32<N8,N4,uint> load<uint>(in Block32<uint> src, N8 m, N4 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N8,Z0.N4,T> Z0.BitGrid32`3<Z0.N8,Z0.N4,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid32`3<Z0.N8,Z0.N4,T> Z0.BitGrid::load<T>(Z0.Block32`1<T>&,Z0.N8,Z0.N4)
// BitGrid32<N8,N4,ulong> load<ulong>(in Block32<ulong> src, N8 m, N4 n)
// AggressiveInlining
BitGrid32<N8,N4,ulong> load<ulong>(in Block32<ulong> src, N8 m, N4 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid32`3<Z0.N8,Z0.N4,T> Z0.BitGrid32`3<Z0.N8,Z0.N4,T>::op_Implicit(Z0.Block32`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N1,Z0.N64,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N1,Z0.N64)
// BitGrid64<N1,N64,byte> load<byte>(in Block64<byte> src, N1 m, N64 n)
// AggressiveInlining
BitGrid64<N1,N64,byte> load<byte>(in Block64<byte> src, N1 m, N64 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N1,Z0.N64,T> Z0.BitGrid64`3<Z0.N1,Z0.N64,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N1,Z0.N64,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N1,Z0.N64)
// BitGrid64<N1,N64,ushort> load<ushort>(in Block64<ushort> src, N1 m, N64 n)
// AggressiveInlining
BitGrid64<N1,N64,ushort> load<ushort>(in Block64<ushort> src, N1 m, N64 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N1,Z0.N64,T> Z0.BitGrid64`3<Z0.N1,Z0.N64,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N1,Z0.N64,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N1,Z0.N64)
// BitGrid64<N1,N64,uint> load<uint>(in Block64<uint> src, N1 m, N64 n)
// AggressiveInlining
BitGrid64<N1,N64,uint> load<uint>(in Block64<uint> src, N1 m, N64 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N1,Z0.N64,T> Z0.BitGrid64`3<Z0.N1,Z0.N64,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N1,Z0.N64,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N1,Z0.N64)
// BitGrid64<N1,N64,ulong> load<ulong>(in Block64<ulong> src, N1 m, N64 n)
// AggressiveInlining
BitGrid64<N1,N64,ulong> load<ulong>(in Block64<ulong> src, N1 m, N64 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N1,Z0.N64,T> Z0.BitGrid64`3<Z0.N1,Z0.N64,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N64,Z0.N1,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N64,Z0.N1)
// BitGrid64<N64,N1,byte> load<byte>(in Block64<byte> src, N64 m, N1 n)
// AggressiveInlining
BitGrid64<N64,N1,byte> load<byte>(in Block64<byte> src, N64 m, N1 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N64,Z0.N1,T> Z0.BitGrid64`3<Z0.N64,Z0.N1,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N64,Z0.N1,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N64,Z0.N1)
// BitGrid64<N64,N1,ushort> load<ushort>(in Block64<ushort> src, N64 m, N1 n)
// AggressiveInlining
BitGrid64<N64,N1,ushort> load<ushort>(in Block64<ushort> src, N64 m, N1 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N64,Z0.N1,T> Z0.BitGrid64`3<Z0.N64,Z0.N1,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N64,Z0.N1,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N64,Z0.N1)
// BitGrid64<N64,N1,uint> load<uint>(in Block64<uint> src, N64 m, N1 n)
// AggressiveInlining
BitGrid64<N64,N1,uint> load<uint>(in Block64<uint> src, N64 m, N1 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N64,Z0.N1,T> Z0.BitGrid64`3<Z0.N64,Z0.N1,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N64,Z0.N1,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N64,Z0.N1)
// BitGrid64<N64,N1,ulong> load<ulong>(in Block64<ulong> src, N64 m, N1 n)
// AggressiveInlining
BitGrid64<N64,N1,ulong> load<ulong>(in Block64<ulong> src, N64 m, N1 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N64,Z0.N1,T> Z0.BitGrid64`3<Z0.N64,Z0.N1,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N2,Z0.N32,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N2,Z0.N32)
// BitGrid64<N2,N32,byte> load<byte>(in Block64<byte> src, N2 m, N32 n)
// AggressiveInlining
BitGrid64<N2,N32,byte> load<byte>(in Block64<byte> src, N2 m, N32 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N2,Z0.N32,T> Z0.BitGrid64`3<Z0.N2,Z0.N32,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N2,Z0.N32,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N2,Z0.N32)
// BitGrid64<N2,N32,ushort> load<ushort>(in Block64<ushort> src, N2 m, N32 n)
// AggressiveInlining
BitGrid64<N2,N32,ushort> load<ushort>(in Block64<ushort> src, N2 m, N32 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N2,Z0.N32,T> Z0.BitGrid64`3<Z0.N2,Z0.N32,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N2,Z0.N32,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N2,Z0.N32)
// BitGrid64<N2,N32,uint> load<uint>(in Block64<uint> src, N2 m, N32 n)
// AggressiveInlining
BitGrid64<N2,N32,uint> load<uint>(in Block64<uint> src, N2 m, N32 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N2,Z0.N32,T> Z0.BitGrid64`3<Z0.N2,Z0.N32,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N2,Z0.N32,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N2,Z0.N32)
// BitGrid64<N2,N32,ulong> load<ulong>(in Block64<ulong> src, N2 m, N32 n)
// AggressiveInlining
BitGrid64<N2,N32,ulong> load<ulong>(in Block64<ulong> src, N2 m, N32 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N2,Z0.N32,T> Z0.BitGrid64`3<Z0.N2,Z0.N32,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N32,Z0.N2,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N32,Z0.N2)
// BitGrid64<N32,N2,byte> load<byte>(in Block64<byte> src, N32 m, N2 n)
// AggressiveInlining
BitGrid64<N32,N2,byte> load<byte>(in Block64<byte> src, N32 m, N2 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N32,Z0.N2,T> Z0.BitGrid64`3<Z0.N32,Z0.N2,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N32,Z0.N2,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N32,Z0.N2)
// BitGrid64<N32,N2,ushort> load<ushort>(in Block64<ushort> src, N32 m, N2 n)
// AggressiveInlining
BitGrid64<N32,N2,ushort> load<ushort>(in Block64<ushort> src, N32 m, N2 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N32,Z0.N2,T> Z0.BitGrid64`3<Z0.N32,Z0.N2,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N32,Z0.N2,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N32,Z0.N2)
// BitGrid64<N32,N2,uint> load<uint>(in Block64<uint> src, N32 m, N2 n)
// AggressiveInlining
BitGrid64<N32,N2,uint> load<uint>(in Block64<uint> src, N32 m, N2 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N32,Z0.N2,T> Z0.BitGrid64`3<Z0.N32,Z0.N2,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N32,Z0.N2,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N32,Z0.N2)
// BitGrid64<N32,N2,ulong> load<ulong>(in Block64<ulong> src, N32 m, N2 n)
// AggressiveInlining
BitGrid64<N32,N2,ulong> load<ulong>(in Block64<ulong> src, N32 m, N2 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N32,Z0.N2,T> Z0.BitGrid64`3<Z0.N32,Z0.N2,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N4,Z0.N16,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N4,Z0.N16)
// BitGrid64<N4,N16,byte> load<byte>(in Block64<byte> src, N4 m, N16 n)
// AggressiveInlining
BitGrid64<N4,N16,byte> load<byte>(in Block64<byte> src, N4 m, N16 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N4,Z0.N16,T> Z0.BitGrid64`3<Z0.N4,Z0.N16,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N4,Z0.N16,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N4,Z0.N16)
// BitGrid64<N4,N16,ushort> load<ushort>(in Block64<ushort> src, N4 m, N16 n)
// AggressiveInlining
BitGrid64<N4,N16,ushort> load<ushort>(in Block64<ushort> src, N4 m, N16 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N4,Z0.N16,T> Z0.BitGrid64`3<Z0.N4,Z0.N16,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N4,Z0.N16,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N4,Z0.N16)
// BitGrid64<N4,N16,uint> load<uint>(in Block64<uint> src, N4 m, N16 n)
// AggressiveInlining
BitGrid64<N4,N16,uint> load<uint>(in Block64<uint> src, N4 m, N16 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N4,Z0.N16,T> Z0.BitGrid64`3<Z0.N4,Z0.N16,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N4,Z0.N16,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N4,Z0.N16)
// BitGrid64<N4,N16,ulong> load<ulong>(in Block64<ulong> src, N4 m, N16 n)
// AggressiveInlining
BitGrid64<N4,N16,ulong> load<ulong>(in Block64<ulong> src, N4 m, N16 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N4,Z0.N16,T> Z0.BitGrid64`3<Z0.N4,Z0.N16,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N16,Z0.N4,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N16,Z0.N4)
// BitGrid64<N16,N4,byte> load<byte>(in Block64<byte> src, N16 m, N4 n)
// AggressiveInlining
BitGrid64<N16,N4,byte> load<byte>(in Block64<byte> src, N16 m, N4 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N16,Z0.N4,T> Z0.BitGrid64`3<Z0.N16,Z0.N4,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N16,Z0.N4,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N16,Z0.N4)
// BitGrid64<N16,N4,ushort> load<ushort>(in Block64<ushort> src, N16 m, N4 n)
// AggressiveInlining
BitGrid64<N16,N4,ushort> load<ushort>(in Block64<ushort> src, N16 m, N4 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N16,Z0.N4,T> Z0.BitGrid64`3<Z0.N16,Z0.N4,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N16,Z0.N4,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N16,Z0.N4)
// BitGrid64<N16,N4,uint> load<uint>(in Block64<uint> src, N16 m, N4 n)
// AggressiveInlining
BitGrid64<N16,N4,uint> load<uint>(in Block64<uint> src, N16 m, N4 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N16,Z0.N4,T> Z0.BitGrid64`3<Z0.N16,Z0.N4,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N16,Z0.N4,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N16,Z0.N4)
// BitGrid64<N16,N4,ulong> load<ulong>(in Block64<ulong> src, N16 m, N4 n)
// AggressiveInlining
BitGrid64<N16,N4,ulong> load<ulong>(in Block64<ulong> src, N16 m, N4 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N16,Z0.N4,T> Z0.BitGrid64`3<Z0.N16,Z0.N4,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N8,Z0.N8,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N8,Z0.N8)
// BitGrid64<N8,N8,byte> load<byte>(in Block64<byte> src, N8 m, N8 n)
// AggressiveInlining
BitGrid64<N8,N8,byte> load<byte>(in Block64<byte> src, N8 m, N8 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N8,Z0.N8,T> Z0.BitGrid64`3<Z0.N8,Z0.N8,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N8,Z0.N8,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N8,Z0.N8)
// BitGrid64<N8,N8,ushort> load<ushort>(in Block64<ushort> src, N8 m, N8 n)
// AggressiveInlining
BitGrid64<N8,N8,ushort> load<ushort>(in Block64<ushort> src, N8 m, N8 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N8,Z0.N8,T> Z0.BitGrid64`3<Z0.N8,Z0.N8,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N8,Z0.N8,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N8,Z0.N8)
// BitGrid64<N8,N8,uint> load<uint>(in Block64<uint> src, N8 m, N8 n)
// AggressiveInlining
BitGrid64<N8,N8,uint> load<uint>(in Block64<uint> src, N8 m, N8 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N8,Z0.N8,T> Z0.BitGrid64`3<Z0.N8,Z0.N8,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid64`3<Z0.N8,Z0.N8,T> Z0.BitGrid::load<T>(Z0.Block64`1<T>&,Z0.N8,Z0.N8)
// BitGrid64<N8,N8,ulong> load<ulong>(in Block64<ulong> src, N8 m, N8 n)
// AggressiveInlining
BitGrid64<N8,N8,ulong> load<ulong>(in Block64<ulong> src, N8 m, N8 n)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.BitGrid64`3<Z0.N8,Z0.N8,T> Z0.BitGrid64`3<Z0.N8,Z0.N8,T>::op_Implicit(Z0.Block64`1<T>&)
    IL_0006: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid`1<T> Z0.BitGrid::load<T>(Z0.Block256`1<T>&,System.UInt16,System.UInt16)
// BitGrid<byte> load<byte>(in Block256<byte> src, ushort rows, ushort cols)
// AggressiveInlining
BitGrid<byte> load<byte>(in Block256<byte> src, ushort rows, ushort cols)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Block256`1<T>
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: newobj System.Void Z0.BitGrid`1<T>::.ctor(Z0.Block256`1<T>,System.Int32,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid`1<T> Z0.BitGrid::load<T>(Z0.Block256`1<T>&,System.UInt16,System.UInt16)
// BitGrid<ushort> load<ushort>(in Block256<ushort> src, ushort rows, ushort cols)
// AggressiveInlining
BitGrid<ushort> load<ushort>(in Block256<ushort> src, ushort rows, ushort cols)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Block256`1<T>
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: newobj System.Void Z0.BitGrid`1<T>::.ctor(Z0.Block256`1<T>,System.Int32,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid`1<T> Z0.BitGrid::load<T>(Z0.Block256`1<T>&,System.UInt16,System.UInt16)
// BitGrid<uint> load<uint>(in Block256<uint> src, ushort rows, ushort cols)
// AggressiveInlining
BitGrid<uint> load<uint>(in Block256<uint> src, ushort rows, ushort cols)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Block256`1<T>
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: newobj System.Void Z0.BitGrid`1<T>::.ctor(Z0.Block256`1<T>,System.Int32,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid`1<T> Z0.BitGrid::load<T>(Z0.Block256`1<T>&,System.UInt16,System.UInt16)
// BitGrid<ulong> load<ulong>(in Block256<ulong> src, ushort rows, ushort cols)
// AggressiveInlining
BitGrid<ulong> load<ulong>(in Block256<ulong> src, ushort rows, ushort cols)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Block256`1<T>
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: newobj System.Void Z0.BitGrid`1<T>::.ctor(Z0.Block256`1<T>,System.Int32,System.Int32)
    IL_000D: ret
}
------------------------------------------------------------------------------------------------------------------------
