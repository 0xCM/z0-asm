// Z0.BitGrid`1<T> Z0.BitGrid::and<T>(Z0.BitGrid`1<T>&,Z0.BitGrid`1<T>&)
// BitGrid<byte> and<byte>(in BitGrid<byte> gx, in BitGrid<byte> gy)
// AggressiveInlining
BitGrid<byte> and<byte>(in BitGrid<byte> gx, in BitGrid<byte> gy)
{
    IL_0000: ldarg.0
    IL_0001: ldfld System.Int32 Z0.BitGrid`1<T>::RowCount
    IL_0006: ldarg.0
    IL_0007: ldfld System.Int32 Z0.BitGrid`1<T>::ColCount
    IL_000C: ldloca.s V_1
    IL_000E: initobj T
    IL_0014: ldloc.1
    IL_0015: call Z0.BitGrid`1<T> Z0.BitGrid::alloc<T>(System.Int32,System.Int32,T)
    IL_001A: stloc.0
    IL_001B: ldarg.0
    IL_001C: ldarg.1
    IL_001D: ldloca.s V_0
    IL_001F: call Z0.BitGrid`1<T>& modreq(System.Runtime.InteropServices.InAttribute) Z0.BitGrid::and<T>(Z0.BitGrid`1<T>&,Z0.BitGrid`1<T>&,Z0.BitGrid`1<T>&)
    IL_0024: pop
    IL_0025: ldloc.0
    IL_0026: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid`1<T> Z0.BitGrid::and<T>(Z0.BitGrid`1<T>&,Z0.BitGrid`1<T>&)
// BitGrid<ushort> and<ushort>(in BitGrid<ushort> gx, in BitGrid<ushort> gy)
// AggressiveInlining
BitGrid<ushort> and<ushort>(in BitGrid<ushort> gx, in BitGrid<ushort> gy)
{
    IL_0000: ldarg.0
    IL_0001: ldfld System.Int32 Z0.BitGrid`1<T>::RowCount
    IL_0006: ldarg.0
    IL_0007: ldfld System.Int32 Z0.BitGrid`1<T>::ColCount
    IL_000C: ldloca.s V_1
    IL_000E: initobj T
    IL_0014: ldloc.1
    IL_0015: call Z0.BitGrid`1<T> Z0.BitGrid::alloc<T>(System.Int32,System.Int32,T)
    IL_001A: stloc.0
    IL_001B: ldarg.0
    IL_001C: ldarg.1
    IL_001D: ldloca.s V_0
    IL_001F: call Z0.BitGrid`1<T>& modreq(System.Runtime.InteropServices.InAttribute) Z0.BitGrid::and<T>(Z0.BitGrid`1<T>&,Z0.BitGrid`1<T>&,Z0.BitGrid`1<T>&)
    IL_0024: pop
    IL_0025: ldloc.0
    IL_0026: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid`1<T> Z0.BitGrid::and<T>(Z0.BitGrid`1<T>&,Z0.BitGrid`1<T>&)
// BitGrid<uint> and<uint>(in BitGrid<uint> gx, in BitGrid<uint> gy)
// AggressiveInlining
BitGrid<uint> and<uint>(in BitGrid<uint> gx, in BitGrid<uint> gy)
{
    IL_0000: ldarg.0
    IL_0001: ldfld System.Int32 Z0.BitGrid`1<T>::RowCount
    IL_0006: ldarg.0
    IL_0007: ldfld System.Int32 Z0.BitGrid`1<T>::ColCount
    IL_000C: ldloca.s V_1
    IL_000E: initobj T
    IL_0014: ldloc.1
    IL_0015: call Z0.BitGrid`1<T> Z0.BitGrid::alloc<T>(System.Int32,System.Int32,T)
    IL_001A: stloc.0
    IL_001B: ldarg.0
    IL_001C: ldarg.1
    IL_001D: ldloca.s V_0
    IL_001F: call Z0.BitGrid`1<T>& modreq(System.Runtime.InteropServices.InAttribute) Z0.BitGrid::and<T>(Z0.BitGrid`1<T>&,Z0.BitGrid`1<T>&,Z0.BitGrid`1<T>&)
    IL_0024: pop
    IL_0025: ldloc.0
    IL_0026: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.BitGrid`1<T> Z0.BitGrid::and<T>(Z0.BitGrid`1<T>&,Z0.BitGrid`1<T>&)
// BitGrid<ulong> and<ulong>(in BitGrid<ulong> gx, in BitGrid<ulong> gy)
// AggressiveInlining
BitGrid<ulong> and<ulong>(in BitGrid<ulong> gx, in BitGrid<ulong> gy)
{
    IL_0000: ldarg.0
    IL_0001: ldfld System.Int32 Z0.BitGrid`1<T>::RowCount
    IL_0006: ldarg.0
    IL_0007: ldfld System.Int32 Z0.BitGrid`1<T>::ColCount
    IL_000C: ldloca.s V_1
    IL_000E: initobj T
    IL_0014: ldloc.1
    IL_0015: call Z0.BitGrid`1<T> Z0.BitGrid::alloc<T>(System.Int32,System.Int32,T)
    IL_001A: stloc.0
    IL_001B: ldarg.0
    IL_001C: ldarg.1
    IL_001D: ldloca.s V_0
    IL_001F: call Z0.BitGrid`1<T>& modreq(System.Runtime.InteropServices.InAttribute) Z0.BitGrid::and<T>(Z0.BitGrid`1<T>&,Z0.BitGrid`1<T>&,Z0.BitGrid`1<T>&)
    IL_0024: pop
    IL_0025: ldloc.0
    IL_0026: ret
}
------------------------------------------------------------------------------------------------------------------------
