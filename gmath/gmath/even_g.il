// Z0.bit Z0.gmath::even<T>(T)
// bit even<byte>(byte a)
// AggressiveInlining
bit even<byte>(byte a)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.bit Z0.gmath::odd<T>(T)
    IL_0006: call Z0.bit Z0.bit::op_LogicalNot(Z0.bit)
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.bit Z0.gmath::even<T>(T)
// bit even<sbyte>(sbyte a)
// AggressiveInlining
bit even<sbyte>(sbyte a)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.bit Z0.gmath::odd<T>(T)
    IL_0006: call Z0.bit Z0.bit::op_LogicalNot(Z0.bit)
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.bit Z0.gmath::even<T>(T)
// bit even<ushort>(ushort a)
// AggressiveInlining
bit even<ushort>(ushort a)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.bit Z0.gmath::odd<T>(T)
    IL_0006: call Z0.bit Z0.bit::op_LogicalNot(Z0.bit)
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.bit Z0.gmath::even<T>(T)
// bit even<short>(short a)
// AggressiveInlining
bit even<short>(short a)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.bit Z0.gmath::odd<T>(T)
    IL_0006: call Z0.bit Z0.bit::op_LogicalNot(Z0.bit)
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.bit Z0.gmath::even<T>(T)
// bit even<uint>(uint a)
// AggressiveInlining
bit even<uint>(uint a)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.bit Z0.gmath::odd<T>(T)
    IL_0006: call Z0.bit Z0.bit::op_LogicalNot(Z0.bit)
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.bit Z0.gmath::even<T>(T)
// bit even<int>(int a)
// AggressiveInlining
bit even<int>(int a)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.bit Z0.gmath::odd<T>(T)
    IL_0006: call Z0.bit Z0.bit::op_LogicalNot(Z0.bit)
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.bit Z0.gmath::even<T>(T)
// bit even<ulong>(ulong a)
// AggressiveInlining
bit even<ulong>(ulong a)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.bit Z0.gmath::odd<T>(T)
    IL_0006: call Z0.bit Z0.bit::op_LogicalNot(Z0.bit)
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.bit Z0.gmath::even<T>(T)
// bit even<long>(long a)
// AggressiveInlining
bit even<long>(long a)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.bit Z0.gmath::odd<T>(T)
    IL_0006: call Z0.bit Z0.bit::op_LogicalNot(Z0.bit)
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
