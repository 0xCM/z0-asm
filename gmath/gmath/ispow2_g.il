// Z0.bit Z0.gmath::ispow2<T>(T)
// bit ispow2<byte>(byte src)
// AggressiveInlining
bit ispow2<byte>(byte src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: call Z0.bit Z0.math::ispow2(System.UInt64)
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.bit Z0.gmath::ispow2<T>(T)
// bit ispow2<sbyte>(sbyte src)
// AggressiveInlining
bit ispow2<sbyte>(sbyte src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: call Z0.bit Z0.math::ispow2(System.UInt64)
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.bit Z0.gmath::ispow2<T>(T)
// bit ispow2<ushort>(ushort src)
// AggressiveInlining
bit ispow2<ushort>(ushort src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: call Z0.bit Z0.math::ispow2(System.UInt64)
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.bit Z0.gmath::ispow2<T>(T)
// bit ispow2<short>(short src)
// AggressiveInlining
bit ispow2<short>(short src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: call Z0.bit Z0.math::ispow2(System.UInt64)
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.bit Z0.gmath::ispow2<T>(T)
// bit ispow2<uint>(uint src)
// AggressiveInlining
bit ispow2<uint>(uint src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: call Z0.bit Z0.math::ispow2(System.UInt64)
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.bit Z0.gmath::ispow2<T>(T)
// bit ispow2<int>(int src)
// AggressiveInlining
bit ispow2<int>(int src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: call Z0.bit Z0.math::ispow2(System.UInt64)
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.bit Z0.gmath::ispow2<T>(T)
// bit ispow2<ulong>(ulong src)
// AggressiveInlining
bit ispow2<ulong>(ulong src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: call Z0.bit Z0.math::ispow2(System.UInt64)
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
// Z0.bit Z0.gmath::ispow2<T>(T)
// bit ispow2<long>(long src)
// AggressiveInlining
bit ispow2<long>(long src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 zfunc::convert<T,System.UInt64>(T)
    IL_0006: call Z0.bit Z0.math::ispow2(System.UInt64)
    IL_000B: ret
}
------------------------------------------------------------------------------------------------------------------------
